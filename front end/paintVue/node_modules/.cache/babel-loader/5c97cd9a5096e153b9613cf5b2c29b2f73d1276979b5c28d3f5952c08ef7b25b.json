{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"save\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"5px\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  placeholder: \"c:\\\\\\\\name\",\n  id: \"path\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Open\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"5px\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  placeholder: \"c:\\\\\\\\name\",\n  id: \"pathload\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"bord\"\n};\nconst _hoisted_9 = {\n  class: \"left-bar\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-folder-open\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-floppy-disk\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_13 = {\n  class: \"palette\"\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-fill-drip\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-paintbrush\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-copy\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrow-rotate-left\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-rotate-right\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  width: \"18\",\n  height: \"18\",\n  x: \"3\",\n  y: \"3\"\n}), /*#__PURE__*/_createCommentVNode(\" Square \")], -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"12\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  width: \"18\",\n  height: \"10\",\n  x: \"3\",\n  y: \"1\"\n}), /*#__PURE__*/_createCommentVNode(\" Rectangle \")], -1 /* HOISTED */));\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"10\"\n}), /*#__PURE__*/_createCommentVNode(\" Circle \")], -1 /* HOISTED */));\nconst _hoisted_23 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12 2 2 22 22 22\"\n}), /*#__PURE__*/_createCommentVNode(\" Triangle \")], -1 /* HOISTED */));\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"ellipse\", {\n  cx: \"12\",\n  cy: \"12\",\n  rx: \"10\",\n  ry: \"6\"\n}), /*#__PURE__*/_createCommentVNode(\" Ellipse \")], -1 /* HOISTED */));\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12 2 15.09 8 22 9.27 17 14 18.18 20 12 17.09 5.82 20 7 14 2 9.27 8 8 12\"\n})], -1 /* HOISTED */));\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"line\", {\n  x1: \"2\",\n  y1: \"12\",\n  x2: \"22\",\n  y2: \"12\"\n}), /*#__PURE__*/_createCommentVNode(\" Line \")], -1 /* HOISTED */));\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12,2 22,7 22,17 12,22 2,17 2,7\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n})], -1 /* HOISTED */));\nconst _hoisted_28 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-eraser\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_30 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-trash\"\n}, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_dialog = _resolveComponent(\"v-dialog\");\n  const _component_v_rect = _resolveComponent(\"v-rect\");\n  const _component_v_circle = _resolveComponent(\"v-circle\");\n  const _component_v_ellipse = _resolveComponent(\"v-ellipse\");\n  const _component_v_star = _resolveComponent(\"v-star\");\n  const _component_v_line = _resolveComponent(\"v-line\");\n  const _component_v_regular_polygon = _resolveComponent(\"v-regular-polygon\");\n  const _component_v_transformer = _resolveComponent(\"v-transformer\");\n  const _component_v_layer = _resolveComponent(\"v-layer\");\n  const _component_v_stage = _resolveComponent(\"v-stage\");\n  const _component_color_picker = _resolveComponent(\"color-picker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.savdialog,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.savdialog = $event),\n    transition: \"dialog-top-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_hoisted_2]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\" xml OR json \")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.savjason === true ? '#2196F3' : 'initial',\n          color: $data.savjason === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[0] || (_cache[0] = $event => $options.savejason())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"json\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _hoisted_3, _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.savxml === true ? '#2196F3' : 'initial',\n          color: $data.savxml === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[1] || (_cache[1] = $event => $options.savexml())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"xml\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[2] || (_cache[2] = $event => $options.submity())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"OK\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.pathdialog,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.pathdialog = $event),\n    transition: \"dialog-bottom-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"path of saving\")]),\n        _: 1 /* STABLE */\n      }), _hoisted_4, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[4] || (_cache[4] = $event => $options.send())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"save\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.loaddialog,\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.loaddialog = $event),\n    transition: \"dialog-top-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_hoisted_5]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\" xml OR json \")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.lodjason === true ? '#2196F3' : 'initial',\n          color: $data.lodjason === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[6] || (_cache[6] = $event => $options.loadjason())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"json\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _hoisted_6, _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.lodxml === true ? '#2196F3' : 'initial',\n          color: $data.lodxml === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[7] || (_cache[7] = $event => $options.loadxml())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"xml\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[8] || (_cache[8] = $event => $options.ok())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"OK\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.pathloaddialog,\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $data.pathloaddialog = $event),\n    transition: \"dialog-bottom-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"path of file\")]),\n        _: 1 /* STABLE */\n      }), _hoisted_7, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[10] || (_cache[10] = $event => $options.open())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"open\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_8, [_createVNode(_component_v_stage, {\n    config: $data.configKonva,\n    ref: \"stage\",\n    onDblclick: $options.draw,\n    onClick: $options.handleClick,\n    onMousedown: $options.handleStageMouseDown,\n    onTouchstart: $options.handleStageMouseDown\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_layer, null, {\n      default: _withCtx(() => [_createCommentVNode(\" drawing squares \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.squares, (square, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'square',\n            x: square.x,\n            y: square.y,\n            width: square.width,\n            height: square.height,\n            fill: square.fill,\n            // Use the selected fill color\n            stroke: square.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: square.id\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('square', index),\n          onDragend: $event => $options.newpo('square', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing rectangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rectangles, (rect, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'Rectangle',\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill,\n            // Use the selected fill color\n            stroke: rect.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('rect', index),\n          onDragend: $event => $options.newpo('rect', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing circles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.circles, (circle, index) => {\n        return _openBlock(), _createBlock(_component_v_circle, {\n          key: index,\n          config: {\n            type: 'circle',\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            stroke: circle.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('circle', index),\n          onDragend: $event => $options.newpo('circle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing ellipses \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ellipses, (ellipse, index) => {\n        return _openBlock(), _createBlock(_component_v_ellipse, {\n          key: index,\n          config: {\n            type: 'ellipse',\n            x: ellipse.x,\n            y: ellipse.y,\n            radiusX: ellipse.radiusX,\n            radiusY: ellipse.radiusY,\n            fill: ellipse.fill,\n            // Use the selected fill color\n            stroke: ellipse.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('ellipse', index),\n          onDragend: $event => $options.newpo('ellipse', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing stars \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.stars, (star, index) => {\n        return _openBlock(), _createBlock(_component_v_star, {\n          key: index,\n          config: {\n            type: 'star',\n            x: star.x,\n            y: star.y,\n            innerRadius: star.innerRadius,\n            outerRadius: star.outerRadius,\n            numPoints: star.numPoints,\n            fill: star.fill,\n            // Use the selected fill color\n            stroke: star.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('star', index),\n          onDragend: $event => $options.newpo('star', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing lines \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lines, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            type: 'line',\n            x: line.x,\n            y: line.y,\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('line', index),\n          onDragend: $event => $options.newpo('line', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing triangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.triangles, (triangle, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'triangle',\n            x: triangle.x,\n            y: triangle.y,\n            sides: 3,\n            radius: triangle.radius,\n            fill: triangle.fill,\n            stroke: triangle.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('triangle', index),\n          onDragend: $event => $options.newpo('triangle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing brush \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.brus, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: false\n          }\n        }, null, 8 /* PROPS */, [\"config\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing regular-polygon\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.polygons, (polygon, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'polygon',\n            x: polygon.x,\n            y: polygon.y,\n            sides: 8,\n            radius: polygon.radius,\n            fill: polygon.fill,\n            stroke: polygon.stroke,\n            strokeWidth: 5,\n            draggable: true\n          },\n          onClick: $event => $options.shapeClicked('polygon', index),\n          onDragend: $event => $options.newpo('polygon', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" resizing and routation \"), _createVNode(_component_v_transformer, {\n        ref: \"transformer\"\n      }, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"config\", \"onDblclick\", \"onClick\", \"onMousedown\", \"onTouchstart\"])]), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_v_btn, {\n    title: \"Save\",\n    onClick: _cache[12] || (_cache[12] = $event => $options.laod()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_10]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Load\",\n    onClick: _cache[13] || (_cache[13] = $event => $options.save()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_11]),\n    _: 1 /* STABLE */\n  }), _hoisted_12, _createElementVNode(\"div\", _hoisted_13, [_createVNode(_component_color_picker, {\n    gradientColor: _ctx.gradientColor,\n    \"onUpdate:gradientColor\": _cache[14] || (_cache[14] = $event => _ctx.gradientColor = $event),\n    pureColor: $data.pureColor,\n    \"onUpdate:pureColor\": _cache[15] || (_cache[15] = $event => $data.pureColor = $event)\n  }, null, 8 /* PROPS */, [\"gradientColor\", \"pureColor\"])]), _createVNode(_component_v_btn, {\n    title: \"Fill\",\n    onClick: _cache[16] || (_cache[16] = $event => $options.fill()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_14]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Border\",\n    onClick: _cache[17] || (_cache[17] = $event => $options.edge()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_15]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Copy\",\n    onClick: _cache[18] || (_cache[18] = $event => $options.copy()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_16]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Undo\",\n    onClick: _cache[19] || (_cache[19] = $event => $options.undo()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_17]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Redo\",\n    onClick: _cache[20] || (_cache[20] = $event => $options.Redo()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_18]),\n    _: 1 /* STABLE */\n  }), _hoisted_19, _createVNode(_component_v_btn, {\n    title: \"Square\",\n    onClick: _cache[21] || (_cache[21] = $event => $options.square()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_20]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Rectangle\",\n    onClick: _cache[22] || (_cache[22] = $event => $options.rect()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_21]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Circle\",\n    onClick: _cache[23] || (_cache[23] = $event => $options.circle()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_22]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Triangle\",\n    onClick: _cache[24] || (_cache[24] = $event => $options.triangle()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_23]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Ellipse\",\n    onClick: _cache[25] || (_cache[25] = $event => $options.ellipse()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_24]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Star\",\n    onClick: _cache[26] || (_cache[26] = $event => $options.star()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_25]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Line\",\n    onClick: _cache[27] || (_cache[27] = $event => $options.line()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_26]),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" <v-btn title=\\\"Brush\\\" @click=\\\"brush()\\\" class=\\\"custom-btn\\\">  \\r\\n<svg width=\\\"24\\\" height=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\r\\n  <path d=\\\"M5 2L3 4s-2 2 0 3 4 1 4 1 1-2 3-1 3 1 3 1\\\"></path> \\r\\n</svg>\\r\\n</v-btn> \"), _createVNode(_component_v_btn, {\n    title: \"Hexagon\",\n    onClick: _cache[28] || (_cache[28] = $event => $options.polyg()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_27]),\n    _: 1 /* STABLE */\n  }), _hoisted_28, _createVNode(_component_v_btn, {\n    title: \"Delete\",\n    onClick: _cache[29] || (_cache[29] = $event => $options.del()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_29]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Clear\",\n    onClick: _cache[30] || (_cache[30] = $event => $options.clr()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_30]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","type","placeholder","id","autofocus","width","height","xmlns","fill","stroke","x","y","_createCommentVNode","cx","cy","r","points","rx","ry","viewBox","x1","y1","x2","y2","_createElementBlock","_hoisted_1","_createVNode","_component_v_dialog","$data","savdialog","$event","transition","_component_v_card","variant","_component_v_card_title","_hoisted_2","_component_v_card_subtitle","_component_v_btn","_normalizeStyle","backgroundColor","savjason","color","onClick","_cache","$options","savejason","_hoisted_3","savxml","savexml","_component_v_card_actions","submity","pathdialog","_hoisted_4","send","loaddialog","_hoisted_5","lodjason","loadjason","_hoisted_6","lodxml","loadxml","ok","pathloaddialog","_hoisted_7","open","_hoisted_8","_component_v_stage","config","configKonva","ref","onDblclick","draw","handleClick","onMousedown","handleStageMouseDown","onTouchstart","_component_v_layer","_Fragment","_renderList","squares","square","index","_createBlock","_component_v_rect","key","onTransformend","handleTransformEnd","shapeClicked","onDragend","newpo","rectangles","rect","circles","circle","_component_v_circle","radius","ellipses","ellipse","_component_v_ellipse","radiusX","radiusY","stars","star","_component_v_star","innerRadius","outerRadius","numPoints","lines","line","_component_v_line","triangles","triangle","_component_v_regular_polygon","brus","polygons","polygon","_component_v_transformer","_hoisted_9","title","laod","_hoisted_10","save","_hoisted_11","_hoisted_12","_hoisted_13","_component_color_picker","gradientColor","_ctx","pureColor","_hoisted_14","edge","_hoisted_15","copy","_hoisted_16","undo","_hoisted_17","Redo","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","polyg","_hoisted_27","_hoisted_28","del","_hoisted_29","clr","_hoisted_30"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n\r\n\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title><h1>save</h1></v-card-title>\r\n<v-card-subtitle> xml OR json  </v-card-subtitle>\r\n<v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</v-btn>\r\n<div style=\"height:5px;\"></div>\r\n<v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title>path of saving</v-card-title>\r\n<input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title><h1>Open</h1></v-card-title>\r\n<v-card-subtitle> xml OR json  </v-card-subtitle>\r\n<v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</v-btn>\r\n<div style=\"height:5px;\"></div>\r\n<v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title>path of file</v-card-title>\r\n<input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n\r\n<div class=\"bord\">\r\n<v-stage :config=\"configKonva\" ref=\"stage\" @dblclick=\"draw\" @click=\"handleClick\"  @mousedown=\"handleStageMouseDown\" @touchstart=\"handleStageMouseDown\">\r\n<v-layer>\r\n<!-- drawing squares -->\r\n<v-rect\r\n  v-for=\"(square, index) in squares\"\r\n  :key=\"index\"\r\n  :config=\"{\r\n    type:'square',\r\n    x: square.x,\r\n    y: square.y,\r\n    width: square.width,\r\n    height: square.height,\r\n    fill: square.fill, // Use the selected fill color\r\n    stroke: square.stroke, // Use the selected edge color\r\n    strokeWidth: 2 ,\r\n    draggable:true,\r\n    id:square.id\r\n  }\"\r\n  @transformend=\"handleTransformEnd\"\r\n  @click=\"shapeClicked('square', index)\"\r\n  @dragend=\"newpo('square', index, $event)\">\r\n</v-rect>\r\n\r\n<!-- drawing rectangles -->\r\n<v-rect\r\nv-for=\"(rect, index) in rectangles\"\r\n  :key=\"index\"\r\n  :config=\"{ \r\n    type:'Rectangle',\r\n    x:  rect.x,\r\n    y: rect.y,\r\n    width: rect.width,\r\n    height: rect.height,\r\n    fill: rect.fill, // Use the selected fill color\r\n    stroke: rect.stroke, // Use the selected edge color\r\n    strokeWidth: 2 ,\r\n    draggable:true,    \r\n  }\"\r\n  @transformend=\"handleTransformEnd\"\r\n  @click=\"shapeClicked('rect', index) \"\r\n  @dragend=\"newpo('rect', index, $event)\">\r\n</v-rect>\r\n\r\n<!-- drawing circles -->\r\n<v-circle\r\n  v-for=\"(circle, index) in circles\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'circle',\r\n      x: circle.x,\r\n      y: circle.y,\r\n      radius:circle.radius,\r\n      fill:circle.fill,\r\n      stroke:circle.stroke,\r\n      strokeWidth: 2,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('circle', index)\"\r\n    @dragend=\"newpo('circle', index, $event)\">\r\n</v-circle>\r\n\r\n<!-- drawing ellipses -->\r\n<v-ellipse\r\n    v-for=\"(ellipse, index) in ellipses\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'ellipse',\r\n      x: ellipse.x,\r\n      y: ellipse.y,\r\n      radiusX:ellipse.radiusX,\r\n      radiusY:ellipse.radiusY,\r\n      fill: ellipse.fill, // Use the selected fill color\r\n      stroke: ellipse.stroke, // Use the selected edge color\r\n      strokeWidth: 2,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('ellipse', index)\"\r\n    @dragend=\"newpo('ellipse', index, $event)\">\r\n</v-ellipse>\r\n\r\n<!-- drawing stars -->\r\n<v-star\r\n    v-for=\"(star, index) in stars\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'star',\r\n      x: star.x,\r\n      y: star.y,\r\n      innerRadius:star.innerRadius,\r\n      outerRadius:star.outerRadius,\r\n      numPoints:star.numPoints,\r\n      fill: star.fill, // Use the selected fill color\r\n      stroke: star.stroke, // Use the selected edge color\r\n      strokeWidth: 2,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('star', index)\"\r\n    @dragend=\"newpo('star', index, $event)\">\r\n</v-star>\r\n\r\n<!-- drawing lines -->\r\n<v-line\r\n  v-for=\"(line, index) in lines\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'line',\r\n      x : line.x,\r\n      y : line.y,\r\n      points:line.points,\r\n      stroke: line.stroke,\r\n      strokeWidth: 4,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('line', index)\"\r\n    @dragend=\"newpo('line', index, $event)\">\r\n</v-line>\r\n\r\n<!-- drawing triangles -->\r\n<v-regular-polygon\r\nv-for=\"(triangle, index) in triangles\"\r\n      :key=\"index\"\r\n      :config=\"{\r\n        type:'triangle',\r\n        x: triangle.x,\r\n        y: triangle.y,\r\n        sides:3,\r\n        radius:triangle.radius,\r\n        fill: triangle.fill, \r\n        stroke: triangle.stroke, \r\n        strokeWidth: 2,\r\n        draggable:true,\r\n      }\"\r\n      @transformend=\"handleTransformEnd\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\">\r\n\r\n</v-regular-polygon>\r\n\r\n<!-- drawing brush -->\r\n<v-line\r\n  v-for=\"(line, index) in brus\"\r\n  :key=\"index\"\r\n  :config=\"{\r\n    points:line.points,\r\n    stroke: line.stroke,\r\n    strokeWidth: 4,\r\n    draggable:false,\r\n  }\">\r\n</v-line>\r\n\r\n\r\n<!-- drawing regular-polygon-->\r\n<v-regular-polygon\r\nv-for=\"(polygon, index) in polygons\"\r\n      :key=\"index\"\r\n      :config=\"{\r\n        type:'polygon',\r\n        x: polygon.x,\r\n        y: polygon.y,\r\n        sides:8,\r\n        radius:polygon.radius,\r\n        fill: polygon.fill, \r\n        stroke: polygon.stroke, \r\n        strokeWidth: 5,\r\n        draggable:true,\r\n      }\"\r\n      @click=\"shapeClicked('polygon', index)\"\r\n      @dragend=\"newpo('polygon', index, $event)\">\r\n</v-regular-polygon>\r\n\r\n<!-- resizing and routation -->\r\n<v-transformer ref=\"transformer\" />\r\n</v-layer>\r\n</v-stage>\r\n</div>\r\n\r\n<div class=\"left-bar\">\r\n<v-btn title=\"Save\" @click=\"laod()\" class=\"custom-btn\"><i class=\"fa-solid fa-folder-open\"></i></v-btn>\r\n<v-btn title=\"Load\" @click=\"save()\" class=\"custom-btn\"><i class=\"fa-solid fa-floppy-disk\"></i></v-btn>\r\n<hr>\r\n<div class=\"palette\">\r\n<color-picker v-model:gradientColor=\"gradientColor\" v-model:pureColor=\"pureColor\" />\r\n</div>\r\n<v-btn title=\"Fill\" @click=\"fill()\" class=\"custom-btn\"><i class=\"fa-solid fa-fill-drip\"></i></v-btn>\r\n<v-btn title=\"Border\" @click=\"edge()\" class=\"custom-btn\"><i class=\"fa-solid fa-paintbrush\"></i></v-btn>\r\n<v-btn title=\"Copy\" @click=\"copy()\" class=\"custom-btn\"><i class=\"fa-solid fa-copy\"></i></v-btn>\r\n<v-btn title=\"Undo\" @click=\"undo()\" class=\"custom-btn\"><i class=\"fa-solid fa-arrow-rotate-left\"></i></v-btn>\r\n<v-btn title=\"Redo\" @click=\"Redo()\" class=\"custom-btn\"><i class=\"fa-solid fa-rotate-right\"></i></v-btn>\r\n<hr>\r\n<v-btn title=\"Square\" @click=\"square()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\"></rect> <!-- Square -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Rectangle\" @click=\"rect()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <rect width=\"18\" height=\"10\" x=\"3\" y=\"1\"></rect> <!-- Rectangle -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Circle\" @click=\"circle()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle> <!-- Circle -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Triangle\" @click=\"triangle()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <polygon points=\"12 2 2 22 22 22\"></polygon> <!-- Triangle -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Ellipse\" @click=\"ellipse()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <ellipse cx=\"12\" cy=\"12\" rx=\"10\" ry=\"6\"></ellipse> <!-- Ellipse -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Star\" @click=\"star()\" class=\"custom-btn\">\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <polygon points=\"12 2 15.09 8 22 9.27 17 14 18.18 20 12 17.09 5.82 20 7 14 2 9.27 8 8 12\"></polygon>\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Line\" @click=\"line()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line> <!-- Line -->\r\n</svg>\r\n</v-btn>\r\n<!-- <v-btn title=\"Brush\" @click=\"brush()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <path d=\"M5 2L3 4s-2 2 0 3 4 1 4 1 1-2 3-1 3 1 3 1\"></path> \r\n</svg>\r\n</v-btn> -->\r\n<v-btn title=\"Hexagon\" @click=\"polyg()\" class=\"custom-btn\">\r\n  <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <polygon points=\"12,2 22,7 22,17 12,22 2,17 2,7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n</svg>\r\n</v-btn>\r\n<hr>\r\n\r\n<v-btn title=\"Delete\" @click=\"del()\" class=\"custom-btn\"><i class=\"fa-solid fa-eraser\"></i></v-btn>\r\n<v-btn title=\"Clear\" @click=\"clr()\" class=\"custom-btn\"><i class=\"fa-solid fa-trash\"></i></v-btn>\r\n\r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// import Vue from 'vue';\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      stars:[],\r\n       polygons:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      str:false,\r\n      poly:false,\r\n      delete:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedshapeid: '',  //transform\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        poldialog:false,\r\n        length:200,\r\n        un:0,\r\n        re:0,\r\n        shapeid:-1,\r\n         brus:[]\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n   handleClick() {\r\n       this.cop=false;\r\n      this.cofill=false;\r\n      this.coledge=false; \r\n    },\r\n    /*drawbrush()\r\n    {\r\n       if(this.bru)\r\n       {\r\n        this.draw();\r\n         const stage = this.$refs.stage.getStage();\r\n            const position = stage.getPointerPosition();\r\n         this.currentShape.points.push(position.x, position.y);\r\n       }\r\n       this.stopDrawing();\r\n    },\r\n*/\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n   var v=0;\r\n\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n       for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'star') {\r\n      this.shapeType = \"Star\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        \r\n    this.stars[index].x=e.target.x();\r\n    this.stars[index].y=e.target.y();\r\n    this.shapes[v].x=this.stars[index].x;\r\n    this.shapes[v].y=this.stars[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.stars[index].x);\r\n    console.log(this.stars[index].y);\r\n    \r\n  }\r\n    if (type === 'line') {\r\n      this.shapeType = \"Line\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n\r\n    if (type === 'Polygon') {\r\n      this.shapeType = \"Polygon\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.polygons[index].x=e.target.x();\r\n    this.polygons[index].y=e.target.y();\r\n    this.shapes[v].x=this.polygons[index].x;\r\n    this.shapes[v].y=this.polygons[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.polygons[index].x);\r\n    console.log(this.polygons[index].y);\r\n    }\r\n    \r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n         this.str=false;\r\n      this.poly=false;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n         this.str=false;\r\n      this.poly=false;\r\n    }, \r\n    star()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.str=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.poly=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n   polyg()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.poly=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.str=false;\r\n      this.bru=false;\r\n    },\r\n\r\n\r\n\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.stars =[];\r\n      this.polygons=[];\r\n      this.un=0;\r\n      this.re=0;\r\n      this.shapeid=-1;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n\r\n\r\n    if(type==='Polygon')\r\n     {\r\n       this.shapeType = \"Polygon\"\r\n        let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n           if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.updateTransformer();\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.polygons.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n         \r\n           this.un++; \r\n              this.polygons.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n              this.selectedid=-1;\r\n               this.updateTransformer();\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.polygons[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.polygons[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.polygons[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.polygons[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n        \r\n     }\r\n\r\n     else if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n        let v=0;\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n            \r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++; \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n        if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n      else if(type==='star') {\r\n        let v=0;\r\n         this.shapeType = \"Star\"\r\n  for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.stars.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n      if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.stars.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n        if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.stars[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.stars[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.stars[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.stars[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify() \r\n       \r\n     }\r\n        }\r\n       \r\n     else if(type==='square')\r\n     {\r\n      console.log(\"xx\");\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          console.log(this.shapes[v]);\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n           \r\n        }\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.str=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.cop=false;\r\n    },\r\n      draw() {\r\n        this.selectedid=-1;\r\n        this.updateTransformer();\r\n     if(this.rectangle)\r\n      {\r\n          this.shapeid++;\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Rectangle',\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 250,\r\n            height: 400,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                  scaleX : 1,\r\n                 scaleY : 1\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ){\r\n          this.shapeid++;\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Circle',\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 200,\r\n               id:String(this.shapeid),\r\n                 rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Ellipse',\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 200,\r\n              radiusY:130,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.str)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Star',\r\n                 fill:this.pureColor,\r\n                 stroke:this.pureColor2,\r\n               strokeWidth:2,\r\n              innerRadius:130,\r\n              outerRadius:200,\r\n              numPoints:6,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin)\r\n      {\r\n          this.shapeid++;\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Line',\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0,200,150],\r\n                 id:String(this.shapeid),\r\n                   rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt)\r\n      {\r\n          this.shapeid++;\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n               type:'Square',\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 200,\r\n            height: 200,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n         this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Triangle',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                    rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.poly)\r\n      {\r\n             this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Polygon',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                     rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n\r\n              };\r\n              \r\n            }\r\n          }\r\n      }\r\n      \r\n   \r\n        else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             this.currentShape = {\r\n            points: [position.x, position.y],\r\n            stroke: this.pureColor2,\r\n            strokeWidth: 4,\r\n          };\r\n            }\r\n          }\r\n        \r\n      }\r\n       this.selectedid=-1;\r\n        this.updateTransformer();\r\n      \r\n        this.stopDrawing();\r\n    },\r\n    stopDrawing() {\r\n      console.log(this.currentShape);\r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n        \r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n      else if(this.str)\r\n      {\r\n        console.log(\"brt\");\r\n        this.shapeType = 'Star';\r\n\r\n           this.stars.push({...this.currentShape});\r\n           this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n        else if(this.bru)\r\n      {\r\n          this.brus.push({...this.currentShape});\r\n      }\r\n      else if(this.poly)\r\n      {\r\n          this.shapeType = 'Polygon';\r\n           this.polygons.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n        this.currentShape = null;\r\n      }\r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){\r\n      this.un = 0\r\n      this.re = 0 \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n   \r\n         for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n        \r\n         \r\n      }\r\n          if(this.shapes.length!==0)\r\n          {\r\n              this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n          }\r\n          else\r\n          { \r\n              this.shapeid=-1;  \r\n          }\r\n         \r\n      }\r\n      if(this.lodxml){\r\n        this.un = 0\r\n        this.re = 0\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n      \r\n        for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n        if(this.shapes.length!==0)\r\n          {\r\n              this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n          }\r\n          else\r\n          { \r\n              this.shapeid=-1;  \r\n          }\r\n    }\r\n\r\n     },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\nasync undo() {\r\n  if (this.un !== 0) {\r\n    await fetch('http://localhost:8080/undo', {\r\n      method: 'GET',\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => this.shapes = data);\r\n\r\n    console.log(this.shapes);\r\n\r\n    this.circles = [];\r\n    this.lines = [];\r\n    this.squares = [];\r\n    this.rectangles = [];\r\n    this.triangles = [];\r\n    this.ellipses = [];\r\n    this.stars = [];\r\n    this.polygons = [];\r\n\r\n    // Create an array of promises to wait for each push operation to complete\r\n    const pushPromises = this.shapes.map(shape => {\r\n  if (shape !== null) {\r\n    if (shape.type === 'Rectangle') {\r\n      this.rectangles.push({ ...shape });\r\n    } else if (shape.type === 'Circle') {\r\n      this.circles.push({ ...shape });\r\n    } else if (shape.type === 'Ellipse') {\r\n      this.ellipses.push({ ...shape });\r\n    } else if (shape.type === 'Star') {\r\n      this.stars.push({ ...shape });\r\n    } else if (shape.type === 'Square') {\r\n      this.squares.push({ ...shape });\r\n    } else if (shape.type === 'Triangle') {\r\n      this.triangles.push({ ...shape });\r\n    } else if (shape.type === 'Line') {\r\n      this.lines.push({ ...shape });\r\n    } else if (shape.type === 'Polygon') {\r\n      this.polygons.push({ ...shape });\r\n    }\r\n  }\r\n});\r\n\r\n\r\n    // Wait for all promises to resolve before proceeding\r\n    await Promise.all(pushPromises);\r\n\r\n    this.un--;\r\n    this.re++;\r\n  }\r\n},\r\n     async Redo()\r\n    {\r\n     this.updateTransformer()\r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    },\r\n     handleTransformEnd(e) {\r\n      let shape;\r\n      for(let i = 0; i < this.shapes.length; i++){\r\n        if(this.shapes[i] !== null && this.shapes[i].id === this.selectedid)\r\n          shape = this.shapes[i];\r\n      }\r\n\r\n\r\n      shape.x = e.target.x();\r\n      shape.y = e.target.y();\r\n      shape.rotation = e.target.rotation();\r\n      shape.scaleX = e.target.scaleX();\r\n      shape.scaleY = e.target.scaleY();\r\n\r\n      this.ord=shape.id;\r\n      this.shapeType=shape.type;\r\n      this.modifysh=shape;\r\n\r\n       this.un++;\r\n        if(shape.type === \"Square\"){\r\n            shape = this.squares.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Rectangle\"){\r\n            shape = this.rectangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Circle\"){\r\n            shape = this.circles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Triangle\"){\r\n            shape = this.triangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Polygon\"){\r\n            shape = this.polygons.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Line\"){\r\n            shape = this.lines.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Ellipse\"){\r\n            shape = this.ellipses.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n          else if(shape.type === \"Star\"){\r\n            shape = this.stars.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      console.log(shape);\r\n      this.modify();\r\n      \r\n\r\n\r\n    },\r\n    handleStageMouseDown(e) {\r\n      if (e.target === e.target.getStage()) {\r\n        this.selectedid = '';\r\n        this.updateTransformer();\r\n        return;\r\n        \r\n      }\r\n\r\n      const clickedOnTransformer =\r\n        e.target.getParent().className === 'Transformer';\r\n      if (clickedOnTransformer) {\r\n        return;\r\n      }\r\n\r\n     \r\n    \r\n      const x= e.target.id();\r\n\r\n      // console.log(x)\r\n      let shape;\r\n      for(let i = 0; i < this.shapes.length; i++){\r\n        if(this.shapes[i] !== null && this.shapes[i].id === x)\r\n          shape = this.shapes[i];\r\n      }\r\n\r\n      // const shape = this.shapes.find((r) => r.id === x);\r\n\r\n      if (shape) {\r\n        this.selectedid = x;\r\n      } else {\r\n        this.selectedid = '';\r\n      }\r\n      this.updateTransformer();\r\n    },\r\n    updateTransformer() {\r\n      const transformerNode = this.$refs.transformer.getNode();\r\n      const stage = transformerNode.getStage();\r\n      const { selectedid } = this;\r\n      console.log(selectedid);\r\n      const selectedNode = stage.findOne('#' + String(this.selectedid));\r\n      console.log(selectedNode);\r\n      if (selectedNode === transformerNode.node()) {\r\n        return;\r\n      }\r\n\r\n      if (selectedNode) {\r\n        transformerNode.nodes([selectedNode]);\r\n      } else {\r\n        transformerNode.nodes([]);\r\n      }\r\n    },\r\n\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n.custom-btn{\r\n  /* border-radius: 50%;  */\r\n  background-color: transparent;\r\n  box-shadow: none;\r\n  border: none;\r\n  color: white;\r\n}\r\n\r\n.palette{\r\n\r\n}\r\n\r\n.bord{\r\n  position: relative;\r\n  height: 100vh;\r\n}\r\n  \r\n.left-bar{\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1f2e2e;\r\n  margin-left: 20px;\r\n}\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}