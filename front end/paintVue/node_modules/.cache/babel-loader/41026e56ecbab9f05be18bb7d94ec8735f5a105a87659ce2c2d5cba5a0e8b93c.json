{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//import Konva from 'konva';\n\nimport { ref } from \"vue\";\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      value: null,\n      selectedColor: '',\n      selectedColor2: '',\n      selectedColor3: '',\n      selectedColor4: '',\n      selectedColor5: '',\n      configKonva: {\n        width: 1000,\n        height: 800\n      },\n      pureColor: '#ffffff',\n      // Selected fill color\n      pureColor2: '#000000',\n      // Selected edge color\n      isdraw: false,\n      rectangles: [],\n      squares: [],\n      lines: [],\n      circles: [],\n      ellipses: [],\n      triangles: [],\n      rectangle: false,\n      circ: false,\n      ellips: false,\n      lin: false,\n      sqrt: false,\n      tria: false,\n      bru: false,\n      delete: false,\n      mov: false,\n      cofill: false,\n      coledge: false,\n      currentShape: null,\n      shapes: [],\n      selectedShapeName: '',\n      resiz: false,\n      userInput: 0,\n      sav: false,\n      path: \"D:\\\\shape.xml\",\n      shapeType: '',\n      ord: null,\n      modifysh: null,\n      cop: false,\n      co: null\n    };\n  },\n  methods: {\n    setup() {\n      const pureColor = ref < ColorInputWithoutInstance > \"red\";\n      return {\n        pureColor\n      };\n    },\n    save() {\n      this.saving();\n    },\n    newpo(type, index, e) {\n      var v = 0;\n      if (type === 'circle') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.circles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.circles[index].x = e.target.x();\n        this.circles[index].y = e.target.y();\n        this.shapes[v] = this.circles[index];\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.shapes[v]);\n        console.log(this.circles[index].x);\n        console.log(this.circles[index].y);\n      }\n      if (type === 'rect') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.rectangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.rectangles[index].x = e.target.x();\n        this.rectangles[index].y = e.target.y();\n        this.shapes[v] = this.rectangles[index];\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.rectangles[index].x);\n        console.log(this.rectangles[index].y);\n      }\n      if (type === 'ellipse') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.ellipses[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.ellipses[index].x = e.target.x();\n        this.ellipses[index].y = e.target.y();\n        this.shapes[v] = this.ellipses[index];\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.ellipses[index].x);\n        console.log(this.ellipses[index].y);\n      }\n      if (type === 'line') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.lines[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.lines[index].x = e.target.x();\n        this.lines[index].y = e.target.y();\n        this.shapes[v] = this.lines[index];\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.lines[index].x);\n        console.log(this.lines[index].y);\n      }\n      if (type === 'square') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.squares[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.squares[index].x = e.target.x();\n        this.squares[index].y = e.target.y();\n        this.shapes[v] = this.squares[index];\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.squares[index].x);\n        console.log(this.squares[index].y);\n      }\n      if (type === 'triangle') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.triangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.triangles[index].x = e.target.x();\n        this.triangles[index].y = e.target.y();\n        this.shapes[v] = this.triangles[index];\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.triangles[index].x);\n        console.log(this.triangles[index].y);\n      }\n    },\n    rect() {\n      this.rectangle = true;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    brush() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = true;\n    },\n    ellipse() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = true;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    circle() {\n      this.rectangle = false;\n      this.circ = true;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    line() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = true;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    square() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = true;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    triangle() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = true;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    fill() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = true;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    edge() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = true;\n      this.bru = false;\n    },\n    clr() {\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      this.shapes = [];\n    },\n    resize() {\n      this.resiz = true;\n      this.userInput = document.getElementById('userInput').value;\n    },\n    copy() {\n      this.cop = true;\n    },\n    shapeClicked(type, index) {\n      if (type === 'triangle') {\n        //console.log(index);\n        //console.log(this.shapes.length);\n        this.triangles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.triangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        //console.log(v);\n\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          let z = this.prototype();\n          console.log(z);\n        }\n        if (this.resiz) {\n          this.triangles[index].draggable = false;\n          this.triangles[index].radius *= this.userInput;\n          this.triangles[index].draggable = true;\n          this.shapes[v] = this.triangles[index];\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.triangles.splice(index, 1);\n          // console.log(this.shapes);\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.triangles[index].fill = selectedFillColor;\n          this.shapes[v] = this.triangles[index]; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.triangles[index].stroke = selectedEdgeColor;\n          this.shapes[v] = this.triangles[index]; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n\n        /*********************************************************************** */\n      } else if (type === 'circle') {\n        this.circles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.circles[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          this.prototype();\n        }\n        if (this.resiz) {\n          this.circles[index].draggable = false;\n          this.circles[index].radius *= this.userInput;\n          this.circles[index].draggable = true;\n          this.shapes[v] = this.circles[index];\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.circles.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.circles[index].fill = selectedFillColor;\n          this.shapes[v] = this.circles[index]; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.circles[index].stroke = selectedEdgeColor;\n          this.shapes[v] = this.circles[index]; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      } else if (type === 'line') {\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.lines[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          this.prototype();\n        }\n        if (this.delete) {\n          this.lines.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v] = this.lines[index];\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /************************************************************ */else if (type === 'rect') {\n        this.rectangles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.rectangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          this.prototype();\n        }\n        this.rectangles[index].draggable = true;\n        if (this.resiz) {\n          this.rectangles[index].draggable = false;\n          this.rectangles[index].width *= this.userInput;\n          this.rectangles[index].height *= this.userInput;\n          this.rectangles[index].draggable = true;\n          this.shapes[v] = this.rectangles[index];\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.rectangles.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          //selectedFillColor=this.pureColor\n          this.shapes[v] = this.rectangles[index];\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v] = this.rectangles[index];\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /*************************************************************** */else if (type === 'ellipse') {\n        this.ellipses[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.ellipses[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          this.prototype();\n        }\n        if (this.resiz) {\n          this.ellipses[index].draggable = false;\n          this.ellipses[index].radiusX *= this.userInput;\n          this.ellipses[index].radiusY *= this.userInput;\n          this.ellipses[index].draggable = true;\n          this.shapes[v] = this.ellipses[index];\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.ellipses.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor;\n          this.ellipses[index].fill = selectedFillColor;\n          this.shapes[v] = this.ellipses[index];\n          this.cofill = false;\n          this.pureColor = '#ffffff';\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v] = this.ellipses[index];\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /**************************************************** */else if (type === 'square') {\n        this.squares[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.squares[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          this.prototype();\n        }\n        if (this.resiz) {\n          this.squares[index].draggable = false;\n          this.squares[index].width *= this.userInput;\n          this.squares[index].height *= this.userInput;\n          this.squares[index].draggable = true;\n          this.shapes[v] = this.squares[index];\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        // this.squares[index].fill = this.selectedColor;\n        if (this.delete) {\n          this.squares.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.shapes[v] = this.squares[index];\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v] = this.squares[index];\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n    },\n    del() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = true;\n      this.coledge = false;\n      this.bru = false;\n    },\n    move() {\n      this.mov = true;\n    },\n    startDrawing() {\n      if (this.rectangle === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              width: 0,\n              height: 0\n            };\n            console.log(this.currentShape.x);\n            console.log(this.currentShape.y);\n          }\n        }\n      } else if (this.circ === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radius: 0\n            };\n          }\n        }\n      } else if (this.ellips === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radiusX: 0,\n              radiusY: 0\n            };\n          }\n        }\n      } else if (this.lin === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              points: [position.x, position.y]\n            };\n          }\n        }\n      } else if (this.sqrt === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              width: 0,\n              height: 0\n            };\n          }\n        }\n      } else if (this.tria) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 0\n            };\n          }\n        }\n      }\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\n    },\n\n    stopDrawing() {\n      if (this.isdraw) {\n        this.isdraw = false;\n        console.log(\"xxxxx\");\n        if (this.circ) {\n          this.shapeType = 'Circle';\n          this.circles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.rectangle) {\n          this.shapeType = 'Rectangle';\n          this.rectangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.ellips) {\n          this.shapeType = 'Ellipse';\n          this.ellipses.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.lin || this.bru) {\n          this.shapeType = 'Line';\n          this.lines.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.sqrt) {\n          this.shapeType = 'Square';\n          this.squares.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.tria) {\n          this.shapeType = 'Triangle';\n          this.triangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        }\n        this.createShape();\n        this.currentShape = null;\n        this.circ = false;\n        this.ellips = false;\n        this.rectangle = false;\n        this.lin = false;\n        this.sqrt = false;\n        this.tria = false;\n        this.mov = false;\n        this.bru = false;\n      }\n    },\n    async createShape() {\n      await fetch('http://localhost:8080/create', {\n        method: 'POST',\n        body: this.shapeType + JSON.stringify(this.currentShape)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async modify() {\n      await fetch('http://localhost:8080/modify', {\n        method: 'POST',\n        body: this.ord + JSON.stringify(this.modifysh)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async prototype() {\n      const req = await fetch('http://localhost:8080/copy', {\n        method: 'POST',\n        body: this.ord\n      });\n      return res;\n    },\n    draw() {\n      if (this.rectangle) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.y - this.currentShape.y;\n            }\n          }\n        }\n      }\n      //--------------------------------------------------------------------------------\n      else if (this.circ) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n      //************************************************************************************************** */\n      else if (this.ellips) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\n              this.currentShape.radiusY = Math.abs(position.y - this.currentShape.y);\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.lin) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.points[2] = position.x;\n              this.currentShape.points[3] = position.y;\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.sqrt) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.x - this.currentShape.x;\n            }\n          }\n        }\n      }\n      //************************************ **/\n      else if (this.tria) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n    },\n    async saving() {\n      await fetch('http://localhost:8080/save', {\n        method: 'POST',\n        body: this.path\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","ColorInputWithoutInstance","name","data","value","selectedColor","selectedColor2","selectedColor3","selectedColor4","selectedColor5","configKonva","width","height","pureColor","pureColor2","isdraw","rectangles","squares","lines","circles","ellipses","triangles","rectangle","circ","ellips","lin","sqrt","tria","bru","delete","mov","cofill","coledge","currentShape","shapes","selectedShapeName","resiz","userInput","sav","path","shapeType","ord","modifysh","cop","co","methods","setup","save","saving","newpo","type","index","e","v","i","length","x","target","y","modify","console","log","rect","brush","ellipse","circle","line","square","triangle","fill","edge","clr","resize","document","getElementById","copy","shapeClicked","draggable","z","prototype","radius","splice","selectedFillColor","selectedEdgeColor","stroke","radiusX","radiusY","del","move","startDrawing","stage","$refs","getStage","position","getPointerPosition","strokeWidth","points","stopDrawing","push","createShape","fetch","method","body","JSON","stringify","catch","error","req","res","draw","Math","pow","abs"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"appaint\" style=\"border:solid black 2px; width:1130px; background-color:#404340 ;\">\r\n    <div class=\"header\">\r\n  <div class=\"operations\" >\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"open()\">open <i class=\"fa-solid fa-folder-open\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"undo()\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"Redo()\">Redo <i class=\"fa-solid fa-rotate-right\"></i></button>\r\n    <button  style=\"background-color:rgb(111, 125, 131)\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"copy()\">copy <i class=\"fa-solid fa-copy\"></i></button>\r\n    <button for=\"userInput\"  style=\"background-color:rgb(111, 125, 131)\" @click=\"resize() \">resize</button>\r\n    <input type=\"text\" id=\"userInput\" style=\"border:solid black ;\">\r\n    \r\n\r\n  </div>\r\n  <div class=\"clorfil\" >\r\n    <div class=\"block\">\r\n      <div class=\"fillcolor\">\r\n        <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n    </div>\r\n      <button @click=\"fill()\" style=\"background-color:rgb(111, 125, 131)\">fill<i class=\"fa-solid fa-fill-drip\"></i></button>\r\n      <button @click=\"edge()\" style=\"background-color:rgb(111, 125, 131)\">border<i class=\"fa-solid fa-paintbrush\"></i></button>\r\n    \r\n  </div>\r\n  </div>\r\n</div>\r\n \r\n  <div class=\"paint\">\r\n   \r\n    <div class=\"bordshaps\" >\r\n     \r\n    <div class=\"shaps\">\r\n      <div class=\"block\">\r\n     <button @click=\"square()\" ><div class=\"square\"></div></button>\r\n     <label >square</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <button @click=\"rect()\" ><div class=\"rectengle\"></div></button>\r\n     <label >rectengle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n        <button @click=\"circle()\" ><div class=\"circle\"></div></button>\r\n     <label >circle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <button @click=\"triangle()\" ><div class=\"triangle-up\"></div></button>\r\n     <label >triangle</label>\r\n    </div>\r\n    <div class=\"block\">\r\n      <button @click=\"ellipse()\"><div class=\"oval\"></div></button>\r\n      <label >ellips</label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <button @click=\"line()\" style=\"width:30px;\"><i class=\"fa-solid fa-lines-leaning\"></i></button>\r\n      <label >line</label>\r\n     </div>\r\n    </div>\r\n  </div>\r\n    <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n  <v-stage :config=\"configKonva\" ref=\"stage\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" \r\n     >\r\n    <v-layer>\r\n      <!-- drawing rectangles -->\r\n      <v-rect\r\n       v-for=\"(rect, index) in rectangles\"\r\n        :key=\"index\"\r\n        :config=\"{ \r\n          type:'Rectangle',\r\n          x:  rect.x,\r\n          y: rect.y,\r\n          width: rect.width,\r\n          height: rect.height,\r\n          fill: rect.fill, // Use the selected fill color\r\n          stroke: rect.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n           \r\n       }\"\r\n         \r\n        @click=\"shapeClicked('rect', index) \"\r\n       @dragend=\"newpo('rect', index, $event)\"   \r\n      \r\n        \r\n      ></v-rect>\r\n     <!-- drawing circles -->\r\n     <v-circle\r\n      v-for=\"(circle, index) in circles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'circle',\r\n          x: circle.x,\r\n          y: circle.y,\r\n          radius:circle.radius,\r\n          fill:circle.fill,\r\n          stroke:circle.stroke,\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n         @click=\"shapeClicked('circle', index)\"\r\n         @dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n     </v-circle>\r\n     <!-- drawing ellipses -->\r\n     <v-ellipse\r\n        v-for=\"(ellipse, index) in ellipses\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'ellipse',\r\n          x: ellipse.x,\r\n          y: ellipse.y,\r\n          radiusX:ellipse.radiusX,\r\n          radiusY:ellipse.radiusY,\r\n          fill: ellipse.fill, // Use the selected fill color\r\n          stroke: ellipse.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n       @click=\"shapeClicked('ellipse', index)\"\r\n       @dragend=\"newpo('ellipse', index, $event)\"   \r\n     >\r\n\r\n     </v-ellipse>\r\n     <!-- drawing line segment -->\r\n     <v-line\r\n       v-for=\"(line, index) in lines\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'line',\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n         @click=\"shapeClicked('line', index)\"\r\n         @dragend=\"newpo('line', index, $event)\"   \r\n     >\r\n\r\n     </v-line>\r\n  <!-- square -->\r\n  <v-rect\r\n   v-for=\"(square, index) in squares\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'square',\r\n           x: square.x,\r\n          y: square.y,\r\n          width: square.width,\r\n          height: square.height,\r\n          fill: square.fill, // Use the selected fill color\r\n          stroke: square.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n        }\"\r\n      @click=\"shapeClicked('square', index)\"\r\n      @dragend=\"newpo('square', index, $event)\"   \r\n  >\r\n\r\n  </v-rect>\r\n  <v-regular-polygon\r\n   v-for=\"(triangle, index) in triangles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'triangle',\r\n          x: triangle.x,\r\n          y: triangle.y,\r\n          sides:3,\r\n          radius:triangle.radius,\r\n          fill: triangle.fill, \r\n          stroke: triangle.stroke, \r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\"   \r\n  >\r\n\r\n  </v-regular-polygon>\r\n    \r\n\r\n    </v-layer>\r\n  </v-stage>\r\n</div>\r\n  \r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n//import Konva from 'konva';\r\n\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n        width: 1000,\r\n        height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      delete:false,\r\n      mov:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedShapeName: '',\r\n      resiz:false,\r\n      userInput:0,\r\n      sav:false,\r\n      path:\"D:\\\\shape.xml\" ,\r\n      shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null\r\n    };\r\n  },\r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n    save()\r\n    {\r\n        this.saving();\r\n    },\r\n    \r\nnewpo(type, index,e) {\r\n   var v=0;\r\n  if (type === 'circle') {\r\n   \r\n    for(let i=0;i<this.shapes.length;i++){\r\n      if(this.shapes[i]===this.circles[index])\r\n      {\r\n           v=i;\r\n           break;\r\n      }\r\n    }\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v]=this.circles[index];\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      \r\n    for(let i=0;i<this.shapes.length;i++){\r\n      if(this.shapes[i]===this.rectangles[index])\r\n      {\r\n           v=i;\r\n           break;\r\n      }\r\n    }\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v]=this.rectangles[index];\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n    \r\n    for(let i=0;i<this.shapes.length;i++){\r\n      if(this.shapes[i]===this.ellipses[index])\r\n      {\r\n           v=i;\r\n           break;\r\n      }\r\n    }\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v]=this.ellipses[index];\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'line') {\r\n  \r\n    for(let i=0;i<this.shapes.length;i++){\r\n      if(this.shapes[i]===this.lines[index])\r\n      {\r\n           v=i;\r\n           break;\r\n      }\r\n    }\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v]=this.lines[index];\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n    \r\n    for(let i=0;i<this.shapes.length;i++){\r\n      if(this.shapes[i]===this.squares[index])\r\n      {\r\n           v=i;\r\n           break;\r\n      }\r\n    }\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v]=this.squares[index];\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n    \r\n    for(let i=0;i<this.shapes.length;i++){\r\n      if(this.shapes[i]===this.triangles[index])\r\n      {\r\n           v=i;\r\n           break;\r\n      }\r\n    }\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v]=this.triangles[index];\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n\r\n    },\r\n    clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n    \r\n    },\r\n    resize(){\r\n      this.resiz=true;\r\n      this.userInput = document.getElementById('userInput').value;\r\n\r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n     shapeClicked(type, index) {\r\n      if(type==='triangle')\r\n     {\r\n         //console.log(index);\r\n         //console.log(this.shapes.length);\r\n           this.triangles[index].draggable=true;\r\n        let v=0;\r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]===this.triangles[index])\r\n          {\r\n            v=i;\r\n            break;\r\n          }\r\n        }\r\n        //console.log(v);\r\n\r\n        if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          let z =  this.prototype();\r\n          console.log(z);\r\n        }\r\n      if(this.resiz)\r\n      {\r\n       \r\n        this.triangles[index].draggable=false;\r\n        this.triangles[index].radius *=  this.userInput;\r\n        this.triangles[index].draggable=true;\r\n        this.shapes[v]=this.triangles[index];\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()\r\n\r\n      }\r\n        if(this.delete)\r\n        {\r\n          \r\n              this.triangles.splice(index,1);\r\n             // console.log(this.shapes);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify()\r\n              this.delete=false;\r\n        }\r\n\r\n       if (this.cofill) {\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v]=this.triangles[index];       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v]=this.triangles[index]; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n      this.circles[index].draggable=true;\r\n       let v=0;\r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]===this.circles[index])\r\n          {\r\n            v=i;\r\n            break;\r\n          }\r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          this.prototype();\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.circles[index].draggable=false;\r\n        this.circles[index].radius *= this.userInput;\r\n        this.circles[index].draggable=true;\r\n        this.shapes[v]=this.circles[index];\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n           this.modify()\r\n      }\r\n          if(this.delete)\r\n        {\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n        if (this.cofill) {\r\n\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v]=this.circles[index];   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v]=this.circles[index]; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n\r\n       let v=0;\r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]===this.lines[index])\r\n          {\r\n            v=i;\r\n            break;\r\n          }\r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          this.prototype();\r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n         \r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify()\r\n        }\r\n        if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v]=this.lines[index];\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      this.rectangles[index].draggable=true;\r\n       let v=0;\r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]===this.rectangles[index])\r\n          {\r\n            v=i;\r\n            break;\r\n          }\r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          this.prototype();\r\n           \r\n        }\r\n      this.rectangles[index].draggable=true;\r\n      if(this.resiz)\r\n      {\r\n        this.rectangles[index].draggable=false;\r\n        this.rectangles[index].width *= this.userInput;\r\n        this.rectangles[index].height *= this.userInput;\r\n        this.rectangles[index].draggable=true;\r\n        this.shapes[v]=this.rectangles[index];\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n          this.modify()\r\n      }\r\n             if(this.delete)\r\n        {\r\n         \r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                  this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n              this.modify()\r\n        }\r\n        if (this.cofill) {\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v]=this.rectangles[index];\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v]=this.rectangles[index];\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        this.ellipses[index].draggable=true;\r\n       let v=0;\r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]===this.ellipses[index])\r\n          {\r\n            v=i;\r\n            break;\r\n          }\r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          this.prototype();\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.ellipses[index].draggable=false;\r\n        this.ellipses[index].radiusX *=  this.userInput;\r\n        this.ellipses[index].radiusY *=  this.userInput;\r\n        this.ellipses[index].draggable=true;\r\n        this.shapes[v]=this.ellipses[index];\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify()\r\n\r\n      }\r\n                if(this.delete)\r\n        {\r\n         \r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify()\r\n\r\n        }\r\n          if (this.cofill) {\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v]=this.ellipses[index];\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v]=this.ellipses[index];\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n        /**************************************************** */\r\n     else if(type==='square')\r\n     {\r\n      this.squares[index].draggable=true;\r\n        let v=0;\r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]===this.squares[index])\r\n          {\r\n            v=i;\r\n            break;\r\n          }\r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          this.prototype();\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.squares[index].draggable=false;\r\n        this.squares[index].width *=  this.userInput;\r\n        this.squares[index].height *=  this.userInput;\r\n       \r\n        this.squares[index].draggable=true;\r\n         this.shapes[v]=this.squares[index];\r\n           this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n            this.modify()\r\n      }\r\n     // this.squares[index].fill = this.selectedColor;\r\n               if(this.delete)\r\n        {\r\n         \r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                this.modify()\r\n        }\r\n      if (this.cofill) {\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v]=this.squares[index];\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v]=this.squares[index];\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n              this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    move()\r\n    {\r\n      this.mov=true;\r\n    },\r\n    \r\n    \r\n      startDrawing() {\r\n     if(this.rectangle===true)\r\n      {\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 0,\r\n            height: 0,\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ===true){\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 0,\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips===true)\r\n      {\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 0,\r\n              radiusY:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin===true)\r\n      {\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt===true)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 0,\r\n            height: 0,\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n                radius:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\r\n  \r\n     \r\n      \r\n    \r\n    },\r\n    stopDrawing() {\r\n     \r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin||this.bru)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n\r\n\r\n\r\n        this.currentShape = null;\r\n        this.circ=false;\r\n        this.ellips=false;\r\n        this.rectangle=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.mov = false;\r\n        this.bru=false;\r\n      }\r\n     \r\n      \r\n      \r\n    \r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      const req =  await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      return res;\r\n    },\r\n\r\n    draw() {\r\n      if(this.rectangle)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.y - this.currentShape.y;\r\n          }\r\n        }\r\n      }\r\n      }\r\n    //--------------------------------------------------------------------------------\r\n      else if(this.circ)\r\n      {\r\n          if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radius = Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************************************************************************** */\r\n      else if(this.ellips)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\r\n            this.currentShape.radiusY=Math.abs(position.y - this.currentShape.y);\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.lin)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n             this.currentShape.points[2] = position.x;\r\n          this.currentShape.points[3] = position.y;\r\n           \r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.sqrt)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.x - this.currentShape.x;\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************ **/\r\n      else if(this.tria)\r\n      {\r\n             if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n           \r\n            this.currentShape.radius=Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      \r\n    },\r\n\r\n    async saving()\r\n    {\r\n      await fetch('http://localhost:8080/save', {\r\n        method: 'POST',\r\n        body: this.path,\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style>\r\n.paint{\r\n  display: flex;\r\n  justify-content: center;\r\n  justify-items: center;\r\n  \r\n}\r\n.header{\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap:0px;\r\n\r\n}\r\n.operations{\r\n  width:600px;\r\n  border: #555 solid  ;\r\n  border-color: #555;\r\n  background-color: rgb(111, 125, 131);\r\n  border-radius:20px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-content: center;\r\n  margin:10px;\r\n  margin:  2px auto;\r\n  justify-content: center;\r\n  justify-items: center;\r\n\r\n}\r\n.clorfil{\r\n  margin-right: 30px;\r\n  width:180px;\r\n  border: rgb(7, 5, 5) solid  ;\r\n  border-color: #555;\r\n  background-color: rgb(111, 125, 131);\r\n  border-radius:20px;\r\n  \r\n}\r\n.bordshaps{\r\n  height: 180px;\r\n  margin: 3px;\r\n  padding-left: 1px;\r\n  padding-right: 1px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: #555 solid  ;\r\n  border-color: #555;\r\n  background-color: rgb(111, 125, 131);\r\n  border-radius:20px;\r\n  margin:   auto 2px;\r\n  justify-items: center;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  \r\n}\r\n\r\n.shaps{\r\n  margin-right: 3px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  \r\n} \r\nlabel{\r\n  opacity: 0.2;\r\n  color: aliceblue;\r\n  \r\n}\r\n.block{\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 5px;\r\n}\r\nbutton:hover {\r\n  cursor: pointer;\r\n}\r\nlabel:hover{\r\n  opacity: 100;\r\n  color: aliceblue;\r\n\r\n}\r\n.square {\r\n  height: 10px;\r\n  width: 10px;\r\n  border: black solid;\r\n}\r\n.rectengle {\r\n  height: 5px;\r\n  width: 10px;\r\n  border: black solid;\r\n}\r\n.circle {\r\n  height: 10px;\r\n  width: 10px;\r\n  border: black solid;\r\n  border-radius: 50%;\r\n}\r\n.circle1{\r\n  height: 50px;\r\n  width: 50px;\r\n  border: black solid;\r\n  border-radius: 50%;\r\n}\r\n.oval {\r\n  height: 5px;\r\n  width: 10px;\r\n  border: black solid;\r\n  \r\n  border-radius: 50%;\r\n}\r\n.triangle-up {\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 8px solid transparent;\r\n    border-right: 8px solid transparent;\r\n    border-bottom: 14px solid #555;\r\n}\r\n.line{\r\n    border-left: 1px solid transparent;\r\n    border-bottom:18px solid #555;\r\n}\r\n.color{\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n\r\n}\r\n.fillcolor{\r\n  height: 24px;\r\n  width: 23px;\r\n  border: black solid;\r\n  border-radius: 49%;\r\n  overflow: hidden;\r\n\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}