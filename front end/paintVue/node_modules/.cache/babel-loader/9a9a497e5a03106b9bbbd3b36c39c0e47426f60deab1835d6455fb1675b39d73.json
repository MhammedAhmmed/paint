{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from \"vue\";\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      value: null,\n      selectedColor: '',\n      selectedColor2: '',\n      selectedColor3: '',\n      selectedColor4: '',\n      selectedColor5: '',\n      configKonva: {\n        width: 1350,\n        height: 800\n      },\n      pureColor: '#ffffff',\n      // Selected fill color\n      pureColor2: '#000000',\n      // Selected edge color\n      isdraw: false,\n      rectangles: [],\n      squares: [],\n      lines: [],\n      circles: [],\n      ellipses: [],\n      triangles: [],\n      stars: [],\n      polygons: [],\n      rectangle: false,\n      circ: false,\n      ellips: false,\n      lin: false,\n      sqrt: false,\n      tria: false,\n      bru: false,\n      str: false,\n      poly: false,\n      delete: false,\n      cofill: false,\n      coledge: false,\n      currentShape: null,\n      shapes: [],\n      selectedshapeid: '',\n      //transform\n      sav: false,\n      path: \"\",\n      shapeType: '',\n      ord: null,\n      modifysh: null,\n      cop: false,\n      co: null,\n      savdialog: false,\n      savjason: false,\n      savxml: false,\n      pathdialog: false,\n      loaddialog: false,\n      pathloaddialog: false,\n      lodjason: false,\n      lodxml: false,\n      poldialog: false,\n      length: 200,\n      un: 0,\n      re: 0,\n      shapeid: -1,\n      brus: []\n    };\n  },\n  methods: {\n    setup() {\n      const pureColor = ref < ColorInputWithoutInstance > \"red\";\n      return {\n        pureColor\n      };\n    },\n    handleClick() {\n      this.cop = false;\n      this.cofill = false;\n      this.coledge = false;\n    },\n    /*drawbrush()\r\n    {\r\n       if(this.bru)\r\n       {\r\n        this.draw();\r\n         const stage = this.$refs.stage.getStage();\r\n            const position = stage.getPointerPosition();\r\n         this.currentShape.points.push(position.x, position.y);\r\n       }\r\n       this.stopDrawing();\r\n    },\r\n    */\n    newpo(type, index, e) {\n      this.un++;\n      var v = 0;\n      this.shapeid = -1;\n      this.updateTransformer();\n      if (type === 'circle') {\n        this.shapeType = \"Circle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.circles[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.circles[index].x = e.target.x();\n        this.circles[index].y = e.target.y();\n        this.shapes[v].x = this.circles[index].x;\n        this.shapes[v].y = this.circles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.shapes[v]);\n        console.log(this.circles[index].x);\n        console.log(this.circles[index].y);\n        this.shapeid = -1;\n        this.updateTransformer();\n      }\n      if (type === 'rect') {\n        this.shapeType = \"Rectangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.rectangles[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.rectangles[index].x = e.target.x();\n        this.rectangles[index].y = e.target.y();\n        this.shapes[v].x = this.rectangles[index].x;\n        this.shapes[v].y = this.rectangles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(this.rectangles[index].x);\n        console.log(this.rectangles[index].y);\n      }\n      if (type === 'ellipse') {\n        this.shapeType = \"Ellipse\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.ellipses[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.ellipses[index].x = e.target.x();\n        this.ellipses[index].y = e.target.y();\n        this.shapes[v].x = this.ellipses[index].x;\n        this.shapes[v].y = this.ellipses[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(this.ellipses[index].x);\n        console.log(this.ellipses[index].y);\n      }\n      if (type === 'star') {\n        this.shapeType = \"Star\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.stars[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        this.shapeid = -1;\n        this.updateTransformer();\n        this.stars[index].x = e.target.x();\n        this.stars[index].y = e.target.y();\n        this.shapes[v].x = this.stars[index].x;\n        this.shapes[v].y = this.stars[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.stars[index].x);\n        console.log(this.stars[index].y);\n        this.shapeid = -1;\n        this.updateTransformer();\n      }\n      if (type === 'line') {\n        this.shapeid = -1;\n        this.updateTransformer();\n        this.shapeType = \"Line\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.lines[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.lines[index].x = e.target.x();\n        this.lines[index].y = e.target.y();\n        this.shapes[v].x = this.lines[index].x;\n        this.shapes[v].y = this.lines[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.lines[index].x);\n        console.log(this.lines[index].y);\n        this.shapeid = -1;\n        this.updateTransformer();\n      }\n      if (type === 'square') {\n        this.shapeType = \"Square\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.squares[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.squares[index].x = e.target.x();\n        this.squares[index].y = e.target.y();\n        this.shapes[v].x = this.squares[index].x;\n        this.shapes[v].y = this.squares[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.squares[index].x);\n        console.log(this.squares[index].y);\n        this.shapeid = -1;\n        this.updateTransformer();\n      }\n      if (type === 'triangle') {\n        this.shapeType = \"Triangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.triangles[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.triangles[index].x = e.target.x();\n        this.triangles[index].y = e.target.y();\n        this.shapes[v].x = this.triangles[index].x;\n        this.shapes[v].y = this.triangles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.triangles[index].x);\n        console.log(this.triangles[index].y);\n        this.shapeid = -1;\n        this.updateTransformer();\n      }\n      if (type === 'Polygon') {\n        this.shapeType = \"Polygon\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.polygons[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        this.shapeid = -1;\n        this.updateTransformer();\n        console.log(v);\n        this.polygons[index].x = e.target.x();\n        this.polygons[index].y = e.target.y();\n        this.shapes[v].x = this.polygons[index].x;\n        this.shapes[v].y = this.polygons[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.polygons[index].x);\n        console.log(this.polygons[index].y);\n        this.shapeid = -1;\n        this.updateTransformer();\n      }\n    },\n    rect() {\n      this.rectangle = true;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    brush() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = true;\n      this.str = false;\n      this.poly = false;\n    },\n    ellipse() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = true;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    star() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.str = true;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.poly = false;\n    },\n    circle() {\n      this.rectangle = false;\n      this.circ = true;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    line() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = true;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    square() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = true;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    triangle() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = true;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    fill() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = true;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    edge() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = true;\n      this.bru = false;\n      this.str = false;\n      this.poly = false;\n    },\n    polyg() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.poly = true;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.str = false;\n      this.bru = false;\n    },\n    async clr() {\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      this.shapes = [];\n      this.stars = [];\n      this.polygons = [];\n      this.un = 0;\n      this.re = 0;\n      this.shapeid = -1;\n      await fetch('http://localhost:8080/clear', {\n        method: 'GET'\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    copy() {\n      this.cop = true;\n    },\n    async shapeClicked(type, index) {\n      if (type === 'Polygon') {\n        this.shapeType = \"Polygon\";\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.polygons[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.updateTransformer();\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.polygons.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.polygons.splice(index, 1);\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n          this.delete = false;\n          this.selectedid = -1;\n          this.updateTransformer();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.polygons[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.polygons[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.polygons[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.polygons[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      if (type === 'triangle') {\n        this.shapeType = \"Triangle\";\n        console.log(index);\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.triangles[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.triangles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.triangles.splice(index, 1);\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n          this.delete = false;\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.triangles[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.triangles[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.triangles[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n\n        /*********************************************************************** */\n      } else if (type === 'circle') {\n        this.shapeType = \"Circle\";\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          // console.log(this.shapes[i].id)\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.circles[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.circles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.circles.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.circles[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.circles[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.circles[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      } else if (type === 'line') {\n        let v = 0;\n        this.shapeType = \"Line\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.lines[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.lines.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.lines.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v].stroke = this.lines[index].stroke;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /************************************************************ */else if (type === 'rect') {\n        let v = 0;\n        this.shapeType = \"Rectangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          // console.log(this.shapes[i].id)\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.rectangles[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.rectangles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.rectangles.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          //selectedFillColor=this.pureColor\n          this.shapes[v].fill = this.rectangles[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.rectangles[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /*************************************************************** */else if (type === 'ellipse') {\n        let v = 0;\n        this.shapeType = \"Ellipse\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          // console.log(this.shapes[i].id)\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.ellipses[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.ellipses.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.ellipses.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor;\n          this.ellipses[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.ellipses[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff';\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.ellipses[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      } else if (type === 'star') {\n        let v = 0;\n        this.shapeType = \"Star\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          // console.log(this.shapes[i].id)\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.stars[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.stars.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.stars.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor;\n          this.stars[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.stars[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff';\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.stars[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.stars[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      } else if (type === 'square') {\n        console.log(\"xx\");\n        let v = 0;\n        this.shapeType = \"Square\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          // console.log(this.shapes[i].id)\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].id === this.squares[index].id) {\n              v = i;\n              break;\n            }\n          }\n        }\n        console.log(v);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.squares.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n          this.shapeid++;\n        }\n        if (this.delete) {\n          this.un++;\n          this.squares.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.shapes[v].fill = this.squares[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v].stroke = this.squares[index].stroke;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n    },\n    del() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.str = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = true;\n      this.coledge = false;\n      this.bru = false;\n      this.cop = false;\n    },\n    draw() {\n      if (this.rectangle) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Rectangle',\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              width: 250,\n              height: 400,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n            console.log(this.currentShape.x);\n            console.log(this.currentShape.y);\n          }\n        }\n      } else if (this.circ) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Circle',\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radius: 200,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.ellips) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Ellipse',\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radiusX: 200,\n              radiusY: 130,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.str) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Star',\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              innerRadius: 130,\n              outerRadius: 200,\n              numPoints: 6,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.lin) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Line',\n              stroke: this.pureColor2,\n              strokeWidth: 4,\n              points: [0, 0, 200, 150],\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.sqrt) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Square',\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              width: 200,\n              height: 200,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.tria) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Triangle',\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 150,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.poly) {\n        this.shapeid++;\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              type: 'Polygon',\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 150,\n              id: String(this.shapeid),\n              rotation: 0,\n              scaleX: 1,\n              scaleY: 1\n            };\n          }\n        }\n      } else if (this.bru) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              points: [position.x, position.y],\n              stroke: this.pureColor2,\n              strokeWidth: 4\n            };\n          }\n        }\n      }\n      this.stopDrawing();\n    },\n    stopDrawing() {\n      console.log(this.currentShape);\n      this.un++;\n      if (this.isdraw) {\n        this.isdraw = false;\n        console.log(\"xxxxx\");\n        if (this.circ) {\n          this.shapeType = 'Circle';\n          this.circles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.rectangle) {\n          this.shapeType = 'Rectangle';\n          this.rectangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.ellips) {\n          this.shapeType = 'Ellipse';\n          this.ellipses.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.str) {\n          console.log(\"brt\");\n          this.shapeType = 'Star';\n          this.stars.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.lin) {\n          this.shapeType = 'Line';\n          this.lines.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.sqrt) {\n          this.shapeType = 'Square';\n          this.squares.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.tria) {\n          this.shapeType = 'Triangle';\n          this.triangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.bru) {\n          this.brus.push({\n            ...this.currentShape\n          });\n        } else if (this.poly) {\n          this.shapeType = 'Polygon';\n          this.polygons.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        }\n        this.createShape();\n        this.currentShape = null;\n      }\n    },\n    async createShape() {\n      await fetch('http://localhost:8080/create', {\n        method: 'POST',\n        body: this.shapeType + JSON.stringify(this.currentShape)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async modify() {\n      await fetch('http://localhost:8080/modify', {\n        method: 'POST',\n        body: this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async prototype() {\n      await fetch('http://localhost:8080/copy', {\n        method: 'POST',\n        body: this.ord\n      }).then(res => res.json()).then(data => this.co = data);\n      console.log(this.co);\n    },\n    async modify2() {\n      await fetch('http://localhost:8080/delete', {\n        method: 'POST',\n        body: this.ord + \",\" + this.shapeType\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async saving() {\n      console.log(this.savejason);\n      if (this.savjason) {\n        await fetch('http://localhost:8080/saveJson', {\n          method: 'POST',\n          body: this.path + \".json\"\n        }).catch(error => {\n          console.error('Fetch error:', error);\n        });\n      }\n      if (this.savxml) {\n        await fetch('http://localhost:8080/saveXml', {\n          method: 'POST',\n          body: this.path + \".xml\"\n        }).catch(error => {\n          console.error('Fetch error:', error);\n        });\n        console.log(this.savexml);\n      }\n    },\n    async loading() {\n      this.un = 0;\n      this.re = 0;\n      if (this.lodjason) {\n        await fetch('http://localhost:8080/loadJson', {\n          method: 'POST',\n          body: this.path + \".json\"\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        this.stars = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Star') {\n              this.stars.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Polygon') {\n              this.polygons.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n        this.shapeid = Number(this.shapes[this.shapes.length - 1].id);\n      }\n      if (this.lodxml) {\n        this.un = 0;\n        this.re = 0;\n        await fetch('http://localhost:8080/loadXml', {\n          method: 'POST',\n          body: this.path + \".xml\"\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        this.stars = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Star') {\n              this.stars.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Polygon') {\n              this.polygons.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n        this.shapeid = Number(this.shapes[this.shapes.length - 1].id);\n      }\n    },\n    savejason() {\n      this.savjason = true;\n      this.savxml = false;\n    },\n    savexml() {\n      this.savxml = true;\n      this.savjason = false;\n    },\n    submity() {\n      this.savdialog = false;\n      this.pathdialog = true;\n    },\n    ok() {\n      this.loaddialog = false;\n      this.pathloaddialog = true;\n    },\n    save() {\n      this.saving();\n      this.savdialog = true;\n    },\n    send() {\n      var str = document.getElementById('path').value;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] == '\\\\') {\n          this.path += '\\\\';\n        }\n        this.path += str[i];\n      }\n      console.log(this.savjason);\n      console.log(this.savxml);\n      console.log(this.path);\n      this.pathdialog = false;\n      this.saving();\n      this.savjaso = false;\n      this.savxml = false;\n      this.path = \"\";\n    },\n    laod() {\n      this.loaddialog = true;\n    },\n    loadjason() {\n      this.lodjason = true;\n      this.lodxml = false;\n    },\n    loadxml() {\n      this.lodxml = true;\n      this.lodjason = false;\n    },\n    open() {\n      var str = document.getElementById('pathload').value;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] == '\\\\') {\n          this.path += '\\\\';\n        }\n        this.path += str[i];\n      }\n      console.log(this.lodjason);\n      console.log(this.lodxml);\n      console.log(this.path);\n      this.pathloaddialog = false;\n      this.loading();\n      this.lodjason = false;\n      this.lodxml = false;\n      this.path = \"\";\n    },\n    async undo() {\n      this.selectedid = -1;\n      this.updateTransformer();\n      if (this.un !== 0) {\n        await fetch('http://localhost:8080/undo', {\n          method: 'GET'\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        this.stars = [];\n        this.polygons = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Circle') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.circles.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Star') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.stars.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Square') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.squares.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Line') {\n              this.selectedid = -1;\n              this.updateTransformer();\n              this.lines.push({\n                ...this.shapes[i]\n              });\n              this.selectedid = -1;\n              this.updateTransformer();\n            } else if (this.shapes[i].type === 'Polygon') {\n              this.polygons.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n        this.un--;\n        this.re++;\n      }\n      this.selectedid = -1;\n      this.updateTransformer();\n    },\n    async Redo() {\n      this.selectedid = -1;\n      if (this.re !== 0) {\n        await fetch('http://localhost:8080/redo', {\n          method: 'GET'\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        this.stars = [];\n        this.polygons = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Star') {\n              this.stars.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Polygon') {\n              this.polygons.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n        this.re--;\n        this.un++;\n      }\n    },\n    handleTransformEnd(e) {\n      var shape = this.shapes.find(r => r.id === this.selectedid);\n      this.un++;\n      shape.x = e.target.x();\n      shape.y = e.target.y();\n      shape.rotation = e.target.rotation();\n      shape.scaleX = e.target.scaleX();\n      shape.scaleY = e.target.scaleY();\n      this.ord = shape.id;\n      this.shapeType = shape.type;\n      this.modifysh = shape;\n      if (shape.type === \"Square\") {\n        shape = this.squares.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Rectangle\") {\n        shape = this.rectangles.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Circle\") {\n        shape = this.circles.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Triangle\") {\n        shape = this.triangles.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Polygon\") {\n        shape = this.pentagons.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Line\") {\n        shape = this.lines.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Ellipse\") {\n        shape = this.ellipses.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      } else if (shape.name === \"Star\") {\n        shape = this.stars.find(r => r.id === this.selectedid);\n        shape.x = e.target.x();\n        shape.y = e.target.y();\n        shape.rotation = e.target.rotation();\n        shape.scaleX = e.target.scaleX();\n        shape.scaleY = e.target.scaleY();\n      }\n      console.log(shape);\n      this.modify();\n    },\n    handleStageMouseDown(e) {\n      if (e.target === e.target.getStage()) {\n        this.selectedid = '';\n        this.updateTransformer();\n        return;\n      }\n      const clickedOnTransformer = e.target.getParent().className === 'Transformer';\n      if (clickedOnTransformer) {\n        return;\n      }\n      const x = e.target.id();\n      const shape = this.shapes.find(r => r.id === x);\n      if (shape) {\n        this.selectedid = x;\n      } else {\n        this.selectedid = '';\n      }\n      this.updateTransformer();\n    },\n    updateTransformer() {\n      const transformerNode = this.$refs.transformer.getNode();\n      const stage = transformerNode.getStage();\n      const {\n        selectedid\n      } = this;\n      console.log(selectedid);\n      const selectedNode = stage.findOne('#' + String(this.selectedid));\n      console.log(selectedNode);\n      if (selectedNode === transformerNode.node()) {\n        return;\n      }\n      if (selectedNode) {\n        transformerNode.nodes([selectedNode]);\n      } else {\n        transformerNode.nodes([]);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ref","ColorInputWithoutInstance","name","data","value","selectedColor","selectedColor2","selectedColor3","selectedColor4","selectedColor5","configKonva","width","height","pureColor","pureColor2","isdraw","rectangles","squares","lines","circles","ellipses","triangles","stars","polygons","rectangle","circ","ellips","lin","sqrt","tria","bru","str","poly","delete","cofill","coledge","currentShape","shapes","selectedshapeid","sav","path","shapeType","ord","modifysh","cop","co","savdialog","savjason","savxml","pathdialog","loaddialog","pathloaddialog","lodjason","lodxml","poldialog","length","un","re","shapeid","brus","methods","setup","handleClick","newpo","type","index","e","v","updateTransformer","i","id","console","log","x","target","y","modify","rect","brush","ellipse","star","circle","line","square","triangle","fill","edge","polyg","clr","fetch","method","catch","error","copy","shapeClicked","prototype","push","splice","modify2","selectedid","selectedFillColor","selectedEdgeColor","stroke","del","draw","stage","$refs","getStage","position","getPointerPosition","strokeWidth","String","rotation","scaleX","scaleY","radius","radiusX","radiusY","innerRadius","outerRadius","numPoints","points","stopDrawing","createShape","body","JSON","stringify","then","res","json","saving","savejason","savexml","loading","Number","submity","ok","save","send","document","getElementById","savjaso","laod","loadjason","loadxml","open","undo","Redo","handleTransformEnd","shape","find","r","pentagons","handleStageMouseDown","clickedOnTransformer","getParent","className","transformerNode","transformer","getNode","selectedNode","findOne","node","nodes"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"appaint\" style=\"border:solid black 2px; width:1500px; background-color:#00091A ;\">\r\n    <div class=\"header\">\r\n  <div class=\"operations\" >\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"laod()\">open <i class=\"fa-solid fa-folder-open\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"undo()\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"Redo()\">Redo <i class=\"fa-solid fa-rotate-right\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"copy()\">copy <i class=\"fa-solid fa-copy\"></i></v-btn>\r\n  </div>\r\n  <div class=\"clorfil\" >\r\n    <div class=\"block\">\r\n      <div class=\"fillcolor\">\r\n        <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n    </div>\r\n      <v-btn class=\"rotate-animation\" @click=\"fill()\" style=\"background-color:#00CCCC\">fill<i class=\"fa-solid fa-fill-drip\"></i></v-btn>\r\n      <v-btn class=\"rotate-animation\" @click=\"edge()\" style=\"background-color:#00CCCC\">border<i class=\"fa-solid fa-paintbrush\"></i></v-btn>\r\n    \r\n  </div>\r\n  </div>\r\n</div>\r\n \r\n  <div class=\"paint\">\r\n   \r\n    <div class=\"bordshaps\" >\r\n     \r\n    <div class=\"shaps\">\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"square()\" ><div class=\"square rotate-animation\"></div></v-btn>\r\n     <label >square</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"rect()\" ><div class=\"rectengle rotate-animation\"></div></v-btn>\r\n     <label >rectengle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n        <v-btn style=\"background-color:#00CCCC\"  class=\"rotate-animation\" @click=\"circle()\" ><div class=\"circle rotate-animation\"></div></v-btn>\r\n     <label >circle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"triangle()\" ><div class=\"triangle-up rotate-animation\"></div></v-btn>\r\n     <label >triangle</label>\r\n    </div>\r\n    <div class=\"block\">\r\n      <v-btn style=\"background-color:#00CCCC\" @click=\"ellipse()\"><div class=\"oval rotate-animation\"></div></v-btn>\r\n      <label >ellips</label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <v-btn  style=\"background-color:#00CCCC\" @click=\"star()\"><i class=\"fa-solid fa-star rotate-animation\"></i></v-btn>\r\n      <label >star</label>\r\n     </div>\r\n      <div class=\"block\">\r\n      <v-btn  style=\"background-color:#00CCCC\" @click=\"polyg()\">hexagon<i class=\"fa-solid fa-hexagon\"></i></v-btn>\r\n      <label ></label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <v-btn  class=\"rotate-animation\" @click=\"line()\" style=\"width:30px; background-color:#00CCCC\"><i class=\"fa-solid fa-lines-leaning\"></i></v-btn>\r\n      <label >line</label>\r\n     </div>\r\n      <div class=\"block\">\r\n      <v-btn  class=\"rotate-animation\" @click=\"brush()\" style=\"width:30px; background-color:#00CCCC\"><i class=\"fa-solid fa-pencil\"></i></v-btn>\r\n      <label >brush</label>\r\n     </div>\r\n    </div>\r\n  </div>\r\n\r\n          <!-- <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>save</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of saving</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>Open</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of file</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n -->\r\n\r\n    <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n  <v-stage :config=\"configKonva\" ref=\"stage\" @dblclick=\"draw\"\r\n     @click=\"handleClick\"  @mousedown=\"handleStageMouseDown\"\r\n   >\r\n    <v-layer>\r\n      <v-rect\r\n   v-for=\"(square, index) in squares\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n           x: square.x,\r\n          y: square.y,\r\n          width: square.width,\r\n          height: square.height,\r\n          fill: square.fill, // Use the selected fill color\r\n          stroke: square.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n          id:square.id\r\n          \r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n      @dbclick=\"shapeClicked('square', index)\"\r\n      @dragend=\"newpo('square', index, $event)\"   \r\n  >\r\n\r\n  </v-rect>\r\n      <!-- drawing rectangles -->\r\n      <v-rect\r\n       v-for=\"(rect, index) in rectangles\"\r\n        :key=\"index\"\r\n        :config=\"{ \r\n          x:  rect.x,\r\n          y: rect.y,\r\n          width: rect.width,\r\n          height: rect.height,\r\n          fill: rect.fill, // Use the selected fill color\r\n          stroke: rect.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n          id:rect.id,\r\n          rotation:rect.rotation,\r\n          scaleX:rect.scaleX,\r\n          scaleY:rect.scaleY\r\n           \r\n       }\"\r\n          @transformend=\"handleTransformEnd\"\r\n        @click=\"shapeClicked('rect', index) \"\r\n       @dragend=\"newpo('rect', index, $event)\"   \r\n      \r\n        \r\n      ></v-rect>\r\n     <!-- drawing circles -->\r\n     <v-circle\r\n      v-for=\"(circle, index) in circles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: circle.x,\r\n          y: circle.y,\r\n          radius:circle.radius,\r\n          fill:circle.fill,\r\n          stroke:circle.stroke,\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:circle.id,\r\n           rotation:circle.rotation,\r\n          scaleX:circle.scaleX,\r\n          scaleY:circle.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n         @click=\"shapeClicked('circle', index)\"\r\n         @dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n     </v-circle>\r\n     <!-- drawing ellipses -->\r\n     <v-ellipse\r\n        v-for=\"(ellipse, index) in ellipses\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: ellipse.x,\r\n          y: ellipse.y,\r\n          radiusX:ellipse.radiusX,\r\n          radiusY:ellipse.radiusY,\r\n          fill: ellipse.fill, // Use the selected fill color\r\n          stroke: ellipse.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:ellipse.id,\r\n           rotation:ellipse.rotation,\r\n          scaleX:ellipse.scaleX,\r\n          scaleY:ellipse.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n       @click=\"shapeClicked('ellipse', index)\"\r\n       @dragend=\"newpo('ellipse', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-ellipse>\r\n     <!-- drawing star -->\r\n     <v-star\r\n        v-for=\"(star, index) in stars\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: star.x,\r\n          y: star.y,\r\n          innerRadius:star.innerRadius,\r\n          outerRadius:star.outerRadius,\r\n          numPoints:star.numPoints,\r\n          fill: star.fill, // Use the selected fill color\r\n          stroke: star.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:star.id,\r\n           rotation:star.rotation,\r\n          scaleX:star.scaleX,\r\n          scaleY:star.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n       @click=\"shapeClicked('star', index)\"\r\n       @dragend=\"newpo('star', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-star>\r\n     <!-- drawing line segment -->\r\n     <v-line\r\n       v-for=\"(line, index) in lines\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x : line.x,\r\n          y : line.y,\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:true,\r\n          id:line.id,\r\n           rotation:line.rotation,\r\n          scaleX:line.scaleX,\r\n          scaleY:line.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n         @click=\"shapeClicked('line', index)\"\r\n         @dragend=\"newpo('line', index, $event)\"   \r\n     >\r\n\r\n     </v-line>\r\n  <!-- square -->\r\n  \r\n  <v-regular-polygon\r\n   v-for=\"(triangle, index) in triangles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: triangle.x,\r\n          y: triangle.y,\r\n          sides:3,\r\n          radius:triangle.radius,\r\n          fill: triangle.fill, \r\n          stroke: triangle.stroke, \r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:triangle.id,\r\n           rotation:triangle.rotation,\r\n          scaleX:triangle.scaleX,\r\n          scaleY:triangle.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\"   \r\n  >\r\n\r\n  </v-regular-polygon>\r\n  <v-line\r\n         v-for=\"(line, index) in brus\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:false,\r\n        }\"\r\n  >\r\n \r\n  </v-line>\r\n\r\n\r\n   <v-regular-polygon\r\n   v-for=\"(polygon, index) in polygons\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'polygon',\r\n          x: polygon.x,\r\n          y: polygon.y,\r\n          sides:6,\r\n          radius:polygon.radius,\r\n          fill: polygon.fill, \r\n          stroke: polygon.stroke, \r\n          strokeWidth: 5,\r\n          draggable:true,\r\n          id:polygon.id,\r\n           rotation:polygon.rotation,\r\n          scaleX:polygon.scaleX,\r\n          scaleY:polygon.scaleY\r\n        }\"\r\n           @transformend=\"handleTransformEnd\"\r\n      @click=\"shapeClicked('Polygon', index)\"\r\n      @dragend=\"newpo('Polygon', index, $event)\"   \r\n  >\r\n</v-regular-polygon>\r\n    \r\n <v-transformer ref=\"transformer\" />\r\n    </v-layer>\r\n  </v-stage>\r\n</div>\r\n  \r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n          width: 1350,\r\n          height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      stars:[],\r\n       polygons:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      str:false,\r\n      poly:false,\r\n      delete:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedshapeid: '',  //transform\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        poldialog:false,\r\n        length:200,\r\n        un:0,\r\n        re:0,\r\n        shapeid:-1,\r\n         brus:[]\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n   handleClick() {\r\n       this.cop=false;\r\n      this.cofill=false;\r\n      this.coledge=false; \r\n    },\r\n    /*drawbrush()\r\n    {\r\n       if(this.bru)\r\n       {\r\n        this.draw();\r\n         const stage = this.$refs.stage.getStage();\r\n            const position = stage.getPointerPosition();\r\n         this.currentShape.points.push(position.x, position.y);\r\n       }\r\n       this.stopDrawing();\r\n    },\r\n*/\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n   var v=0;\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n       for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n          console.log(v);\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n\r\n    }\r\n    if (type === 'star') {\r\n      this.shapeType = \"Star\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n    this.stars[index].x=e.target.x();\r\n    this.stars[index].y=e.target.y();\r\n    this.shapes[v].x=this.stars[index].x;\r\n    this.shapes[v].y=this.stars[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.stars[index].x);\r\n    console.log(this.stars[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    \r\n  }\r\n    if (type === 'line') {\r\n      this.shapeid=-1;\r\n    this.updateTransformer();\r\n      this.shapeType = \"Line\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n\r\n    if (type === 'Polygon') {\r\n      this.shapeType = \"Polygon\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.polygons[index].x=e.target.x();\r\n    this.polygons[index].y=e.target.y();\r\n    this.shapes[v].x=this.polygons[index].x;\r\n    this.shapes[v].y=this.polygons[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.polygons[index].x);\r\n    console.log(this.polygons[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    \r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n         this.str=false;\r\n      this.poly=false;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n         this.str=false;\r\n      this.poly=false;\r\n    }, \r\n    star()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.str=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.poly=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n   polyg()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.poly=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.str=false;\r\n      this.bru=false;\r\n    },\r\n\r\n\r\n\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.stars =[];\r\n      this.polygons=[];\r\n      this.un=0;\r\n      this.re=0;\r\n      this.shapeid=-1;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n\r\n\r\n    if(type==='Polygon')\r\n     {\r\n       this.shapeType = \"Polygon\"\r\n        let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n           if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.updateTransformer();\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.polygons.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n         \r\n           this.un++; \r\n              this.polygons.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n              this.selectedid=-1;\r\n               this.updateTransformer();\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.polygons[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.polygons[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.polygons[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.polygons[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n        \r\n     }\r\n\r\n      if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n        let v=0;\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n            \r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++; \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n        if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n      else if(type==='star') {\r\n        let v=0;\r\n         this.shapeType = \"Star\"\r\n  for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.stars.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n      if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.stars.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n        if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.stars[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.stars[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.stars[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.stars[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify() \r\n       \r\n     }\r\n        }\r\n       \r\n     else if(type==='square')\r\n     {\r\n      console.log(\"xx\");\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n           \r\n        }\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.str=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.cop=false;\r\n    },\r\n      draw() {\r\n     if(this.rectangle)\r\n      {\r\n          this.shapeid++;\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Rectangle',\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 250,\r\n            height: 400,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                  scaleX : 1,\r\n                 scaleY : 1\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ){\r\n          this.shapeid++;\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Circle',\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 200,\r\n               id:String(this.shapeid),\r\n                 rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Ellipse',\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 200,\r\n              radiusY:130,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.str)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Star',\r\n                 fill:this.pureColor,\r\n                 stroke:this.pureColor2,\r\n               strokeWidth:2,\r\n              innerRadius:130,\r\n              outerRadius:200,\r\n              numPoints:6,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin)\r\n      {\r\n          this.shapeid++;\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Line',\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0,200,150],\r\n                 id:String(this.shapeid),\r\n                   rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt)\r\n      {\r\n          this.shapeid++;\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n               type:'Square',\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 200,\r\n            height: 200,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n         this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Triangle',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                    rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.poly)\r\n      {\r\n             this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Polygon',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                     rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n\r\n              };\r\n              \r\n            }\r\n          }\r\n      }\r\n      \r\n   \r\n        else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             this.currentShape = {\r\n            points: [position.x, position.y],\r\n            stroke: this.pureColor2,\r\n            strokeWidth: 4,\r\n          };\r\n            }\r\n          }\r\n        \r\n      }\r\n        this.stopDrawing();\r\n    },\r\n    stopDrawing() {\r\n      console.log(this.currentShape);\r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n      else if(this.str)\r\n      {\r\n        console.log(\"brt\");\r\n        this.shapeType = 'Star';\r\n\r\n           this.stars.push({...this.currentShape});\r\n           this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n        else if(this.bru)\r\n      {\r\n          this.brus.push({...this.currentShape});\r\n      }\r\n      else if(this.poly)\r\n      {\r\n          this.shapeType = 'Polygon';\r\n           this.polygons.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n        this.currentShape = null;\r\n      }\r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){\r\n      this.un = 0\r\n      this.re = 0 \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n\r\n         for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n        \r\n         \r\n      }\r\n      \r\n           this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n      }\r\n      if(this.lodxml){\r\n        this.un = 0\r\n        this.re = 0\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      \r\n        for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n    }\r\n\r\n     },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\n\r\n    async undo()\r\n    {\r\n     this.selectedid=-1;\r\n     this.updateTransformer(); \r\n      if(this.un!==0)\r\n      {\r\n               await fetch('http://localhost:8080/undo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n      console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n            this.selectedid=-1;\r\n                this.updateTransformer(); \r\n             this.rectangles.push({...this.shapes[i]});\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n\r\n\r\n              this.circles.push({...this.shapes[i]});\r\n               this.selectedid=-1;\r\n                this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n\r\n            this.ellipses.push({...this.shapes[i]})\r\n             this.selectedid=-1;\r\n               this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n             this.selectedid=-1;\r\n                this.updateTransformer(); \r\n\r\n            this.stars.push({...this.shapes[i]})\r\n             this.selectedid=-1;\r\n                 this.updateTransformer(); \r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n               this.selectedid=-1;\r\n            this.updateTransformer(); \r\n             this.squares.push({...this.shapes[i]});\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n               this.selectedid=-1;\r\n            this.updateTransformer(); \r\n            this.triangles.push({...this.shapes[i]});\r\n             this.selectedid=-1;\r\n               this.updateTransformer(); \r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.selectedid=-1;\r\n            this.updateTransformer(); \r\n             this.lines.push({...this.shapes[i]});\r\n              this.selectedid=-1;\r\n            this.updateTransformer(); \r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n\r\n         }\r\n        }\r\n         \r\n      }\r\n          this.un--;\r\n            this.re++;\r\n      }\r\n      this.selectedid=-1;\r\n                this.updateTransformer(); \r\n      \r\n    },\r\n     async Redo()\r\n    {\r\n     this.selectedid=-1;\r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons=[];\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      \r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    },\r\n     handleTransformEnd(e) {\r\n      var shape = this.shapes.find(\r\n        (r) => r.id === this.selectedid\r\n      );\r\n      this.un++;\r\n      shape.x = e.target.x();\r\n      shape.y = e.target.y();\r\n      shape.rotation = e.target.rotation();\r\n      shape.scaleX = e.target.scaleX();\r\n      shape.scaleY = e.target.scaleY();\r\n\r\n      this.ord=shape.id;\r\n      this.shapeType=shape.type;\r\n      this.modifysh=shape;\r\n\r\n       \r\n        if(shape.type === \"Square\"){\r\n            shape = this.squares.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Rectangle\"){\r\n            shape = this.rectangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Circle\"){\r\n            shape = this.circles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Triangle\"){\r\n            shape = this.triangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Polygon\"){\r\n            shape = this.pentagons.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Line\"){\r\n            shape = this.lines.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Ellipse\"){\r\n            shape = this.ellipses.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n          else if(shape.name === \"Star\"){\r\n            shape = this.stars.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      console.log(shape);\r\n      this.modify();\r\n      \r\n\r\n\r\n    },\r\n    handleStageMouseDown(e) {\r\n      if (e.target === e.target.getStage()) {\r\n        this.selectedid = '';\r\n        this.updateTransformer();\r\n        return;\r\n        \r\n      }\r\n\r\n      const clickedOnTransformer =\r\n        e.target.getParent().className === 'Transformer';\r\n      if (clickedOnTransformer) {\r\n        return;\r\n      }\r\n\r\n     \r\n    \r\n      const x= e.target.id();\r\n      const shape = this.shapes.find((r) => r.id === x);\r\n\r\n      if (shape) {\r\n        this.selectedid = x;\r\n      } else {\r\n        this.selectedid = '';\r\n      }\r\n      this.updateTransformer();\r\n    },\r\n    updateTransformer() {\r\n      const transformerNode = this.$refs.transformer.getNode();\r\n      const stage = transformerNode.getStage();\r\n      const { selectedid } = this;\r\n      console.log(selectedid);\r\n      const selectedNode = stage.findOne('#' + String(this.selectedid));\r\n      console.log(selectedNode);\r\n      if (selectedNode === transformerNode.node()) {\r\n        return;\r\n      }\r\n\r\n      if (selectedNode) {\r\n        transformerNode.nodes([selectedNode]);\r\n      } else {\r\n        transformerNode.nodes([]);\r\n      }\r\n    },\r\n\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n  .hover-animation {\r\n    transition: transform 0.2s ease-in-out;\r\n  }\r\n  \r\n  .hover-animation:hover {\r\n    animation: bounce 0.6s ease infinite;\r\n  }\r\n  \r\n  @keyframes bounce {\r\n    0%, 20%, 50%, 80%, 100% {\r\n      transform: translateY(0);\r\n    }\r\n    40% {\r\n      transform: translateY(-15px);\r\n    }\r\n    60% {\r\n      transform: translateY(-10px);\r\n    }\r\n  }\r\n  .paint{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    \r\n  }\r\n  .header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap:0px;\r\n  \r\n  }\r\n  .operations{\r\n    display: flex;\r\n    gap: 10px;\r\n    align-content: center;\r\n    margin:10px;\r\n    margin:  2px auto;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  \r\n  }\r\n  .clorfil{\r\n    margin-right: 5px;\r\n    width:250px;\r\n    border-radius:20px;\r\n    \r\n  }\r\n  .bordshaps{\r\n    height: 300px;\r\n    margin: 3px;\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: #00CCCC  ;\r\n    border-color: #00CCCC;\r\n    background-color: #00CCCC;\r\n    border-radius:20px;\r\n    margin:   auto 2px;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    \r\n  }\r\n  .rotate-animation {\r\n    transition: transform 0.3s ease-in-out;\r\n  }\r\n  \r\n  .rotate-animation:hover {\r\n    transform: rotate(360deg);\r\n  }\r\n  \r\n  .shaps{\r\n    margin-right: 3px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    \r\n  } \r\n  label{\r\n    opacity: 0.2;\r\n    color: aliceblue;\r\n    \r\n  }\r\n  .block{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 5px;\r\n  }\r\n  v-btn:hover {\r\n    cursor: pointer;\r\n  }\r\n  label:hover{\r\n    opacity: 100;\r\n    color: aliceblue;\r\n  \r\n  }\r\n  .square {\r\n    height: 20px;\r\n    width: 20px;\r\n    border: black solid;\r\n  }\r\n  .rectengle {\r\n    height: 15px;\r\n    width: 25px;\r\n    border: black solid;\r\n  }\r\n\r\n  .circle {\r\n    height: 25px;\r\n    width: 25px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .circle1{\r\n    height: 50px;\r\n    width: 50px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .oval {\r\n    height:20px;\r\n    width: 30px;\r\n    border: black solid;\r\n    \r\n    border-radius: 50%;\r\n  }\r\n  .triangle-up {\r\n      width: 0;\r\n      height: 0;\r\n      border-left: 9px solid transparent;\r\n      border-right: 9px solid transparent;\r\n      border-bottom: 20px solid #555;\r\n  }\r\n  .line{\r\n      border-left: 1px solid transparent;\r\n      border-bottom:18px solid #555;\r\n  }\r\n  .color{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-bottom: 10px;\r\n  \r\n  }\r\n  .fillcolor{\r\n    margin-top: 4px;\r\n    height: 30px;\r\n    width:30px;\r\n    border: black solid;\r\n    border-radius: 49%;\r\n    overflow: hidden;\r\n  \r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}