{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeStyle as _normalizeStyle, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"appaint\",\n  style: {\n    \"border\": \"solid black 2px\",\n    \"width\": \"1500px\",\n    \"background-color\": \"#00091A\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"operations\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-folder-open\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-floppy-disk\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrow-rotate-left\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-rotate-right\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-eraser\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-trash\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-copy\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa fa-expand\",\n  \"aria-hidden\": \"true\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrows-up-down-left-right\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"size\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"sizec\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"size1\"\n}, \"width\", -1 /* HOISTED */));\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"size1\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"size2\"\n}, \"height\", -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"size2\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"sizex\"\n}, \"length X\", -1 /* HOISTED */));\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"sizex\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"sizey\"\n}, \"length Y\", -1 /* HOISTED */));\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"sizey\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_23 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  value: \"0\",\n  id: \"sizeq\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"save\", -1 /* HOISTED */));\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"5px\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  placeholder: \"c:\\\\\\\\name\",\n  id: \"path\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Open\", -1 /* HOISTED */));\nconst _hoisted_28 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"5px\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  placeholder: \"c:\\\\\\\\name\",\n  id: \"pathload\",\n  autofocus: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_30 = {\n  class: \"clorfil\"\n};\nconst _hoisted_31 = {\n  class: \"block\"\n};\nconst _hoisted_32 = {\n  class: \"fillcolor\"\n};\nconst _hoisted_33 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-fill-drip\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_34 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-paintbrush\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_35 = {\n  class: \"paint\"\n};\nconst _hoisted_36 = {\n  class: \"bordshaps\"\n};\nconst _hoisted_37 = {\n  class: \"shaps\"\n};\nconst _hoisted_38 = {\n  class: \"block\"\n};\nconst _hoisted_39 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"square rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_40 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"square\", -1 /* HOISTED */));\nconst _hoisted_41 = {\n  class: \"block\"\n};\nconst _hoisted_42 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"rectengle rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_43 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"rectengle\", -1 /* HOISTED */));\nconst _hoisted_44 = {\n  class: \"block\"\n};\nconst _hoisted_45 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"circle rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_46 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"circle\", -1 /* HOISTED */));\nconst _hoisted_47 = {\n  class: \"block\"\n};\nconst _hoisted_48 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"triangle-up rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_49 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"triangle\", -1 /* HOISTED */));\nconst _hoisted_50 = {\n  class: \"block\"\n};\nconst _hoisted_51 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"oval rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_52 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"ellips\", -1 /* HOISTED */));\nconst _hoisted_53 = {\n  class: \"block\"\n};\nconst _hoisted_54 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-lines-leaning\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_55 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"line\", -1 /* HOISTED */));\nconst _hoisted_56 = {\n  class: \"bord\",\n  style: {\n    \"border\": \"solid black 2px\",\n    \"border-radius\": \"10px\",\n    \"background-color\": \"#ffffff\",\n    \"margin-left\": \"2px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\");\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_dialog = _resolveComponent(\"v-dialog\");\n  const _component_color_picker = _resolveComponent(\"color-picker\");\n  const _component_v_rect = _resolveComponent(\"v-rect\");\n  const _component_v_circle = _resolveComponent(\"v-circle\");\n  const _component_v_ellipse = _resolveComponent(\"v-ellipse\");\n  const _component_v_line = _resolveComponent(\"v-line\");\n  const _component_v_regular_polygon = _resolveComponent(\"v-regular-polygon\");\n  const _component_v_layer = _resolveComponent(\"v-layer\");\n  const _component_v_stage = _resolveComponent(\"v-stage\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[0] || (_cache[0] = $event => $options.laod())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"open \"), _hoisted_4]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[1] || (_cache[1] = $event => $options.save())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Save \"), _hoisted_5]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[2] || (_cache[2] = $event => $options.undo())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Undo \"), _hoisted_6]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[3] || (_cache[3] = $event => $options.Redo())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Redo \"), _hoisted_7]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[4] || (_cache[4] = $event => $options.del())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Delete \"), _hoisted_8]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[5] || (_cache[5] = $event => $options.clr())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"clear \"), _hoisted_9]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[6] || (_cache[6] = $event => $options.copy())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"copy \"), _hoisted_10]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    for: \"userInput\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[7] || (_cache[7] = $event => $options.resize())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"resize \"), _hoisted_11]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    for: \"userInput\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[8] || (_cache[8] = $event => $options.allowmove())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"move \"), _hoisted_12]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"triangle\",\n    modelValue: $data.tridialog,\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $data.tridialog = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"resize your shape\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\"This triangle is equilateral. Please enter side length \")]),\n        _: 1 /* STABLE */\n      }), _hoisted_13, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[9] || (_cache[9] = $event => $options.aplly())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"apply\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"triangle\",\n    modelValue: $data.circdialog,\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => $data.circdialog = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"resize your shape\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\"Enter the radius \")]),\n        _: 1 /* STABLE */\n      }), _hoisted_14, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[11] || (_cache[11] = $event => $options.aplly())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"apply\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"rectangle\",\n    modelValue: $data.rectcdialog,\n    \"onUpdate:modelValue\": _cache[14] || (_cache[14] = $event => $data.rectcdialog = $event)\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"/ \"), _createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"resize your shape\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\"enter size of your rectangle \")]),\n        _: 1 /* STABLE */\n      }), _hoisted_15, _hoisted_16, _hoisted_17, _hoisted_18, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[13] || (_cache[13] = $event => $options.aplly())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"apply\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"ellips\",\n    modelValue: $data.elpsdialog,\n    \"onUpdate:modelValue\": _cache[16] || (_cache[16] = $event => $data.elpsdialog = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"resize your shape\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\"size of your ellips \")]),\n        _: 1 /* STABLE */\n      }), _hoisted_19, _hoisted_20, _hoisted_21, _hoisted_22, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[15] || (_cache[15] = $event => $options.aplly())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"apply\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"triangle\",\n    modelValue: $data.sqrdialog,\n    \"onUpdate:modelValue\": _cache[18] || (_cache[18] = $event => $data.sqrdialog = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"resize your shape\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\" Enter the side length\")]),\n        _: 1 /* STABLE */\n      }), _hoisted_23, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[17] || (_cache[17] = $event => $options.aplly())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"apply\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.savdialog,\n    \"onUpdate:modelValue\": _cache[22] || (_cache[22] = $event => $data.savdialog = $event),\n    transition: \"dialog-top-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_hoisted_24]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\" xml OR json \")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.savjason === true ? '#2196F3' : 'initial',\n          color: $data.savjason === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[19] || (_cache[19] = $event => $options.savejason())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"json\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _hoisted_25, _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.savxml === true ? '#2196F3' : 'initial',\n          color: $data.savxml === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[20] || (_cache[20] = $event => $options.savexml())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"xml\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[21] || (_cache[21] = $event => $options.submity())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"OK\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.pathdialog,\n    \"onUpdate:modelValue\": _cache[24] || (_cache[24] = $event => $data.pathdialog = $event),\n    transition: \"dialog-bottom-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"path of saving\")]),\n        _: 1 /* STABLE */\n      }), _hoisted_26, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[23] || (_cache[23] = $event => $options.send())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"save\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.loaddialog,\n    \"onUpdate:modelValue\": _cache[28] || (_cache[28] = $event => $data.loaddialog = $event),\n    transition: \"dialog-top-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_hoisted_27]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(\" xml OR json \")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.lodjason === true ? '#2196F3' : 'initial',\n          color: $data.lodjason === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[25] || (_cache[25] = $event => $options.loadjason())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"json\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _hoisted_28, _createVNode(_component_v_btn, {\n        style: _normalizeStyle({\n          backgroundColor: $data.lodxml === true ? '#2196F3' : 'initial',\n          color: $data.lodxml === true ? '#FFFFFF' : 'initial'\n        }),\n        onClick: _cache[26] || (_cache[26] = $event => $options.loadxml())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"xml\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"style\"]), _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[27] || (_cache[27] = $event => $options.ok())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"OK\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_dialog, {\n    width: \"400\",\n    class: \"saving\",\n    modelValue: $data.pathloaddialog,\n    \"onUpdate:modelValue\": _cache[30] || (_cache[30] = $event => $data.pathloaddialog = $event),\n    transition: \"dialog-bottom-transition\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      variant: \"outlined\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(\"path of file\")]),\n        _: 1 /* STABLE */\n      }), _hoisted_29, _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          variant: \"outlined\",\n          onClick: _cache[29] || (_cache[29] = $event => $options.open())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"open\")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_createVNode(_component_color_picker, {\n    pureColor: $data.pureColor,\n    \"onUpdate:pureColor\": _cache[31] || (_cache[31] = $event => $data.pureColor = $event),\n    gradientColor: _ctx.gradientColor,\n    \"onUpdate:gradientColor\": _cache[32] || (_cache[32] = $event => _ctx.gradientColor = $event)\n  }, null, 8 /* PROPS */, [\"pureColor\", \"gradientColor\"])]), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[33] || (_cache[33] = $event => $options.fill()),\n    style: {\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"fill\"), _hoisted_33]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[34] || (_cache[34] = $event => $options.edge()),\n    style: {\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"border\"), _hoisted_34]),\n    _: 1 /* STABLE */\n  })])])]), _createElementVNode(\"div\", _hoisted_35, [_createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[35] || (_cache[35] = $event => $options.square())\n  }, {\n    default: _withCtx(() => [_hoisted_39]),\n    _: 1 /* STABLE */\n  }), _hoisted_40]), _createElementVNode(\"div\", _hoisted_41, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[36] || (_cache[36] = $event => $options.rect())\n  }, {\n    default: _withCtx(() => [_hoisted_42]),\n    _: 1 /* STABLE */\n  }), _hoisted_43]), _createElementVNode(\"div\", _hoisted_44, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    class: \"rotate-animation\",\n    onClick: _cache[37] || (_cache[37] = $event => $options.circle())\n  }, {\n    default: _withCtx(() => [_hoisted_45]),\n    _: 1 /* STABLE */\n  }), _hoisted_46]), _createElementVNode(\"div\", _hoisted_47, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[38] || (_cache[38] = $event => $options.triangle())\n  }, {\n    default: _withCtx(() => [_hoisted_48]),\n    _: 1 /* STABLE */\n  }), _hoisted_49]), _createElementVNode(\"div\", _hoisted_50, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[39] || (_cache[39] = $event => $options.ellipse())\n  }, {\n    default: _withCtx(() => [_hoisted_51]),\n    _: 1 /* STABLE */\n  }), _hoisted_52]), _createElementVNode(\"div\", _hoisted_53, [_createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[40] || (_cache[40] = $event => $options.line()),\n    style: {\n      \"width\": \"30px\",\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_54]),\n    _: 1 /* STABLE */\n  }), _hoisted_55])])]), _createElementVNode(\"div\", _hoisted_56, [_createVNode(_component_v_stage, {\n    config: $data.configKonva,\n    ref: \"stage\",\n    onMousedown: $options.startDrawing,\n    onMouseup: $options.stopDrawing,\n    onMousemove: $options.draw\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_layer, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.squares, (square, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'square',\n            x: square.x,\n            y: square.y,\n            width: square.width,\n            height: square.height,\n            fill: square.fill,\n            // Use the selected fill color\n            stroke: square.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: $data.able\n          },\n          onClick: $event => $options.shapeClicked('square', index),\n          onMouseenter: $event => $options.oldpo('square', index),\n          onDragend: $event => $options.newpo('square', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onMouseenter\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing rectangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rectangles, (rect, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'Rectangle',\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill,\n            // Use the selected fill color\n            stroke: rect.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: $data.able\n          },\n          onClick: $event => $options.shapeClicked('rect', index),\n          onMouseenter: $event => $options.oldpo('rect', index),\n          onDragend: $event => $options.newpo('rect', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onMouseenter\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing circles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.circles, (circle, index) => {\n        return _openBlock(), _createBlock(_component_v_circle, {\n          key: index,\n          config: {\n            type: 'circle',\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            stroke: circle.stroke,\n            strokeWidth: 2,\n            draggable: $data.able\n          },\n          onClick: $event => $options.shapeClicked('circle', index),\n          onMouseenter: $event => $options.oldpo('circle', index),\n          onDragend: $event => $options.newpo('circle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onMouseenter\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing ellipses \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ellipses, (ellipse, index) => {\n        return _openBlock(), _createBlock(_component_v_ellipse, {\n          key: index,\n          config: {\n            type: 'ellipse',\n            x: ellipse.x,\n            y: ellipse.y,\n            radiusX: ellipse.radiusX,\n            radiusY: ellipse.radiusY,\n            fill: ellipse.fill,\n            // Use the selected fill color\n            stroke: ellipse.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: $data.able\n          },\n          onClick: $event => $options.shapeClicked('ellipse', index),\n          onMouseenter: $event => $options.oldpo('ellipse', index),\n          onDragend: $event => $options.newpo('ellipse', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onMouseenter\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing line segment \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lines, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            type: 'line',\n            x: line.x,\n            y: line.y,\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: $data.able\n          },\n          onClick: $event => $options.shapeClicked('line', index),\n          onMouseenter: $event => $options.oldpo('line', index),\n          onDragend: $event => $options.newpo('line', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onMouseenter\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" square \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.triangles, (triangle, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'triangle',\n            x: triangle.x,\n            y: triangle.y,\n            sides: 3,\n            radius: triangle.radius,\n            fill: triangle.fill,\n            stroke: triangle.stroke,\n            strokeWidth: 2,\n            draggable: $data.able\n          },\n          onClick: $event => $options.shapeClicked('triangle', index),\n          onMouseenter: $event => $options.oldpo('triangle', index),\n          onDragend: $event => $options.newpo('triangle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onMouseenter\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"config\", \"onMousedown\", \"onMouseup\", \"onMousemove\"])])])]);\n}","map":{"version":3,"names":["class","style","_createElementVNode","type","value","id","autofocus","for","placeholder","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_v_btn","onClick","_cache","$event","$options","laod","_hoisted_4","save","_hoisted_5","undo","_hoisted_6","Redo","_hoisted_7","del","_hoisted_8","clr","_hoisted_9","copy","_hoisted_10","resize","_hoisted_11","allowmove","_hoisted_12","_component_v_dialog","width","$data","tridialog","_component_v_card","variant","_component_v_card_title","_component_v_card_subtitle","_hoisted_13","_component_v_card_actions","aplly","circdialog","_hoisted_14","rectcdialog","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","elpsdialog","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","sqrdialog","_hoisted_23","savdialog","transition","_hoisted_24","_normalizeStyle","backgroundColor","savjason","color","savejason","_hoisted_25","savxml","savexml","submity","pathdialog","_hoisted_26","send","loaddialog","_hoisted_27","lodjason","loadjason","_hoisted_28","lodxml","loadxml","ok","pathloaddialog","_hoisted_29","open","_hoisted_30","_hoisted_31","_hoisted_32","_component_color_picker","pureColor","gradientColor","_ctx","fill","_hoisted_33","edge","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","square","_hoisted_39","_hoisted_40","_hoisted_41","rect","_hoisted_42","_hoisted_43","_hoisted_44","circle","_hoisted_45","_hoisted_46","_hoisted_47","triangle","_hoisted_48","_hoisted_49","_hoisted_50","ellipse","_hoisted_51","_hoisted_52","_hoisted_53","line","_hoisted_54","_hoisted_55","_hoisted_56","_component_v_stage","config","configKonva","ref","onMousedown","startDrawing","onMouseup","stopDrawing","onMousemove","draw","_component_v_layer","_Fragment","_renderList","squares","index","_createBlock","_component_v_rect","key","x","y","height","stroke","able","shapeClicked","onMouseenter","oldpo","onDragend","newpo","_createCommentVNode","rectangles","circles","_component_v_circle","radius","ellipses","_component_v_ellipse","radiusX","radiusY","lines","_component_v_line","points","triangles","_component_v_regular_polygon"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"appaint\" style=\"border:solid black 2px; width:1500px; background-color:#00091A ;\">\r\n    <div class=\"header\">\r\n  <div class=\"operations\" >\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"laod()\">open <i class=\"fa-solid fa-folder-open\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"undo()\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"Redo()\">Redo <i class=\"fa-solid fa-rotate-right\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"copy()\">copy <i class=\"fa-solid fa-copy\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" for=\"userInput\"  style=\"background-color:#00CCCC\" @click=\"resize() \">resize <i class=\"fa fa-expand\" aria-hidden=\"true\"></i> </v-btn>\r\n    <v-btn class=\"rotate-animation\" for=\"userInput\"  style=\"background-color:#00CCCC\" @click=\"allowmove() \">move <i class=\"fa-solid fa-arrows-up-down-left-right\"></i> </v-btn>\r\n      <v-dialog width=\"400\" class=\"triangle\" v-model=\"tridialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>This triangle is equilateral. Please enter side length </v-card-subtitle>\r\n        <input type=\"text\" value=\"0\" id=\"size\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"triangle\" v-model=\"circdialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>Enter the radius </v-card-subtitle>\r\n        <input type=\"text\" value=\"0\" id=\"sizec\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"rectangle\" v-model=\"rectcdialog\">/\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>enter size of your rectangle  </v-card-subtitle>\r\n          <label for=\"size1\">width</label>\r\n          <input type=\"text\" value=\"0\" id=\"size1\" autofocus>\r\n          <label for=\"size2\">height</label>\r\n          <input type=\"text\" value=\"0\" id=\"size2\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"ellips\" v-model=\"elpsdialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>size of your ellips </v-card-subtitle>\r\n          <label for=\"sizex\">length X</label>\r\n          <input type=\"text\" value=\"0\" id=\"sizex\" autofocus>\r\n          <label for=\"sizey\">length Y</label>\r\n          <input type=\"text\" value=\"0\" id=\"sizey\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"triangle\" v-model=\"sqrdialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle> Enter the side length</v-card-subtitle>\r\n        <input type=\"text\" value=\"0\" id=\"sizeq\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n    \r\n     <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>save</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of saving</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>Open</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      \r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of file</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n  </div>\r\n  \r\n  <div class=\"clorfil\" >\r\n    <div class=\"block\">\r\n      <div class=\"fillcolor\">\r\n        <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n    </div>\r\n      <v-btn class=\"rotate-animation\" @click=\"fill()\" style=\"background-color:#00CCCC\">fill<i class=\"fa-solid fa-fill-drip\"></i></v-btn>\r\n      <v-btn class=\"rotate-animation\" @click=\"edge()\" style=\"background-color:#00CCCC\">border<i class=\"fa-solid fa-paintbrush\"></i></v-btn>\r\n    \r\n  </div>\r\n  </div>\r\n</div>\r\n \r\n  <div class=\"paint\">\r\n   \r\n    <div class=\"bordshaps\" >\r\n     \r\n    <div class=\"shaps\">\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"square()\" ><div class=\"square rotate-animation\"></div></v-btn>\r\n     <label >square</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"rect()\" ><div class=\"rectengle rotate-animation\"></div></v-btn>\r\n     <label >rectengle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n        <v-btn style=\"background-color:#00CCCC\"  class=\"rotate-animation\" @click=\"circle()\" ><div class=\"circle rotate-animation\"></div></v-btn>\r\n     <label >circle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"triangle()\" ><div class=\"triangle-up rotate-animation\"></div></v-btn>\r\n     <label >triangle</label>\r\n    </div>\r\n    <div class=\"block\">\r\n      <v-btn style=\"background-color:#00CCCC\" @click=\"ellipse()\"><div class=\"oval rotate-animation\"></div></v-btn>\r\n      <label >ellips</label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <v-btn  class=\"rotate-animation\" @click=\"line()\" style=\"width:30px; background-color:#00CCCC\"><i class=\"fa-solid fa-lines-leaning\"></i></v-btn>\r\n      <label >line</label>\r\n     </div>\r\n    </div>\r\n  </div>\r\n    <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n  <v-stage :config=\"configKonva\" ref=\"stage\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" \r\n     >\r\n    <v-layer>\r\n      <v-rect\r\n   v-for=\"(square, index) in squares\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'square',\r\n           x: square.x,\r\n          y: square.y,\r\n          width: square.width,\r\n          height: square.height,\r\n          fill: square.fill, // Use the selected fill color\r\n          stroke: square.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:able,\r\n        }\"\r\n      @click=\"shapeClicked('square', index)\"\r\n       @mouseenter=\"oldpo('square', index)\"\r\n      @dragend=\"newpo('square', index, $event)\"   \r\n  >\r\n\r\n  </v-rect>\r\n      <!-- drawing rectangles -->\r\n      <v-rect\r\n       v-for=\"(rect, index) in rectangles\"\r\n        :key=\"index\"\r\n        :config=\"{ \r\n          type:'Rectangle',\r\n          x:  rect.x,\r\n          y: rect.y,\r\n          width: rect.width,\r\n          height: rect.height,\r\n          fill: rect.fill, // Use the selected fill color\r\n          stroke: rect.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:able,\r\n           \r\n       }\"\r\n         \r\n        @click=\"shapeClicked('rect', index) \"\r\n         @mouseenter=\"oldpo('rect', index)\"\r\n       @dragend=\"newpo('rect', index, $event)\"   \r\n      \r\n        \r\n      ></v-rect>\r\n     <!-- drawing circles -->\r\n     <v-circle\r\n      v-for=\"(circle, index) in circles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'circle',\r\n          x: circle.x,\r\n          y: circle.y,\r\n          radius:circle.radius,\r\n          fill:circle.fill,\r\n          stroke:circle.stroke,\r\n          strokeWidth: 2,\r\n          draggable:able,\r\n        }\"\r\n         @click=\"shapeClicked('circle', index)\"\r\n          @mouseenter=\"oldpo('circle', index)\"\r\n         @dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n     </v-circle>\r\n     <!-- drawing ellipses -->\r\n     <v-ellipse\r\n        v-for=\"(ellipse, index) in ellipses\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'ellipse',\r\n          x: ellipse.x,\r\n          y: ellipse.y,\r\n          radiusX:ellipse.radiusX,\r\n          radiusY:ellipse.radiusY,\r\n          fill: ellipse.fill, // Use the selected fill color\r\n          stroke: ellipse.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:able,\r\n        }\"\r\n       @click=\"shapeClicked('ellipse', index)\"\r\n        @mouseenter=\"oldpo('ellipse', index)\"\r\n       @dragend=\"newpo('ellipse', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-ellipse>\r\n     <!-- drawing line segment -->\r\n     <v-line\r\n       v-for=\"(line, index) in lines\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'line',\r\n          x : line.x,\r\n          y : line.y,\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:able,\r\n        }\"\r\n         @click=\"shapeClicked('line', index)\"\r\n          @mouseenter=\"oldpo('line', index)\"\r\n         @dragend=\"newpo('line', index, $event)\"   \r\n     >\r\n\r\n     </v-line>\r\n  <!-- square -->\r\n  \r\n  <v-regular-polygon\r\n   v-for=\"(triangle, index) in triangles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'triangle',\r\n          x: triangle.x,\r\n          y: triangle.y,\r\n          sides:3,\r\n          radius:triangle.radius,\r\n          fill: triangle.fill, \r\n          stroke: triangle.stroke, \r\n          strokeWidth: 2,\r\n          draggable:able,\r\n        }\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @mouseenter=\"oldpo('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\"   \r\n  >\r\n\r\n  </v-regular-polygon>\r\n    \r\n\r\n    </v-layer>\r\n  </v-stage>\r\n</div>\r\n  \r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n//import Konva from 'konva';\r\n\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      able:false,\r\n      configKonva: {\r\n          width: 1350,\r\n          height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      delete:false,\r\n      mov:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedShapeName: '',\r\n     resiz:false,\r\n        userInput:0,\r\n        userInput1:0,\r\n        userInput2:0,\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n        aply:false,\r\n        ind:0,\r\n        typ:'',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n      cc:null,\r\n      vv:null,\r\n      tridialog:false,\r\n        sqrdialog:false,\r\n        circdialog:false,\r\n        rectcdialog:false,\r\n        elpsdialog:false,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        un:0,\r\n        re:0,\r\n        length:250,\r\n\r\n\r\n    };\r\n  },\r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n    allowmove()\r\n    {\r\n      this.able=true;\r\n    },\r\n   aplly(){\r\n    this.un++;\r\n    let v=0;\r\n        switch(this.typ){\r\n          case 'triangle' :\r\n             this.shapeType = \"Triangle\"\r\n\r\n             for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.triangles[this.ind].x)\r\n              {\r\n                if(this.shapes[i].y===this.triangles[this.ind].y)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[this.ind].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[this.ind].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[this.ind].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n                \r\n\r\n                  this.userInput = document.getElementById('size').value;\r\n                  this.triangles[this.ind].radius=this.userInput;\r\n                  this.shapes[v].radius=this.userInput;\r\n                  this.userInput=0;\r\n                  this.tridialog=!this.tridialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify()\r\n\r\n                   break;\r\n          case 'circle':\r\n                   this.shapeType = \"Circle\"\r\n              \r\n              for(let i=0;i<this.shapes.length;i++)\r\n                {\r\n                  if(this.shapes[i]!==null)\r\n                  {\r\n                        if(this.shapes[i].x===this.circles[this.ind].x)\r\n                  {\r\n                    if(this.shapes[i].y===this.circles[this.ind].y)\r\n                    { \r\n                        if(this.shapes[i].radius===this.circles[this.ind].radius)\r\n                        {\r\n                          \r\n\r\n                          if(this.shapes[i].fill===this.circles[this.ind].fill)\r\n                          {\r\n                              if(this.shapes[i].stroke===this.circles[this.ind].stroke)\r\n                              {\r\n                                    v=i;\r\n                                    console.log(v);\r\n                                    break;\r\n                              }\r\n                          }\r\n                        }\r\n\r\n\r\n                              \r\n\r\n                    }\r\n\r\n                  \r\n                  }\r\n                  }\r\n                \r\n                }\r\n\r\n\r\n\r\n\r\n                  this.userInput = document.getElementById('sizec').value;\r\n                  this.circles[this.ind].radius=this.userInput;\r\n                  this.shapes[v].radius=this.userInput;\r\n                  this.circdialog=!this.circdialog;\r\n                  this.userInput=0;\r\n                  this.resiz=!this.resiz;\r\n                   this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify()\r\n                  break;\r\n\r\n          case 'rect':\r\n\r\n          \r\n              this.shapeType = \"Rectangle\"\r\n            for(let i=0;i<this.shapes.length;i++)\r\n                {\r\n                  if(this.shapes[i]!==null)\r\n                  {\r\n                        if(this.shapes[i].x===this.rectangles[this.ind].x)\r\n                  {\r\n                    if(this.shapes[i].y===this.rectangles[this.ind].y)\r\n                    { \r\n                        if(this.shapes[i].width===this.rectangles[this.ind].width)\r\n                        {\r\n                          \r\n\r\n                          if(this.shapes[i].fill===this.rectangles[this.ind].fill)\r\n                          {\r\n                              if(this.shapes[i].stroke===this.rectangles[this.ind].stroke)\r\n                              {\r\n                                if(this.shapes[i].height===this.rectangles[this.ind].height)\r\n                                {\r\n                                        \r\n                                    v=i;\r\n                                    console.log(v);\r\n                                    break;\r\n                                }\r\n                              }\r\n                          }\r\n                        }\r\n\r\n\r\n                              \r\n\r\n                    }\r\n\r\n                  \r\n                  }\r\n                  }\r\n                \r\n                }\r\n\r\n\r\n                  this.userInput1 = document.getElementById('size1').value;\r\n                  this.userInput2 = document.getElementById('size2').value;\r\n                  this.rectangles[this.ind].width=this.userInput1;\r\n                  this.rectangles[this.ind].height=this.userInput2;\r\n                   this.shapes[v].width=this.userInput1;\r\n                  this.shapes[v].height=this.userInput2;\r\n                  this.rectcdialog=!this.rectcdialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.userInput=0;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify()\r\n                  break;        \r\n          case 'ellipse':\r\n                  this.shapeType = \"Ellipse\"\r\n            for(let i=0;i<this.shapes.length;i++)\r\n                  {\r\n                    if(this.shapes[i]!==null)\r\n                    {\r\n                            if(this.shapes[i].x===this.ellipses[this.ind].x)\r\n                    {\r\n                      if(this.shapes[i].y===this.ellipses[this.ind].y)\r\n                      { \r\n                          if(this.shapes[i].radiusX===this.ellipses[this.ind].radiusX)\r\n                          {\r\n                            \r\n\r\n                            if(this.shapes[i].fill===this.ellipses[this.ind].fill)\r\n                            {\r\n                                if(this.shapes[i].stroke===this.ellipses[this.ind].stroke)\r\n                                {\r\n                                  if(this.shapes[i].radiusY===this.ellipses[this.ind].radiusY)\r\n                                      v=i;\r\n                                      console.log(v);\r\n                                      break;\r\n                                }\r\n                            }\r\n                          }\r\n\r\n\r\n                                \r\n\r\n                      }\r\n\r\n                    \r\n                    }\r\n                    }\r\n                \r\n                  }\r\n                    console.log(v);\r\n                      \r\n\r\n\r\n                  this.userInput1 = document.getElementById('sizex').value;\r\n                  this.userInput2 = document.getElementById('sizey').value;\r\n                  this.ellipses[this.ind].radiusX=this.userInput1;\r\n                  this.ellipses[this.ind].radiusY=this.userInput2;\r\n                   this.shapes[v].radiusX=this.userInput1;\r\n                  this.shapes[v].radiusY=this.userInput2;\r\n                  this.elpsdialog=!this.elpsdialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.userInput=0;\r\n                  this.resiz=false;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify();\r\n\r\n                  break;\r\n          case 'square':\r\n             this.shapeType = \"Square\";\r\n               for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.squares[this.ind].x)\r\n          {\r\n            if(this.shapes[i].y===this.squares[this.ind].y)\r\n            { \r\n                if(this.shapes[i].width===this.squares[this.ind].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[this.ind].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[this.ind].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[this.ind].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n\r\n\r\n\r\n          this.userInput1 = document.getElementById('sizeq').value;\r\n                  this.squares[this.ind].width=this.userInput1;\r\n                  this.squares[this.ind].height=this.userInput1;\r\n                   this.shapes[v].width=this.userInput1;\r\n                  this.shapes[v].height=this.userInput1;\r\n                  this.sqrdialog=!this.sqrdialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.userInput=0;\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                   this.modify()\r\n        }\r\n        \r\n\r\n      },\r\n\r\n    oldpo(type, index)\r\n    {\r\n        if(type==='triangle')\r\n        {\r\n            this.cc=this.triangles[index].x;\r\n            this.vv=this.triangles[index].y;\r\n        }\r\n        else if(type==='rect')\r\n        {\r\n          this.cc=this.rectangles[index].x;\r\n            this.vv=this.rectangles[index].y;\r\n        }\r\n        else if(type==='line')\r\n        {\r\n          this.cc=this.lines[index].x;\r\n            this.vv=this.lines[index].y;\r\n        }\r\n        else if(type==='ellipse')\r\n        {\r\n             this.cc=this.ellipses[index].x;\r\n            this.vv=this.ellipses[index].y;\r\n        }\r\n        else if(type==='square')\r\n        {\r\n          \r\n             this.cc=this.squares[index].x;\r\n            this.vv=this.squares[index].y;\r\n        }\r\n        else if(type==='circle')\r\n        {\r\n           this.cc=this.circles[index].x;\r\n            this.vv=this.circles[index].y;\r\n        }\r\n    },\r\n\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n  this.able=false;\r\n   var v=0;\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radius===this.circles[index].radius)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.circles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.circles[index].stroke)\r\n                      {\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n         \r\n        }\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.rectangles[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.rectangles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.rectangles[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.rectangles[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radiusX===this.ellipses[index].radiusX)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.ellipses[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.ellipses[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].radiusY===this.ellipses[index].radiusY)\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n       \r\n        }\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'line') {\r\n      this.shapeType = \"Line\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n       if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n          \r\n                   \r\n                        \r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.squares[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.cc)\r\n              {\r\n                if(this.shapes[i].y===this.vv)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[index].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[index].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[index].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n\r\n    },\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.un=0;\r\n      this.re=0;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    resize(){\r\n      this.resiz=true;\r\n\r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n      if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n         //console.log(this.shapes.length);\r\n           this.triangles[index].draggable=true;\r\n        let v=0;\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.triangles[index].x)\r\n              {\r\n                if(this.shapes[i].y===this.triangles[index].y)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[index].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[index].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[index].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n        // console.log(v);\r\n        console.log(this.shapes)\r\n        console.log(this.triangles)\r\n\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n        }\r\n      if(this.resiz)\r\n      {\r\n           this.tridialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n      }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n             // console.log(this.shapes);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                if(this.shapes[i].x===this.circles[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.circles[index].y)\r\n            { \r\n                if(this.shapes[i].radius===this.circles[index].radius)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.circles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.circles[index].stroke)\r\n                      {\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n         \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n         this.circdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n      }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.lines[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.lines[index].y)\r\n            { \r\n          \r\n\r\n\r\n                       \r\n                               \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                              \r\n\r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.rectangles[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.rectangles[index].y)\r\n            { \r\n                if(this.shapes[i].width===this.rectangles[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.rectangles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.rectangles[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.rectangles[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.rectcdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n        \r\n         \r\n      }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.ellipses[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.ellipses[index].y)\r\n            { \r\n                if(this.shapes[i].radiusX===this.ellipses[index].radiusX)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.ellipses[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.ellipses[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].radiusY===this.ellipses[index].radiusY)\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n       \r\n        }\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n         this.elpsdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n      }\r\n                if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n        /**************************************************** */\r\n     else if(type==='square')\r\n     {\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.squares[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.squares[index].y)\r\n            { \r\n                if(this.shapes[i].width===this.squares[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.sqrdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n        \r\n      }\r\n     // this.squares[index].fill = this.selectedColor;\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n              this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    move()\r\n    {\r\n      this.mov=true;\r\n    },\r\n    \r\n    \r\n      startDrawing() {\r\n     if(this.rectangle===true)\r\n      {\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 0,\r\n            height: 0,\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ===true){\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 0,\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips===true)\r\n      {\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 0,\r\n              radiusY:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin===true)\r\n      {\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt===true)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 0,\r\n            height: 0,\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\r\n  \r\n     \r\n      \r\n    \r\n    },\r\n    stopDrawing() {\r\n      \r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin||this.bru)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n\r\n\r\n\r\n        this.currentShape = null;\r\n        this.circ=false;\r\n        this.ellips=false;\r\n        this.rectangle=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.mov = false;\r\n        this.bru=false;\r\n      }\r\n     \r\n      \r\n      \r\n    \r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    draw() {\r\n      if(this.rectangle)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.y - this.currentShape.y;\r\n          }\r\n        }\r\n      }\r\n      }\r\n    //--------------------------------------------------------------------------------\r\n      else if(this.circ)\r\n      {\r\n          if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radius = Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************************************************************************** */\r\n      else if(this.ellips)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\r\n            this.currentShape.radiusY=Math.abs(position.y - this.currentShape.y);\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.lin)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n             this.currentShape.points[2] = position.x - this.currentShape.x;\r\n          this.currentShape.points[3] = position.y - this.currentShape.y;\r\n           \r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.sqrt)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.x - this.currentShape.x;\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************ **/\r\n      else if(this.tria)\r\n      {\r\n             if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n           \r\n            this.currentShape.radius=Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      \r\n    },\r\n\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){ \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\nthis.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n          if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      \r\n\r\n      }\r\n      if(this.lodxml){\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n           this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n    }\r\n\r\n      },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n        \r\n\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\n\r\n    async undo()\r\n    {\r\n      \r\n      if(this.un!==0)\r\n      {\r\n               await fetch('http://localhost:8080/undo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n          this.un--;\r\n            this.re++;\r\n      }\r\n      \r\n    },\r\n     async Redo()\r\n    {\r\n     \r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n  .hover-animation {\r\n    transition: transform 0.2s ease-in-out;\r\n  }\r\n  \r\n  .hover-animation:hover {\r\n    animation: bounce 0.6s ease infinite;\r\n  }\r\n  \r\n  @keyframes bounce {\r\n    0%, 20%, 50%, 80%, 100% {\r\n      transform: translateY(0);\r\n    }\r\n    40% {\r\n      transform: translateY(-15px);\r\n    }\r\n    60% {\r\n      transform: translateY(-10px);\r\n    }\r\n  }\r\n  .paint{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  }\r\n  .header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap:0px;\r\n  \r\n  }\r\n  .operations{\r\n    display: flex;\r\n    gap: 10px;\r\n    align-content: center;\r\n    margin:10px;\r\n    margin:  2px auto;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  \r\n  }\r\n  .clorfil{\r\n    margin-right: 5px;\r\n    width:250px;\r\n    border-radius:20px;\r\n    \r\n  }\r\n  .bordshaps{\r\n    height: 260px;\r\n    margin: 3px;\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: #00CCCC  ;\r\n    border-color: #00CCCC;\r\n    background-color: #00CCCC;\r\n    border-radius:20px;\r\n    margin:   auto 2px;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    \r\n  }\r\n  .rotate-animation {\r\n    background-color: #00CCCC;\r\n    color: #fff;\r\n    border: 1px solid #00CCCC;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: transform 0.3s ease-in-out;\r\n  }\r\n  \r\n  .rotate-animation:hover{\r\n    background-color: #008080;\r\n  }\r\n\r\n  .rotate-animation:hover {\r\n    transform: rotate(360deg);\r\n  }\r\n  \r\n  .shaps{\r\n    /* margin-right: 30px; */\r\n    /* padding: 20px; */\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: space-between;\r\n    gap: 20px;\r\n    \r\n  } \r\n  label{\r\n    opacity: 0.7;\r\n    font-weight: bold;\r\n    color: aliceblue;\r\n    \r\n  }\r\n  .block{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 5px;\r\n  }\r\n  v-btn:hover {\r\n    cursor: pointer;\r\n  }\r\n  label:hover{\r\n    opacity: 100;\r\n    color: aliceblue;\r\n  \r\n  }\r\n  .square {\r\n    height: 20px;\r\n    width: 20px;\r\n    border: black solid;\r\n  }\r\n  .rectengle {\r\n    height: 15px;\r\n    width: 25px;\r\n    border: black solid;\r\n  }\r\n\r\n  .circle {\r\n    height: 25px;\r\n    width: 25px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .circle1{\r\n    height: 50px;\r\n    width: 50px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .oval {\r\n    height:20px;\r\n    width: 30px;\r\n    border: black solid;\r\n    \r\n    border-radius: 50%;\r\n  }\r\n  .triangle-up {\r\n      width: 0;\r\n      height: 0;\r\n      border-left: 9px solid transparent;\r\n      border-right: 9px solid transparent;\r\n      border-bottom: 20px solid #555;\r\n  }\r\n  .line{\r\n      border-left: 1px solid transparent;\r\n      border-bottom:18px solid #555;\r\n  }\r\n  .color{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-bottom: 10px;\r\n  \r\n  }\r\n  .fillcolor{\r\n    margin-top: 4px;\r\n    height: 30px;\r\n    width:30px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n  \r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}