{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//import Konva from 'konva';\n\nimport { ref } from \"vue\";\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      value: null,\n      selectedColor: '',\n      selectedColor2: '',\n      selectedColor3: '',\n      selectedColor4: '',\n      selectedColor5: '',\n      able: false,\n      configKonva: {\n        width: 1350,\n        height: 800\n      },\n      pureColor: '#ffffff',\n      // Selected fill color\n      pureColor2: '#000000',\n      // Selected edge color\n      isdraw: false,\n      rectangles: [],\n      squares: [],\n      lines: [],\n      circles: [],\n      ellipses: [],\n      triangles: [],\n      rectangle: false,\n      circ: false,\n      ellips: false,\n      lin: false,\n      sqrt: false,\n      tria: false,\n      bru: false,\n      delete: false,\n      mov: false,\n      cofill: false,\n      coledge: false,\n      currentShape: null,\n      shapes: [],\n      selectedShapeName: '',\n      resiz: false,\n      userInput: 0,\n      userInput1: 0,\n      userInput2: 0,\n      sav: false,\n      path: \"\",\n      shapeType: '',\n      aply: false,\n      ind: 0,\n      typ: '',\n      ord: null,\n      modifysh: null,\n      cop: false,\n      co: null,\n      cc: null,\n      vv: null,\n      tridialog: false,\n      sqrdialog: false,\n      circdialog: false,\n      rectcdialog: false,\n      elpsdialog: false,\n      savdialog: false,\n      savjason: false,\n      savxml: false,\n      pathdialog: false,\n      loaddialog: false,\n      pathloaddialog: false,\n      lodjason: false,\n      lodxml: false,\n      un: 0,\n      re: 0,\n      length: 250,\n      clickedPoints: [],\n      linedialog: false,\n      userInputx: 0,\n      userInputy: 0,\n      x0: 0,\n      y0: 0\n    };\n  },\n  methods: {\n    setup() {\n      const pureColor = ref < ColorInputWithoutInstance > \"red\";\n      return {\n        pureColor\n      };\n    },\n    handleClick() {\n      // Get the Konva stage\n      const stage = this.$refs.stage.getStage();\n\n      // Get the pointer position\n      const position = stage.getPointerPosition();\n\n      // Check if the position is available\n      if (position) {\n        // Extract the coordinates\n        const {\n          x,\n          y\n        } = position;\n\n        // Add the coordinates to the array\n        this.clickedPoints.push({\n          x,\n          y\n        });\n\n        //  console.log(this.clickedPoints)\n        // Log the coordinates and array information\n        // console.log(Position: (${x}, ${y}));\n        //  console.log('lenth', this.clickedPoints.length);\n      }\n    },\n\n    allowmove() {\n      this.able = true;\n    },\n    aplly() {\n      this.un++;\n      let v = 0;\n      let t = null;\n      let g = null;\n      switch (this.typ) {\n        case 'line':\n          for (let i = 0; i < this.shapes.length; i++) {\n            if (this.shapes[i] !== null) {\n              if (this.shapes[i].x === this.lines[this.ind].x) {\n                if (this.shapes[i].y === this.lines[this.ind].y) {\n                  if (this.shapes[i].points[0] === this.lines[this.ind].points[0]) {\n                    if (this.shapes[i].points[1] === this.lines[this.ind].points[1]) {\n                      if (this.shapes[i].points[2] === this.lines[this.ind].points[2]) {\n                        if (this.shapes[i].points[3] === this.lines[this.ind].points[3]) {\n                          v = i;\n                          console.log(v);\n                          break;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          this.userInputx = document.getElementById('point1').value;\n          this.userInputy = document.getElementById('point2').value;\n          this.lines[this.ind].x = t;\n          this.lines[this.ind].y = g;\n          this.lines[this.ind].points[0] = this.x0;\n          this.lines[this.ind].points[1] = this.y0;\n          this.lines[this.ind].points[2] = this.userInputx - t;\n          this.lines[this.ind].points[3] = this.userInputy - g;\n          this.shapes[v].points[2] = this.userInputx;\n          this.shapes[v].points[3] = this.userInputy;\n          this.linedialog = !this.linedialog;\n          this.resiz = !this.resiz;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.userInputx = 0;\n          this.userInputy = 0;\n          this.modify();\n          break;\n        case 'triangle':\n          this.shapeType = \"Triangle\";\n          for (let i = 0; i < this.shapes.length; i++) {\n            if (this.shapes[i] !== null) {\n              if (this.shapes[i].x === this.triangles[this.ind].x) {\n                if (this.shapes[i].y === this.triangles[this.ind].y) {\n                  if (this.shapes[i].radius === this.triangles[this.ind].radius) {\n                    if (this.shapes[i].fill === this.triangles[this.ind].fill) {\n                      if (this.shapes[i].stroke === this.triangles[this.ind].stroke) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          this.userInput = document.getElementById('size').value;\n          this.triangles[this.ind].radius = this.userInput;\n          this.shapes[v].radius = this.userInput;\n          this.userInput = 0;\n          this.tridialog = !this.tridialog;\n          this.resiz = !this.resiz;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n          break;\n        case 'circle':\n          this.shapeType = \"Circle\";\n          for (let i = 0; i < this.shapes.length; i++) {\n            if (this.shapes[i] !== null) {\n              if (this.shapes[i].x === this.circles[this.ind].x) {\n                if (this.shapes[i].y === this.circles[this.ind].y) {\n                  if (this.shapes[i].radius === this.circles[this.ind].radius) {\n                    if (this.shapes[i].fill === this.circles[this.ind].fill) {\n                      if (this.shapes[i].stroke === this.circles[this.ind].stroke) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          this.userInput = document.getElementById('sizec').value;\n          this.circles[this.ind].radius = this.userInput;\n          this.shapes[v].radius = this.userInput;\n          this.circdialog = !this.circdialog;\n          this.userInput = 0;\n          this.resiz = !this.resiz;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n          break;\n        case 'rect':\n          this.shapeType = \"Rectangle\";\n          for (let i = 0; i < this.shapes.length; i++) {\n            if (this.shapes[i] !== null) {\n              if (this.shapes[i].x === this.rectangles[this.ind].x) {\n                if (this.shapes[i].y === this.rectangles[this.ind].y) {\n                  if (this.shapes[i].width === this.rectangles[this.ind].width) {\n                    if (this.shapes[i].fill === this.rectangles[this.ind].fill) {\n                      if (this.shapes[i].stroke === this.rectangles[this.ind].stroke) {\n                        if (this.shapes[i].height === this.rectangles[this.ind].height) {\n                          v = i;\n                          console.log(v);\n                          break;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          this.userInput1 = document.getElementById('size1').value;\n          this.userInput2 = document.getElementById('size2').value;\n          this.rectangles[this.ind].width = this.userInput1;\n          this.rectangles[this.ind].height = this.userInput2;\n          this.shapes[v].width = this.userInput1;\n          this.shapes[v].height = this.userInput2;\n          this.rectcdialog = !this.rectcdialog;\n          this.resiz = !this.resiz;\n          this.userInput = 0;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n          break;\n        case 'ellipse':\n          this.shapeType = \"Ellipse\";\n          for (let i = 0; i < this.shapes.length; i++) {\n            if (this.shapes[i] !== null) {\n              if (this.shapes[i].x === this.ellipses[this.ind].x) {\n                if (this.shapes[i].y === this.ellipses[this.ind].y) {\n                  if (this.shapes[i].radiusX === this.ellipses[this.ind].radiusX) {\n                    if (this.shapes[i].fill === this.ellipses[this.ind].fill) {\n                      if (this.shapes[i].stroke === this.ellipses[this.ind].stroke) {\n                        if (this.shapes[i].radiusY === this.ellipses[this.ind].radiusY) v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          console.log(v);\n          this.userInput1 = document.getElementById('sizex').value;\n          this.userInput2 = document.getElementById('sizey').value;\n          this.ellipses[this.ind].radiusX = this.userInput1;\n          this.ellipses[this.ind].radiusY = this.userInput2;\n          this.shapes[v].radiusX = this.userInput1;\n          this.shapes[v].radiusY = this.userInput2;\n          this.elpsdialog = !this.elpsdialog;\n          this.resiz = !this.resiz;\n          this.userInput = 0;\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n          break;\n        case 'square':\n          this.shapeType = \"Square\";\n          for (let i = 0; i < this.shapes.length; i++) {\n            if (this.shapes[i] !== null) {\n              if (this.shapes[i].x === this.squares[this.ind].x) {\n                if (this.shapes[i].y === this.squares[this.ind].y) {\n                  if (this.shapes[i].width === this.squares[this.ind].width) {\n                    if (this.shapes[i].fill === this.squares[this.ind].fill) {\n                      if (this.shapes[i].stroke === this.squares[this.ind].stroke) {\n                        if (this.shapes[i].height === this.squares[this.ind].height) {\n                          v = i;\n                          console.log(v);\n                          break;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          this.userInput1 = document.getElementById('sizeq').value;\n          this.squares[this.ind].width = this.userInput1;\n          this.squares[this.ind].height = this.userInput1;\n          this.shapes[v].width = this.userInput1;\n          this.shapes[v].height = this.userInput1;\n          this.sqrdialog = !this.sqrdialog;\n          this.resiz = !this.resiz;\n          this.userInput = 0;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n      }\n    },\n    oldpo(type, index) {\n      if (type === 'triangle') {\n        this.cc = this.triangles[index].x;\n        this.vv = this.triangles[index].y;\n      } else if (type === 'rect') {\n        this.cc = this.rectangles[index].x;\n        this.vv = this.rectangles[index].y;\n      } else if (type === 'line') {\n        this.cc = this.lines[index].x;\n        this.vv = this.lines[index].y;\n      } else if (type === 'ellipse') {\n        this.cc = this.ellipses[index].x;\n        this.vv = this.ellipses[index].y;\n      } else if (type === 'square') {\n        this.cc = this.squares[index].x;\n        this.vv = this.squares[index].y;\n      } else if (type === 'circle') {\n        this.cc = this.circles[index].x;\n        this.vv = this.circles[index].y;\n      }\n    },\n    newpo(type, index, e) {\n      this.un++;\n      this.able = false;\n      var v = 0;\n      if (type === 'circle') {\n        this.shapeType = \"Circle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radius === this.circles[index].radius) {\n                  if (this.shapes[i].fill === this.circles[index].fill) {\n                    if (this.shapes[i].stroke === this.circles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.circles[index].x = e.target.x();\n        this.circles[index].y = e.target.y();\n        this.shapes[v].x = this.circles[index].x;\n        this.shapes[v].y = this.circles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.shapes[v]);\n        console.log(this.circles[index].x);\n        console.log(this.circles[index].y);\n      }\n      if (type === 'rect') {\n        this.shapeType = \"Rectangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].width === this.rectangles[index].width) {\n                  if (this.shapes[i].fill === this.rectangles[index].fill) {\n                    if (this.shapes[i].stroke === this.rectangles[index].stroke) {\n                      if (this.shapes[i].height === this.rectangles[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.rectangles[index].x = e.target.x();\n        this.rectangles[index].y = e.target.y();\n        this.shapes[v].x = this.rectangles[index].x;\n        this.shapes[v].y = this.rectangles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.rectangles[index].x);\n        console.log(this.rectangles[index].y);\n      }\n      if (type === 'ellipse') {\n        this.shapeType = \"Ellipse\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radiusX === this.ellipses[index].radiusX) {\n                  if (this.shapes[i].fill === this.ellipses[index].fill) {\n                    if (this.shapes[i].stroke === this.ellipses[index].stroke) {\n                      if (this.shapes[i].radiusY === this.ellipses[index].radiusY) v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.ellipses[index].x = e.target.x();\n        this.ellipses[index].y = e.target.y();\n        this.shapes[v].x = this.ellipses[index].x;\n        this.shapes[v].y = this.ellipses[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.ellipses[index].x);\n        console.log(this.ellipses[index].y);\n      }\n      if (type === 'line') {\n        this.shapeType = \"Line\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                v = i;\n                console.log(v);\n                break;\n              }\n            }\n          }\n        }\n        this.lines[index].x = e.target.x();\n        this.lines[index].y = e.target.y();\n        this.shapes[v].x = this.lines[index].x;\n        this.shapes[v].y = this.lines[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.lines[index].x);\n        console.log(this.lines[index].y);\n      }\n      if (type === 'square') {\n        this.shapeType = \"Square\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].width === this.squares[index].width) {\n                  if (this.shapes[i].fill === this.squares[index].fill) {\n                    if (this.shapes[i].stroke === this.squares[index].stroke) {\n                      if (this.shapes[i].height === this.squares[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.squares[index].x = e.target.x();\n        this.squares[index].y = e.target.y();\n        this.shapes[v].x = this.squares[index].x;\n        this.shapes[v].y = this.squares[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.squares[index].x);\n        console.log(this.squares[index].y);\n      }\n      if (type === 'triangle') {\n        this.shapeType = \"Triangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radius === this.triangles[index].radius) {\n                  if (this.shapes[i].fill === this.triangles[index].fill) {\n                    if (this.shapes[i].stroke === this.triangles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        console.log(v);\n        this.triangles[index].x = e.target.x();\n        this.triangles[index].y = e.target.y();\n        this.shapes[v].x = this.triangles[index].x;\n        this.shapes[v].y = this.triangles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.triangles[index].x);\n        console.log(this.triangles[index].y);\n      }\n    },\n    rect() {\n      this.rectangle = true;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    brush() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = true;\n    },\n    ellipse() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = true;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    circle() {\n      this.rectangle = false;\n      this.circ = true;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    line() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = true;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    square() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = true;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    triangle() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = true;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    fill() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = true;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    edge() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = true;\n      this.bru = false;\n    },\n    async clr() {\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      this.shapes = [];\n      this.un = 0;\n      this.re = 0;\n      await fetch('http://localhost:8080/clear', {\n        method: 'GET'\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    resize() {\n      this.resiz = true;\n    },\n    copy() {\n      this.cop = true;\n    },\n    async shapeClicked(type, index) {\n      if (type === 'triangle') {\n        this.shapeType = \"Triangle\";\n        console.log(index);\n        //console.log(this.shapes.length);\n        this.triangles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.triangles[index].x) {\n              if (this.shapes[i].y === this.triangles[index].y) {\n                if (this.shapes[i].radius === this.triangles[index].radius) {\n                  if (this.shapes[i].fill === this.triangles[index].fill) {\n                    if (this.shapes[i].stroke === this.triangles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        // console.log(v);\n        console.log(this.shapes);\n        console.log(this.triangles);\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.triangles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.tridialog = true;\n          this.ind = index;\n          this.typ = type;\n        }\n        if (this.delete) {\n          this.un++;\n          this.triangles.splice(index, 1);\n          // console.log(this.shapes);\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n          this.delete = false;\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.triangles[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.triangles[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.triangles[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n\n        /*********************************************************************** */\n      } else if (type === 'circle') {\n        this.shapeType = \"Circle\";\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.circles[index].x) {\n              if (this.shapes[i].y === this.circles[index].y) {\n                if (this.shapes[i].radius === this.circles[index].radius) {\n                  if (this.shapes[i].fill === this.circles[index].fill) {\n                    if (this.shapes[i].stroke === this.circles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.circles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.circdialog = true;\n          this.ind = index;\n          this.typ = type;\n        }\n        if (this.delete) {\n          this.un++;\n          this.circles.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.circles[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.circles[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.circles[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      } else if (type === 'line') {\n        let v = 0;\n        this.shapeType = \"Line\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.lines[index].x) {\n              if (this.shapes[i].y === this.lines[index].y) {\n                if (this.shapes[i].points[0] === this.lines[index].points[0]) {\n                  if (this.shapes[i].points[1] === this.lines[index].points[1]) {\n                    if (this.shapes[i].points[2] === this.lines[index].points[2]) {\n                      if (this.shapes[i].points[3] === this.lines[index].points[3]) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.resiz) {\n          //  let r=this.clickedPoints.length ;\n          //   this.lines[index].points[2]=this.clickedPoints[r-2].x;\n          //   this.lines[index].points[3]=this.clickedPoints[r-2].y;\n\n          //   this.lines.push({...this.lines[index]})\n          //   this.shapes[v].points[2]=this.clickedPoints[r-2].x-this.lines[index].x;\n\n          //   this.shapes[v].points[3]=this.clickedPoints[r-2].y-this.lines[index].y;\n\n          this.x0 = this.lines[index].x;\n          this.y0 = this.lines[index].y;\n          this.linedialog = true;\n          this.ind = index;\n          this.typ = type;\n          // this.modifysh=this.shapes[v];\n          //         this.ord=v;\n          //         this.modify();\n          // this.resiz=false;\n        }\n\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.lines.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.delete) {\n          this.un++;\n          this.lines.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v].stroke = this.lines[index].stroke;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /************************************************************ */else if (type === 'rect') {\n        let v = 0;\n        this.shapeType = \"Rectangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.rectangles[index].x) {\n              if (this.shapes[i].y === this.rectangles[index].y) {\n                if (this.shapes[i].width === this.rectangles[index].width) {\n                  if (this.shapes[i].fill === this.rectangles[index].fill) {\n                    if (this.shapes[i].stroke === this.rectangles[index].stroke) {\n                      if (this.shapes[i].height === this.rectangles[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.rectangles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.rectcdialog = true;\n          this.ind = index;\n          this.typ = type;\n        }\n        if (this.delete) {\n          this.un++;\n          this.rectangles.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          //selectedFillColor=this.pureColor\n          this.shapes[v].fill = this.rectangles[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.rectangles[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /*************************************************************** */else if (type === 'ellipse') {\n        let v = 0;\n        this.shapeType = \"Ellipse\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.ellipses[index].x) {\n              if (this.shapes[i].y === this.ellipses[index].y) {\n                if (this.shapes[i].radiusX === this.ellipses[index].radiusX) {\n                  if (this.shapes[i].fill === this.ellipses[index].fill) {\n                    if (this.shapes[i].stroke === this.ellipses[index].stroke) {\n                      if (this.shapes[i].radiusY === this.ellipses[index].radiusY) v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.ellipses.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.elpsdialog = true;\n          this.ind = index;\n          this.typ = type;\n        }\n        if (this.delete) {\n          this.un++;\n          this.ellipses.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor;\n          this.ellipses[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.ellipses[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff';\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.ellipses[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /**************************************************** */else if (type === 'square') {\n        let v = 0;\n        this.shapeType = \"Square\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.squares[index].x) {\n              if (this.shapes[i].y === this.squares[index].y) {\n                if (this.shapes[i].width === this.squares[index].width) {\n                  if (this.shapes[i].fill === this.squares[index].fill) {\n                    if (this.shapes[i].stroke === this.squares[index].stroke) {\n                      if (this.shapes[i].height === this.squares[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.un++;\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.squares.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.sqrdialog = true;\n          this.ind = index;\n          this.typ = type;\n        }\n        // this.squares[index].fill = this.selectedColor;\n        if (this.delete) {\n          this.un++;\n          this.squares.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          this.un++;\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.shapes[v].fill = this.squares[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          this.un++;\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v].stroke = this.squares[index].stroke;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n    },\n    del() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = true;\n      this.coledge = false;\n      this.bru = false;\n    },\n    move() {\n      this.mov = true;\n    },\n    startDrawing() {\n      if (this.rectangle === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              width: 0,\n              height: 0\n            };\n            console.log(this.currentShape.x);\n            console.log(this.currentShape.y);\n          }\n        }\n      } else if (this.circ === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radius: 0\n            };\n          }\n        }\n      } else if (this.ellips === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radiusX: 0,\n              radiusY: 0\n            };\n          }\n        }\n      } else if (this.lin === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              stroke: this.pureColor2,\n              strokeWidth: 4,\n              points: [0, 0]\n            };\n          }\n        }\n      } else if (this.sqrt === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              width: 0,\n              height: 0\n            };\n          }\n        }\n      } else if (this.tria) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 0\n            };\n          }\n        }\n      }\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\n    },\n\n    stopDrawing() {\n      this.un++;\n      if (this.isdraw) {\n        this.isdraw = false;\n        console.log(\"xxxxx\");\n        if (this.circ) {\n          this.shapeType = 'Circle';\n          this.circles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.rectangle) {\n          this.shapeType = 'Rectangle';\n          this.rectangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.ellips) {\n          this.shapeType = 'Ellipse';\n          this.ellipses.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.lin || this.bru) {\n          this.shapeType = 'Line';\n          this.lines.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.sqrt) {\n          this.shapeType = 'Square';\n          this.squares.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.tria) {\n          this.shapeType = 'Triangle';\n          this.triangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        }\n        this.createShape();\n        this.currentShape = null;\n        this.circ = false;\n        this.ellips = false;\n        this.rectangle = false;\n        this.lin = false;\n        this.sqrt = false;\n        this.tria = false;\n        this.mov = false;\n        this.bru = false;\n      }\n    },\n    async createShape() {\n      await fetch('http://localhost:8080/create', {\n        method: 'POST',\n        body: this.shapeType + JSON.stringify(this.currentShape)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async modify() {\n      await fetch('http://localhost:8080/modify', {\n        method: 'POST',\n        body: this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async prototype() {\n      await fetch('http://localhost:8080/copy', {\n        method: 'POST',\n        body: this.ord\n      }).then(res => res.json()).then(data => this.co = data);\n      console.log(this.co);\n    },\n    async modify2() {\n      await fetch('http://localhost:8080/delete', {\n        method: 'POST',\n        body: this.ord + \",\" + this.shapeType\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    draw() {\n      if (this.rectangle) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.y - this.currentShape.y;\n            }\n          }\n        }\n      }\n      //--------------------------------------------------------------------------------\n      else if (this.circ) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n      //************************************************************************************************** */\n      else if (this.ellips) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\n              this.currentShape.radiusY = Math.abs(position.y - this.currentShape.y);\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.lin) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.points[2] = position.x - this.currentShape.x;\n              this.currentShape.points[3] = position.y - this.currentShape.y;\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.sqrt) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.x - this.currentShape.x;\n            }\n          }\n        }\n      }\n      //************************************ **/\n      else if (this.tria) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n    },\n    async saving() {\n      console.log(this.savejason);\n      if (this.savjason) {\n        await fetch('http://localhost:8080/saveJson', {\n          method: 'POST',\n          body: this.path + \".json\"\n        }).catch(error => {\n          console.error('Fetch error:', error);\n        });\n      }\n      if (this.savxml) {\n        await fetch('http://localhost:8080/saveXml', {\n          method: 'POST',\n          body: this.path + \".xml\"\n        }).catch(error => {\n          console.error('Fetch error:', error);\n        });\n        console.log(this.savexml);\n      }\n    },\n    async loading() {\n      if (this.lodjason) {\n        await fetch('http://localhost:8080/loadJson', {\n          method: 'POST',\n          body: this.path + \".json\"\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n      }\n      if (this.lodxml) {\n        await fetch('http://localhost:8080/loadXml', {\n          method: 'POST',\n          body: this.path + \".xml\"\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n      }\n    },\n    savejason() {\n      this.savjason = true;\n      this.savxml = false;\n    },\n    savexml() {\n      this.savxml = true;\n      this.savjason = false;\n    },\n    submity() {\n      this.savdialog = false;\n      this.pathdialog = true;\n    },\n    ok() {\n      this.loaddialog = false;\n      this.pathloaddialog = true;\n    },\n    save() {\n      this.saving();\n      this.savdialog = true;\n    },\n    send() {\n      var str = document.getElementById('path').value;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] == '\\\\') {\n          this.path += '\\\\';\n        }\n        this.path += str[i];\n      }\n      console.log(this.savjason);\n      console.log(this.savxml);\n      console.log(this.path);\n      this.pathdialog = false;\n      this.saving();\n      this.savjaso = false;\n      this.savxml = false;\n      this.path = \"\";\n    },\n    laod() {\n      this.loaddialog = true;\n    },\n    loadjason() {\n      this.lodjason = true;\n      this.lodxml = false;\n    },\n    loadxml() {\n      this.lodxml = true;\n      this.lodjason = false;\n    },\n    open() {\n      var str = document.getElementById('pathload').value;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] == '\\\\') {\n          this.path += '\\\\';\n        }\n        this.path += str[i];\n      }\n      console.log(this.lodjason);\n      console.log(this.lodxml);\n      console.log(this.path);\n      this.pathloaddialog = false;\n      this.loading();\n      this.lodjason = false;\n      this.lodxml = false;\n      this.path = \"\";\n    },\n    async undo() {\n      if (this.un !== 0) {\n        await fetch('http://localhost:8080/undo', {\n          method: 'GET'\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n        this.un--;\n        this.re++;\n      }\n    },\n    async Redo() {\n      if (this.re !== 0) {\n        await fetch('http://localhost:8080/redo', {\n          method: 'GET'\n        }).then(res => res.json()).then(data => this.shapes = data);\n        console.log(this.shapes);\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].type === 'Rectangle') {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Square') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n        this.re--;\n        this.un++;\n      }\n    }\n  }\n};","map":{"version":3,"names":["ref","ColorInputWithoutInstance","name","data","value","selectedColor","selectedColor2","selectedColor3","selectedColor4","selectedColor5","able","configKonva","width","height","pureColor","pureColor2","isdraw","rectangles","squares","lines","circles","ellipses","triangles","rectangle","circ","ellips","lin","sqrt","tria","bru","delete","mov","cofill","coledge","currentShape","shapes","selectedShapeName","resiz","userInput","userInput1","userInput2","sav","path","shapeType","aply","ind","typ","ord","modifysh","cop","co","cc","vv","tridialog","sqrdialog","circdialog","rectcdialog","elpsdialog","savdialog","savjason","savxml","pathdialog","loaddialog","pathloaddialog","lodjason","lodxml","un","re","length","clickedPoints","linedialog","userInputx","userInputy","x0","y0","methods","setup","handleClick","stage","$refs","getStage","position","getPointerPosition","x","y","push","allowmove","aplly","v","t","g","i","points","console","log","document","getElementById","modify","radius","fill","stroke","radiusX","radiusY","oldpo","type","index","newpo","e","target","rect","brush","ellipse","circle","line","square","triangle","edge","clr","fetch","method","catch","error","resize","copy","shapeClicked","draggable","prototype","splice","modify2","selectedFillColor","selectedEdgeColor","del","move","startDrawing","strokeWidth","stopDrawing","createShape","body","JSON","stringify","then","res","json","draw","Math","pow","abs","saving","savejason","savexml","loading","submity","ok","save","send","str","savjaso","laod","loadjason","loadxml","open","undo","Redo"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"appaint\" style=\"border:solid black 2px; width:1500px; background-color:#00091A ;\">\r\n    <div class=\"header\">\r\n  <div class=\"operations\" >\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"laod()\">open <i class=\"fa-solid fa-folder-open\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"undo()\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"Redo()\">Redo <i class=\"fa-solid fa-rotate-right\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"copy()\">copy <i class=\"fa-solid fa-copy\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" for=\"userInput\"  style=\"background-color:#00CCCC\" @click=\"resize() \">resize <i class=\"fa fa-expand\" aria-hidden=\"true\"></i> </v-btn>\r\n    <v-btn class=\"rotate-animation\" for=\"userInput\"  style=\"background-color:#00CCCC\" @click=\"allowmove() \">move <i class=\"fa-solid fa-arrows-up-down-left-right\"></i> </v-btn>\r\n      <v-dialog width=\"400\" class=\"triangle\" v-model=\"tridialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>This triangle is equilateral. Please enter side length </v-card-subtitle>\r\n        <input type=\"text\" value=\"0\" id=\"size\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"triangle\" v-model=\"circdialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>Enter the radius </v-card-subtitle>\r\n        <input type=\"text\" value=\"0\" id=\"sizec\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"rectangle\" v-model=\"rectcdialog\">/\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>enter size of your rectangle  </v-card-subtitle>\r\n          <label for=\"size1\">width</label>\r\n          <input type=\"text\" value=\"0\" id=\"size1\" autofocus>\r\n          <label for=\"size2\">height</label>\r\n          <input type=\"text\" value=\"0\" id=\"size2\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"ellips\" v-model=\"elpsdialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle>size of your ellips </v-card-subtitle>\r\n          <label for=\"sizex\">length X</label>\r\n          <input type=\"text\" value=\"0\" id=\"sizex\" autofocus>\r\n          <label for=\"sizey\">length Y</label>\r\n          <input type=\"text\" value=\"0\" id=\"sizey\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"triangle\" v-model=\"sqrdialog\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>resize your shape</v-card-title>\r\n          <v-card-subtitle> Enter the side length</v-card-subtitle>\r\n        <input type=\"text\" value=\"0\" id=\"sizeq\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>save</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of saving</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>Open</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of file</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n        <v-dialog width=\"400\" class=\"triangle\" v-model=\"linedialog\">\r\n              <v-card variant=\"outlined\">\r\n                <v-card-title>resize your shape</v-card-title>\r\n                <v-card-subtitle> Enter the secound point</v-card-subtitle>\r\n                <label for=\"point1\">X2</label>\r\n              <input type=\"text\" value=\"0\" id=\"point1\" autofocus>\r\n              <label for=\"point2\">Y2</label>\r\n              <input type=\"text\" value=\"0\" id=\"point2\" autofocus>\r\n                <v-card-actions >\r\n                  <v-btn  variant=\"outlined\" @click=\"aplly() \">apply</v-btn>\r\n                </v-card-actions>\r\n              </v-card>\r\n            </v-dialog>\r\n\r\n\r\n\r\n  </div>\r\n  <div class=\"clorfil\" >\r\n    <div class=\"block\">\r\n      <div class=\"fillcolor\">\r\n        <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n    </div>\r\n      <v-btn class=\"rotate-animation\" @click=\"fill()\" style=\"background-color:#00CCCC\">fill<i class=\"fa-solid fa-fill-drip\"></i></v-btn>\r\n      <v-btn class=\"rotate-animation\" @click=\"edge()\" style=\"background-color:#00CCCC\">border<i class=\"fa-solid fa-paintbrush\"></i></v-btn>\r\n    \r\n  </div>\r\n  </div>\r\n</div>\r\n \r\n  <div class=\"paint\">\r\n   \r\n    <div class=\"bordshaps\" >\r\n     \r\n    <div class=\"shaps\">\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"square()\" ><div class=\"square rotate-animation\"></div></v-btn>\r\n     <label >square</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"rect()\" ><div class=\"rectengle rotate-animation\"></div></v-btn>\r\n     <label >rectengle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n        <v-btn style=\"background-color:#00CCCC\"  class=\"rotate-animation\" @click=\"circle()\" ><div class=\"circle rotate-animation\"></div></v-btn>\r\n     <label >circle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"triangle()\" ><div class=\"triangle-up rotate-animation\"></div></v-btn>\r\n     <label >triangle</label>\r\n    </div>\r\n    <div class=\"block\">\r\n      <v-btn style=\"background-color:#00CCCC\" @click=\"ellipse()\"><div class=\"oval rotate-animation\"></div></v-btn>\r\n      <label >ellips</label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <v-btn  class=\"rotate-animation\" @click=\"line()\" style=\"width:30px; background-color:#00CCCC\"><i class=\"fa-solid fa-lines-leaning\"></i></v-btn>\r\n      <label >line</label>\r\n     </div>\r\n    </div>\r\n  </div>\r\n    <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n  <v-stage :config=\"configKonva\" ref=\"stage\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" \r\n     @click=\"handleClick\">\r\n    <v-layer>\r\n      <v-rect\r\n   v-for=\"(square, index) in squares\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'square',\r\n           x: square.x,\r\n          y: square.y,\r\n          width: square.width,\r\n          height: square.height,\r\n          fill: square.fill, // Use the selected fill color\r\n          stroke: square.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:able,\r\n        }\"\r\n      @click=\"shapeClicked('square', index)\"\r\n       @mouseenter=\"oldpo('square', index)\"\r\n      @dragend=\"newpo('square', index, $event)\"   \r\n  >\r\n\r\n  </v-rect>\r\n      <!-- drawing rectangles -->\r\n      <v-rect\r\n       v-for=\"(rect, index) in rectangles\"\r\n        :key=\"index\"\r\n        :config=\"{ \r\n          type:'Rectangle',\r\n          x:  rect.x,\r\n          y: rect.y,\r\n          width: rect.width,\r\n          height: rect.height,\r\n          fill: rect.fill, // Use the selected fill color\r\n          stroke: rect.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:able,\r\n           \r\n       }\"\r\n         \r\n        @click=\"shapeClicked('rect', index) \"\r\n         @mouseenter=\"oldpo('rect', index)\"\r\n       @dragend=\"newpo('rect', index, $event)\"   \r\n      \r\n        \r\n      ></v-rect>\r\n     <!-- drawing circles -->\r\n     <v-circle\r\n      v-for=\"(circle, index) in circles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'circle',\r\n          x: circle.x,\r\n          y: circle.y,\r\n          radius:circle.radius,\r\n          fill:circle.fill,\r\n          stroke:circle.stroke,\r\n          strokeWidth: 2,\r\n          draggable:able,\r\n        }\"\r\n         @click=\"shapeClicked('circle', index)\"\r\n          @mouseenter=\"oldpo('circle', index)\"\r\n         @dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n     </v-circle>\r\n     <!-- drawing ellipses -->\r\n     <v-ellipse\r\n        v-for=\"(ellipse, index) in ellipses\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'ellipse',\r\n          x: ellipse.x,\r\n          y: ellipse.y,\r\n          radiusX:ellipse.radiusX,\r\n          radiusY:ellipse.radiusY,\r\n          fill: ellipse.fill, // Use the selected fill color\r\n          stroke: ellipse.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:able,\r\n        }\"\r\n       @click=\"shapeClicked('ellipse', index)\"\r\n        @mouseenter=\"oldpo('ellipse', index)\"\r\n       @dragend=\"newpo('ellipse', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-ellipse>\r\n     <!-- drawing line segment -->\r\n     <v-line\r\n       v-for=\"(line, index) in lines\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'line',\r\n          x : line.x,\r\n          y : line.y,\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:able,\r\n        }\"\r\n         @click=\"shapeClicked('line', index)\"\r\n          @mouseenter=\"oldpo('line', index)\"\r\n         @dragend=\"newpo('line', index, $event)\"   \r\n     >\r\n\r\n     </v-line>\r\n  <!-- square -->\r\n  \r\n  <v-regular-polygon\r\n   v-for=\"(triangle, index) in triangles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'triangle',\r\n          x: triangle.x,\r\n          y: triangle.y,\r\n          sides:3,\r\n          radius:triangle.radius,\r\n          fill: triangle.fill, \r\n          stroke: triangle.stroke, \r\n          strokeWidth: 2,\r\n          draggable:able,\r\n        }\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @mouseenter=\"oldpo('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\"   \r\n  >\r\n\r\n  </v-regular-polygon>\r\n    \r\n\r\n    </v-layer>\r\n  </v-stage>\r\n</div>\r\n  \r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n//import Konva from 'konva';\r\n\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      able:false,\r\n      configKonva: {\r\n          width: 1350,\r\n          height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      delete:false,\r\n      mov:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedShapeName: '',\r\n     resiz:false,\r\n        userInput:0,\r\n        userInput1:0,\r\n        userInput2:0,\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n        aply:false,\r\n        ind:0,\r\n        typ:'',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n      cc:null,\r\n      vv:null,\r\n      tridialog:false,\r\n        sqrdialog:false,\r\n        circdialog:false,\r\n        rectcdialog:false,\r\n        elpsdialog:false,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        un:0,\r\n        re:0,\r\n        length:250,\r\n        clickedPoints:[],\r\n       linedialog:false,\r\n       userInputx:0,\r\n        userInputy:0,\r\n        x0 : 0,\r\n        y0 : 0\r\n    };\r\n  },\r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n   handleClick() {\r\n      // Get the Konva stage\r\n      const stage = this.$refs.stage.getStage();\r\n\r\n      // Get the pointer position\r\n      const position = stage.getPointerPosition();\r\n\r\n      // Check if the position is available\r\n      if (position) {\r\n        // Extract the coordinates\r\n        const { x, y } = position;\r\n\r\n        // Add the coordinates to the array\r\n        this.clickedPoints.push({ x, y });\r\n\r\n      //  console.log(this.clickedPoints)\r\n        // Log the coordinates and array information\r\n        // console.log(Position: (${x}, ${y}));\r\n       //  console.log('lenth', this.clickedPoints.length);\r\n\r\n      }\r\n    },\r\n    allowmove()\r\n    {\r\n      this.able=true;\r\n    },\r\n\r\n   aplly(){\r\n    this.un++;\r\n    let v=0;\r\n    let t=null;\r\n            let g=null;\r\n        switch(this.typ){\r\n     \r\n         case'line':\r\n\r\n            for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.lines[this.ind].x)\r\n          {\r\n            if(this.shapes[i].y===this.lines[this.ind].y)\r\n            { \r\n               if(this.shapes[i].points[0]===this.lines[this.ind].points[0])\r\n                 {\r\n                 if(this.shapes[i].points[1]===this.lines[this.ind].points[1])\r\n                  {\r\n                  if(this.shapes[i].points[2]===this.lines[this.ind].points[2])\r\n                       {\r\n                          if(this.shapes[i].points[3]===this.lines[this.ind].points[3]){\r\n\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                              \r\n                          }\r\n                       }  \r\n                  }\r\n               }     \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n           this.userInputx = document.getElementById('point1').value;\r\n            this.userInputy = document.getElementById('point2').value;\r\n            \r\n            this.lines[this.ind].x=t;\r\n            this.lines[this.ind].y=g;\r\n\r\n            this.lines[this.ind].points[0]=this.x0;\r\n            this.lines[this.ind].points[1]=this.y0;\r\n\r\n            this.lines[this.ind].points[2]=this.userInputx-t;\r\n            this.lines[this.ind].points[3]=this.userInputy-g;\r\n             this.shapes[v].points[2]=this.userInputx;\r\n              this.shapes[v].points[3]=this.userInputy;\r\n                 this.linedialog=!this.linedialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.userInputx=0;\r\n                  this.userInputy=0;\r\n                  this.modify()\r\n\r\n\r\n\r\n          break;\r\n         \r\n\r\n\r\n\r\n          case 'triangle' :\r\n             this.shapeType = \"Triangle\"\r\n\r\n             for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.triangles[this.ind].x)\r\n              {\r\n                if(this.shapes[i].y===this.triangles[this.ind].y)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[this.ind].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[this.ind].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[this.ind].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n                \r\n\r\n                  this.userInput = document.getElementById('size').value;\r\n                  this.triangles[this.ind].radius=this.userInput;\r\n                  this.shapes[v].radius=this.userInput;\r\n                  this.userInput=0;\r\n                  this.tridialog=!this.tridialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify()\r\n\r\n                   break;\r\n          case 'circle':\r\n                   this.shapeType = \"Circle\"\r\n              \r\n              for(let i=0;i<this.shapes.length;i++)\r\n                {\r\n                  if(this.shapes[i]!==null)\r\n                  {\r\n                        if(this.shapes[i].x===this.circles[this.ind].x)\r\n                  {\r\n                    if(this.shapes[i].y===this.circles[this.ind].y)\r\n                    { \r\n                        if(this.shapes[i].radius===this.circles[this.ind].radius)\r\n                        {\r\n                          \r\n\r\n                          if(this.shapes[i].fill===this.circles[this.ind].fill)\r\n                          {\r\n                              if(this.shapes[i].stroke===this.circles[this.ind].stroke)\r\n                              {\r\n                                    v=i;\r\n                                    console.log(v);\r\n                                    break;\r\n                              }\r\n                          }\r\n                        }\r\n\r\n\r\n                              \r\n\r\n                    }\r\n\r\n                  \r\n                  }\r\n                  }\r\n                \r\n                }\r\n\r\n\r\n\r\n\r\n                  this.userInput = document.getElementById('sizec').value;\r\n                  this.circles[this.ind].radius=this.userInput;\r\n                  this.shapes[v].radius=this.userInput;\r\n                  this.circdialog=!this.circdialog;\r\n                  this.userInput=0;\r\n                  this.resiz=!this.resiz;\r\n                   this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify()\r\n                  break;\r\n\r\n          case 'rect':\r\n\r\n          \r\n              this.shapeType = \"Rectangle\"\r\n            for(let i=0;i<this.shapes.length;i++)\r\n                {\r\n                  if(this.shapes[i]!==null)\r\n                  {\r\n                        if(this.shapes[i].x===this.rectangles[this.ind].x)\r\n                  {\r\n                    if(this.shapes[i].y===this.rectangles[this.ind].y)\r\n                    { \r\n                        if(this.shapes[i].width===this.rectangles[this.ind].width)\r\n                        {\r\n                          \r\n\r\n                          if(this.shapes[i].fill===this.rectangles[this.ind].fill)\r\n                          {\r\n                              if(this.shapes[i].stroke===this.rectangles[this.ind].stroke)\r\n                              {\r\n                                if(this.shapes[i].height===this.rectangles[this.ind].height)\r\n                                {\r\n                                        \r\n                                    v=i;\r\n                                    console.log(v);\r\n                                    break;\r\n                                }\r\n                              }\r\n                          }\r\n                        }\r\n\r\n\r\n                              \r\n\r\n                    }\r\n\r\n                  \r\n                  }\r\n                  }\r\n                \r\n                }\r\n\r\n\r\n                  this.userInput1 = document.getElementById('size1').value;\r\n                  this.userInput2 = document.getElementById('size2').value;\r\n                  this.rectangles[this.ind].width=this.userInput1;\r\n                  this.rectangles[this.ind].height=this.userInput2;\r\n                   this.shapes[v].width=this.userInput1;\r\n                  this.shapes[v].height=this.userInput2;\r\n                  this.rectcdialog=!this.rectcdialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.userInput=0;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify()\r\n                  break;        \r\n          case 'ellipse':\r\n                  this.shapeType = \"Ellipse\"\r\n            for(let i=0;i<this.shapes.length;i++)\r\n                  {\r\n                    if(this.shapes[i]!==null)\r\n                    {\r\n                            if(this.shapes[i].x===this.ellipses[this.ind].x)\r\n                    {\r\n                      if(this.shapes[i].y===this.ellipses[this.ind].y)\r\n                      { \r\n                          if(this.shapes[i].radiusX===this.ellipses[this.ind].radiusX)\r\n                          {\r\n                            \r\n\r\n                            if(this.shapes[i].fill===this.ellipses[this.ind].fill)\r\n                            {\r\n                                if(this.shapes[i].stroke===this.ellipses[this.ind].stroke)\r\n                                {\r\n                                  if(this.shapes[i].radiusY===this.ellipses[this.ind].radiusY)\r\n                                      v=i;\r\n                                      console.log(v);\r\n                                      break;\r\n                                }\r\n                            }\r\n                          }\r\n\r\n\r\n                                \r\n\r\n                      }\r\n\r\n                    \r\n                    }\r\n                    }\r\n                \r\n                  }\r\n                    console.log(v);\r\n                      \r\n\r\n\r\n                  this.userInput1 = document.getElementById('sizex').value;\r\n                  this.userInput2 = document.getElementById('sizey').value;\r\n                  this.ellipses[this.ind].radiusX=this.userInput1;\r\n                  this.ellipses[this.ind].radiusY=this.userInput2;\r\n                   this.shapes[v].radiusX=this.userInput1;\r\n                  this.shapes[v].radiusY=this.userInput2;\r\n                  this.elpsdialog=!this.elpsdialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.userInput=0;\r\n                  this.resiz=false;\r\n                  this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                  this.modify();\r\n\r\n                  break;\r\n          case 'square':\r\n             this.shapeType = \"Square\";\r\n               for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.squares[this.ind].x)\r\n          {\r\n            if(this.shapes[i].y===this.squares[this.ind].y)\r\n            { \r\n                if(this.shapes[i].width===this.squares[this.ind].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[this.ind].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[this.ind].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[this.ind].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n\r\n\r\n\r\n          this.userInput1 = document.getElementById('sizeq').value;\r\n                  this.squares[this.ind].width=this.userInput1;\r\n                  this.squares[this.ind].height=this.userInput1;\r\n                   this.shapes[v].width=this.userInput1;\r\n                  this.shapes[v].height=this.userInput1;\r\n                  this.sqrdialog=!this.sqrdialog;\r\n                  this.resiz=!this.resiz;\r\n                  this.userInput=0;\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                   this.modify()\r\n        }\r\n        \r\n\r\n      },\r\n\r\n    oldpo(type, index)\r\n    {\r\n        if(type==='triangle')\r\n        {\r\n            this.cc=this.triangles[index].x;\r\n            this.vv=this.triangles[index].y;\r\n        }\r\n        else if(type==='rect')\r\n        {\r\n          this.cc=this.rectangles[index].x;\r\n            this.vv=this.rectangles[index].y;\r\n        }\r\n        else if(type==='line')\r\n        {\r\n          this.cc=this.lines[index].x;\r\n            this.vv=this.lines[index].y;\r\n        }\r\n        else if(type==='ellipse')\r\n        {\r\n             this.cc=this.ellipses[index].x;\r\n            this.vv=this.ellipses[index].y;\r\n        }\r\n        else if(type==='square')\r\n        {\r\n          \r\n             this.cc=this.squares[index].x;\r\n            this.vv=this.squares[index].y;\r\n        }\r\n        else if(type==='circle')\r\n        {\r\n           this.cc=this.circles[index].x;\r\n            this.vv=this.circles[index].y;\r\n        }\r\n    },\r\n\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n  this.able=false;\r\n   var v=0;\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radius===this.circles[index].radius)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.circles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.circles[index].stroke)\r\n                      {\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n         \r\n        }\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.rectangles[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.rectangles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.rectangles[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.rectangles[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radiusX===this.ellipses[index].radiusX)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.ellipses[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.ellipses[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].radiusY===this.ellipses[index].radiusY)\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n       \r\n        }\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'line') {\r\n      this.shapeType = \"Line\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n       if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n          \r\n                   \r\n                        \r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.squares[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.cc)\r\n              {\r\n                if(this.shapes[i].y===this.vv)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[index].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[index].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[index].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n\r\n    },\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.un=0;\r\n      this.re=0;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    resize(){\r\n      this.resiz=true;\r\n\r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n      if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n         //console.log(this.shapes.length);\r\n           this.triangles[index].draggable=true;\r\n        let v=0;\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.triangles[index].x)\r\n              {\r\n                if(this.shapes[i].y===this.triangles[index].y)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[index].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[index].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[index].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n        // console.log(v);\r\n        console.log(this.shapes)\r\n        console.log(this.triangles)\r\n\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n        }\r\n      if(this.resiz)\r\n      {\r\n           this.tridialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n      }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n             // console.log(this.shapes);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                if(this.shapes[i].x===this.circles[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.circles[index].y)\r\n            { \r\n                if(this.shapes[i].radius===this.circles[index].radius)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.circles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.circles[index].stroke)\r\n                      {\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n         \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n         this.circdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n      }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.lines[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.lines[index].y)\r\n            { \r\n               if(this.shapes[i].points[0]===this.lines[index].points[0])\r\n                 {\r\n                 if(this.shapes[i].points[1]===this.lines[index].points[1])\r\n                  {\r\n                  if(this.shapes[i].points[2]===this.lines[index].points[2])\r\n                       {\r\n                          if(this.shapes[i].points[3]===this.lines[index].points[3]){\r\n\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                              \r\n                          }\r\n                       }  \r\n                  }\r\n               }     \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n        if(this.resiz)\r\n        {\r\n        //  let r=this.clickedPoints.length ;\r\n        //   this.lines[index].points[2]=this.clickedPoints[r-2].x;\r\n        //   this.lines[index].points[3]=this.clickedPoints[r-2].y;\r\n\r\n        //   this.lines.push({...this.lines[index]})\r\n        //   this.shapes[v].points[2]=this.clickedPoints[r-2].x-this.lines[index].x;\r\n\r\n        //   this.shapes[v].points[3]=this.clickedPoints[r-2].y-this.lines[index].y;\r\n\r\n        this.x0=this.lines[index].x\r\n          this.y0=this.lines[index].y\r\n            this.linedialog=true;\r\n            this.ind=index;\r\n            this.typ=type;\r\n          // this.modifysh=this.shapes[v];\r\n          //         this.ord=v;\r\n          //         this.modify();\r\n          // this.resiz=false;\r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.rectangles[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.rectangles[index].y)\r\n            { \r\n                if(this.shapes[i].width===this.rectangles[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.rectangles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.rectangles[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.rectangles[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.rectcdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n        \r\n         \r\n      }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.ellipses[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.ellipses[index].y)\r\n            { \r\n                if(this.shapes[i].radiusX===this.ellipses[index].radiusX)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.ellipses[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.ellipses[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].radiusY===this.ellipses[index].radiusY)\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n       \r\n        }\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n         this.elpsdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n      }\r\n                if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n        /**************************************************** */\r\n     else if(type==='square')\r\n     {\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.squares[index].x)\r\n          {\r\n            if(this.shapes[i].y===this.squares[index].y)\r\n            { \r\n                if(this.shapes[i].width===this.squares[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.sqrdialog=true; \r\n        this.ind=index;\r\n        this.typ=type;\r\n        \r\n      }\r\n     // this.squares[index].fill = this.selectedColor;\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n              this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    move()\r\n    {\r\n      this.mov=true;\r\n    },\r\n    \r\n    \r\n      startDrawing() {\r\n     if(this.rectangle===true)\r\n      {\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 0,\r\n            height: 0,\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ===true){\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 0,\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips===true)\r\n      {\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 0,\r\n              radiusY:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin===true)\r\n      {\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt===true)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 0,\r\n            height: 0,\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\r\n  \r\n     \r\n      \r\n    \r\n    },\r\n    stopDrawing() {\r\n      \r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin||this.bru)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n\r\n\r\n\r\n        this.currentShape = null;\r\n        this.circ=false;\r\n        this.ellips=false;\r\n        this.rectangle=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.mov = false;\r\n        this.bru=false;\r\n      }\r\n     \r\n      \r\n      \r\n    \r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    draw() {\r\n      if(this.rectangle)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.y - this.currentShape.y;\r\n          }\r\n        }\r\n      }\r\n      }\r\n    //--------------------------------------------------------------------------------\r\n      else if(this.circ)\r\n      {\r\n          if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radius = Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************************************************************************** */\r\n      else if(this.ellips)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\r\n            this.currentShape.radiusY=Math.abs(position.y - this.currentShape.y);\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.lin)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n             this.currentShape.points[2] = position.x - this.currentShape.x;\r\n          this.currentShape.points[3] = position.y - this.currentShape.y;\r\n           \r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.sqrt)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.x - this.currentShape.x;\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************ **/\r\n      else if(this.tria)\r\n      {\r\n             if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n           \r\n            this.currentShape.radius=Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      \r\n    },\r\n\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){ \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\nthis.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n          if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      \r\n\r\n      }\r\n      if(this.lodxml){\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n           this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n    }\r\n\r\n      },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n        \r\n\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\n\r\n    async undo()\r\n    {\r\n      \r\n      if(this.un!==0)\r\n      {\r\n               await fetch('http://localhost:8080/undo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n          this.un--;\r\n            this.re++;\r\n      }\r\n      \r\n    },\r\n     async Redo()\r\n    {\r\n     \r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n  .hover-animation {\r\n    transition: transform 0.2s ease-in-out;\r\n  }\r\n  \r\n  .hover-animation:hover {\r\n    animation: bounce 0.6s ease infinite;\r\n  }\r\n  \r\n  @keyframes bounce {\r\n    0%, 20%, 50%, 80%, 100% {\r\n      transform: translateY(0);\r\n    }\r\n    40% {\r\n      transform: translateY(-15px);\r\n    }\r\n    60% {\r\n      transform: translateY(-10px);\r\n    }\r\n  }\r\n  .paint{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    \r\n  }\r\n  .header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap:0px;\r\n  \r\n  }\r\n  .operations{\r\n    display: flex;\r\n    gap: 10px;\r\n    align-content: center;\r\n    margin:10px;\r\n    margin:  2px auto;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  \r\n  }\r\n  .clorfil{\r\n    margin-right: 5px;\r\n    width:250px;\r\n    border-radius:20px;\r\n    \r\n  }\r\n  .bordshaps{\r\n    height: 260px;\r\n    margin: 3px;\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: #00CCCC  ;\r\n    border-color: #00CCCC;\r\n    background-color: #00CCCC;\r\n    border-radius:20px;\r\n    margin:   auto 2px;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    \r\n  }\r\n  .rotate-animation {\r\n    transition: transform 0.3s ease-in-out;\r\n  }\r\n  \r\n  .rotate-animation:hover {\r\n    transform: rotate(360deg);\r\n  }\r\n  \r\n  .shaps{\r\n    margin-right: 3px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    \r\n  } \r\n  label{\r\n    opacity: 0.2;\r\n    color: aliceblue;\r\n    \r\n  }\r\n  .block{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 5px;\r\n  }\r\n  v-btn:hover {\r\n    cursor: pointer;\r\n  }\r\n  label:hover{\r\n    opacity: 100;\r\n    color: aliceblue;\r\n  \r\n  }\r\n  .square {\r\n    height: 20px;\r\n    width: 20px;\r\n    border: black solid;\r\n  }\r\n  .rectengle {\r\n    height: 15px;\r\n    width: 25px;\r\n    border: black solid;\r\n  }\r\n\r\n  .circle {\r\n    height: 25px;\r\n    width: 25px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .circle1{\r\n    height: 50px;\r\n    width: 50px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .oval {\r\n    height:20px;\r\n    width: 30px;\r\n    border: black solid;\r\n    \r\n    border-radius: 50%;\r\n  }\r\n  .triangle-up {\r\n      width: 0;\r\n      height: 0;\r\n      border-left: 9px solid transparent;\r\n      border-right: 9px solid transparent;\r\n      border-bottom: 20px solid #555;\r\n  }\r\n  .line{\r\n      border-left: 1px solid transparent;\r\n      border-bottom:18px solid #555;\r\n  }\r\n  .color{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-bottom: 10px;\r\n  \r\n  }\r\n  .fillcolor{\r\n    margin-top: 4px;\r\n    height: 30px;\r\n    width:30px;\r\n    border: black solid;\r\n    border-radius: 49%;\r\n    overflow: hidden;\r\n  \r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}