{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"appaint\",\n  style: {\n    \"border\": \"solid black 2px\",\n    \"width\": \"1500px\",\n    \"background-color\": \"#00091A\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"operations\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-folder-open\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-floppy-disk\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrow-rotate-left\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-rotate-right\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-eraser\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-trash\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-copy\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = {\n  class: \"clorfil\"\n};\nconst _hoisted_12 = {\n  class: \"block\"\n};\nconst _hoisted_13 = {\n  class: \"fillcolor\"\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-fill-drip\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-paintbrush\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_16 = {\n  class: \"paint\"\n};\nconst _hoisted_17 = {\n  class: \"bordshaps\"\n};\nconst _hoisted_18 = {\n  class: \"shaps\"\n};\nconst _hoisted_19 = {\n  class: \"block\"\n};\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"square rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"square\", -1 /* HOISTED */));\nconst _hoisted_22 = {\n  class: \"block\"\n};\nconst _hoisted_23 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"rectengle rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"rectengle\", -1 /* HOISTED */));\nconst _hoisted_25 = {\n  class: \"block\"\n};\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"circle rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"circle\", -1 /* HOISTED */));\nconst _hoisted_28 = {\n  class: \"block\"\n};\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"triangle-up rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_30 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"triangle\", -1 /* HOISTED */));\nconst _hoisted_31 = {\n  class: \"block\"\n};\nconst _hoisted_32 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"oval rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_33 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"ellips\", -1 /* HOISTED */));\nconst _hoisted_34 = {\n  class: \"block\"\n};\nconst _hoisted_35 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-star rotate-animation\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_36 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"star\", -1 /* HOISTED */));\nconst _hoisted_37 = {\n  class: \"block\"\n};\nconst _hoisted_38 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-hexagon\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_39 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, null, -1 /* HOISTED */));\nconst _hoisted_40 = {\n  class: \"block\"\n};\nconst _hoisted_41 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-lines-leaning\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_42 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"line\", -1 /* HOISTED */));\nconst _hoisted_43 = {\n  class: \"block\"\n};\nconst _hoisted_44 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-pencil\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_45 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"brush\", -1 /* HOISTED */));\nconst _hoisted_46 = {\n  class: \"bord\",\n  style: {\n    \"border\": \"solid black 2px\",\n    \"border-radius\": \"10px\",\n    \"background-color\": \"#ffffff\",\n    \"margin-left\": \"2px\"\n  }\n};\nexport function render(_ctx, _cache) {\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_color_picker = _resolveComponent(\"color-picker\");\n  const _component_v_rect = _resolveComponent(\"v-rect\");\n  const _component_v_circle = _resolveComponent(\"v-circle\");\n  const _component_v_ellipse = _resolveComponent(\"v-ellipse\");\n  const _component_v_star = _resolveComponent(\"v-star\");\n  const _component_v_line = _resolveComponent(\"v-line\");\n  const _component_v_regular_polygon = _resolveComponent(\"v-regular-polygon\");\n  const _component_v_transformer = _resolveComponent(\"v-transformer\");\n  const _component_v_layer = _resolveComponent(\"v-layer\");\n  const _component_v_stage = _resolveComponent(\"v-stage\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.laod())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"open \"), _hoisted_4]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.save())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Save \"), _hoisted_5]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.undo())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Undo \"), _hoisted_6]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.Redo())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Redo \"), _hoisted_7]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.del())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Delete \"), _hoisted_8]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.clr())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"clear \"), _hoisted_9]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.copy())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"copy \"), _hoisted_10]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_createVNode(_component_color_picker, {\n    pureColor: _ctx.pureColor,\n    \"onUpdate:pureColor\": _cache[7] || (_cache[7] = $event => _ctx.pureColor = $event),\n    gradientColor: _ctx.gradientColor,\n    \"onUpdate:gradientColor\": _cache[8] || (_cache[8] = $event => _ctx.gradientColor = $event)\n  }, null, 8 /* PROPS */, [\"pureColor\", \"gradientColor\"])]), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[9] || (_cache[9] = $event => _ctx.fill()),\n    style: {\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"fill\"), _hoisted_14]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[10] || (_cache[10] = $event => _ctx.edge()),\n    style: {\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"border\"), _hoisted_15]),\n    _: 1 /* STABLE */\n  })])])]), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[11] || (_cache[11] = $event => _ctx.square())\n  }, {\n    default: _withCtx(() => [_hoisted_20]),\n    _: 1 /* STABLE */\n  }), _hoisted_21]), _createElementVNode(\"div\", _hoisted_22, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[12] || (_cache[12] = $event => _ctx.rect())\n  }, {\n    default: _withCtx(() => [_hoisted_23]),\n    _: 1 /* STABLE */\n  }), _hoisted_24]), _createElementVNode(\"div\", _hoisted_25, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    class: \"rotate-animation\",\n    onClick: _cache[13] || (_cache[13] = $event => _ctx.circle())\n  }, {\n    default: _withCtx(() => [_hoisted_26]),\n    _: 1 /* STABLE */\n  }), _hoisted_27]), _createElementVNode(\"div\", _hoisted_28, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[14] || (_cache[14] = $event => _ctx.triangle())\n  }, {\n    default: _withCtx(() => [_hoisted_29]),\n    _: 1 /* STABLE */\n  }), _hoisted_30]), _createElementVNode(\"div\", _hoisted_31, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[15] || (_cache[15] = $event => _ctx.ellipse())\n  }, {\n    default: _withCtx(() => [_hoisted_32]),\n    _: 1 /* STABLE */\n  }), _hoisted_33]), _createElementVNode(\"div\", _hoisted_34, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[16] || (_cache[16] = $event => _ctx.star())\n  }, {\n    default: _withCtx(() => [_hoisted_35]),\n    _: 1 /* STABLE */\n  }), _hoisted_36]), _createElementVNode(\"div\", _hoisted_37, [_createVNode(_component_v_btn, {\n    style: {\n      \"background-color\": \"#00CCCC\"\n    },\n    onClick: _cache[17] || (_cache[17] = $event => _ctx.polyg())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"hexagon\"), _hoisted_38]),\n    _: 1 /* STABLE */\n  }), _hoisted_39]), _createElementVNode(\"div\", _hoisted_40, [_createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[18] || (_cache[18] = $event => _ctx.line()),\n    style: {\n      \"width\": \"30px\",\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_41]),\n    _: 1 /* STABLE */\n  }), _hoisted_42]), _createElementVNode(\"div\", _hoisted_43, [_createVNode(_component_v_btn, {\n    class: \"rotate-animation\",\n    onClick: _cache[19] || (_cache[19] = $event => _ctx.brush()),\n    style: {\n      \"width\": \"30px\",\n      \"background-color\": \"#00CCCC\"\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_44]),\n    _: 1 /* STABLE */\n  }), _hoisted_45])])]), _createCommentVNode(\" <v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"savdialog\\\" transition=\\\"dialog-top-transition\\\">\\r\\n        <v-card variant=\\\"outlined\\\">\\r\\n          <v-card-title><h1>save</h1></v-card-title>\\r\\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\\r\\n          <v-btn :style=\\\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"savejason()\\\">json</v-btn>\\r\\n          <div style=\\\"height:5px;\\\"></div>\\r\\n          <v-btn :style=\\\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"savexml()\\\">xml</v-btn>\\r\\n          <v-card-actions >\\r\\n            <v-btn  variant=\\\"outlined\\\" @click=\\\"submity() \\\">OK</v-btn>\\r\\n          </v-card-actions>\\r\\n        </v-card>\\r\\n      </v-dialog>\\r\\n      <v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"pathdialog\\\" transition=\\\"dialog-bottom-transition\\\">\\r\\n        <v-card variant=\\\"outlined\\\">\\r\\n          <v-card-title>path of saving</v-card-title>\\r\\n          <input type=\\\"text\\\" placeholder=\\\"c:\\\\\\\\name\\\" id=\\\"path\\\" autofocus>\\r\\n          <v-card-actions >\\r\\n            <v-btn  variant=\\\"outlined\\\" @click=\\\"send()\\\">save</v-btn>\\r\\n          </v-card-actions>\\r\\n        </v-card>\\r\\n      </v-dialog>\\r\\n      <v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"loaddialog\\\" transition=\\\"dialog-top-transition\\\">\\r\\n        <v-card variant=\\\"outlined\\\">\\r\\n          <v-card-title><h1>Open</h1></v-card-title>\\r\\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\\r\\n          <v-btn :style=\\\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"loadjason()\\\">json</v-btn>\\r\\n          <div style=\\\"height:5px;\\\"></div>\\r\\n          <v-btn :style=\\\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"loadxml()\\\">xml</v-btn>\\r\\n          <v-card-actions >\\r\\n            <v-btn  variant=\\\"outlined\\\" @click=\\\"ok() \\\">OK</v-btn>\\r\\n          </v-card-actions>\\r\\n        </v-card>\\r\\n      </v-dialog>\\r\\n      <v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"pathloaddialog\\\" transition=\\\"dialog-bottom-transition\\\">\\r\\n        <v-card variant=\\\"outlined\\\">\\r\\n          <v-card-title>path of file</v-card-title>\\r\\n          <input type=\\\"text\\\" placeholder=\\\"c:\\\\\\\\name\\\" id=\\\"pathload\\\" autofocus>\\r\\n          <v-card-actions >\\r\\n            <v-btn  variant=\\\"outlined\\\" @click=\\\"open()\\\">open</v-btn>\\r\\n          </v-card-actions>\\r\\n        </v-card>\\r\\n      </v-dialog>\\r\\n \"), _createElementVNode(\"div\", _hoisted_46, [_createVNode(_component_v_stage, {\n    config: _ctx.configKonva,\n    ref: \"stage\",\n    onDblclick: _ctx.draw,\n    onClick: _ctx.handleClick,\n    onMousedown: _ctx.handleStageMouseDown\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_layer, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.squares, (square, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            x: square.x,\n            y: square.y,\n            width: square.width,\n            height: square.height,\n            fill: square.fill,\n            // Use the selected fill color\n            stroke: square.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: square.id\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onDbclick: $event => _ctx.shapeClicked('square', index),\n          onDragend: $event => _ctx.newpo('square', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onDbclick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing rectangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.rectangles, (rect, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill,\n            // Use the selected fill color\n            stroke: rect.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: rect.id,\n            rotation: rect.rotation,\n            scaleX: rect.scaleX,\n            scaleY: rect.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('rect', index),\n          onDragend: $event => _ctx.newpo('rect', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing circles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.circles, (circle, index) => {\n        return _openBlock(), _createBlock(_component_v_circle, {\n          key: index,\n          config: {\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            stroke: circle.stroke,\n            strokeWidth: 2,\n            draggable: true,\n            id: circle.id,\n            rotation: circle.rotation,\n            scaleX: circle.scaleX,\n            scaleY: circle.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('circle', index),\n          onDragend: $event => _ctx.newpo('circle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing ellipses \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.ellipses, (ellipse, index) => {\n        return _openBlock(), _createBlock(_component_v_ellipse, {\n          key: index,\n          config: {\n            x: ellipse.x,\n            y: ellipse.y,\n            radiusX: ellipse.radiusX,\n            radiusY: ellipse.radiusY,\n            fill: ellipse.fill,\n            // Use the selected fill color\n            stroke: ellipse.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: ellipse.id,\n            rotation: ellipse.rotation,\n            scaleX: ellipse.scaleX,\n            scaleY: ellipse.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('ellipse', index),\n          onDragend: $event => _ctx.newpo('ellipse', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing star \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.stars, (star, index) => {\n        return _openBlock(), _createBlock(_component_v_star, {\n          key: index,\n          config: {\n            x: star.x,\n            y: star.y,\n            innerRadius: star.innerRadius,\n            outerRadius: star.outerRadius,\n            numPoints: star.numPoints,\n            fill: star.fill,\n            // Use the selected fill color\n            stroke: star.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: star.id,\n            rotation: star.rotation,\n            scaleX: star.scaleX,\n            scaleY: star.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('star', index),\n          onDragend: $event => _ctx.newpo('star', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing line segment \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.lines, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            x: line.x,\n            y: line.y,\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: true,\n            id: line.id,\n            rotation: line.rotation,\n            scaleX: line.scaleX,\n            scaleY: line.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('line', index),\n          onDragend: $event => _ctx.newpo('line', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" square \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.triangles, (triangle, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            x: triangle.x,\n            y: triangle.y,\n            sides: 3,\n            radius: triangle.radius,\n            fill: triangle.fill,\n            stroke: triangle.stroke,\n            strokeWidth: 2,\n            draggable: true,\n            id: triangle.id,\n            rotation: triangle.rotation,\n            scaleX: triangle.scaleX,\n            scaleY: triangle.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('triangle', index),\n          onDragend: $event => _ctx.newpo('triangle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.brus, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: false\n          }\n        }, null, 8 /* PROPS */, [\"config\"]);\n      }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.polygons, (polygon, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'polygon',\n            x: polygon.x,\n            y: polygon.y,\n            sides: 6,\n            radius: polygon.radius,\n            fill: polygon.fill,\n            stroke: polygon.stroke,\n            strokeWidth: 5,\n            draggable: true,\n            id: polygon.id,\n            rotation: polygon.rotation,\n            scaleX: polygon.scaleX,\n            scaleY: polygon.scaleY\n          },\n          onTransformend: _ctx.handleTransformEnd,\n          onClick: $event => _ctx.shapeClicked('Polygon', index),\n          onDragend: $event => _ctx.newpo('Polygon', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_v_transformer, {\n        ref: \"transformer\"\n      }, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"config\", \"onDblclick\", \"onClick\", \"onMousedown\"])])])]);\n}","map":{"version":3,"names":["class","style","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_v_btn","onClick","_cache","$event","_ctx","laod","_hoisted_4","save","_hoisted_5","undo","_hoisted_6","Redo","_hoisted_7","del","_hoisted_8","clr","_hoisted_9","copy","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_component_color_picker","pureColor","gradientColor","fill","_hoisted_14","edge","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","square","_hoisted_20","_hoisted_21","_hoisted_22","rect","_hoisted_23","_hoisted_24","_hoisted_25","circle","_hoisted_26","_hoisted_27","_hoisted_28","triangle","_hoisted_29","_hoisted_30","_hoisted_31","ellipse","_hoisted_32","_hoisted_33","_hoisted_34","star","_hoisted_35","_hoisted_36","_hoisted_37","polyg","_hoisted_38","_hoisted_39","_hoisted_40","line","_hoisted_41","_hoisted_42","_hoisted_43","brush","_hoisted_44","_hoisted_45","_createCommentVNode","_hoisted_46","_component_v_stage","config","configKonva","ref","onDblclick","draw","handleClick","onMousedown","handleStageMouseDown","_component_v_layer","_Fragment","_renderList","squares","index","_createBlock","_component_v_rect","key","x","y","width","height","stroke","id","onTransformend","handleTransformEnd","onDbclick","shapeClicked","onDragend","newpo","rectangles","rotation","scaleX","scaleY","circles","_component_v_circle","radius","ellipses","_component_v_ellipse","radiusX","radiusY","stars","_component_v_star","innerRadius","outerRadius","numPoints","lines","_component_v_line","points","triangles","_component_v_regular_polygon","brus","polygons","polygon","_component_v_transformer"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"appaint\" style=\"border:solid black 2px; width:1500px; background-color:#00091A ;\">\r\n    <div class=\"header\">\r\n  <div class=\"operations\" >\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"laod()\">open <i class=\"fa-solid fa-folder-open\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"undo()\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\" @click=\"Redo()\">Redo <i class=\"fa-solid fa-rotate-right\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\" style=\"background-color:#00CCCC\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></v-btn>\r\n    <v-btn class=\"rotate-animation\"  style=\"background-color:#00CCCC\" @click=\"copy()\">copy <i class=\"fa-solid fa-copy\"></i></v-btn>\r\n  </div>\r\n  <div class=\"clorfil\" >\r\n    <div class=\"block\">\r\n      <div class=\"fillcolor\">\r\n        <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n    </div>\r\n      <v-btn class=\"rotate-animation\" @click=\"fill()\" style=\"background-color:#00CCCC\">fill<i class=\"fa-solid fa-fill-drip\"></i></v-btn>\r\n      <v-btn class=\"rotate-animation\" @click=\"edge()\" style=\"background-color:#00CCCC\">border<i class=\"fa-solid fa-paintbrush\"></i></v-btn>\r\n    \r\n  </div>\r\n  </div>\r\n</div>\r\n \r\n  <div class=\"paint\">\r\n   \r\n    <div class=\"bordshaps\" >\r\n     \r\n    <div class=\"shaps\">\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"square()\" ><div class=\"square rotate-animation\"></div></v-btn>\r\n     <label >square</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"rect()\" ><div class=\"rectengle rotate-animation\"></div></v-btn>\r\n     <label >rectengle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n        <v-btn style=\"background-color:#00CCCC\"  class=\"rotate-animation\" @click=\"circle()\" ><div class=\"circle rotate-animation\"></div></v-btn>\r\n     <label >circle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <v-btn style=\"background-color:#00CCCC\" @click=\"triangle()\" ><div class=\"triangle-up rotate-animation\"></div></v-btn>\r\n     <label >triangle</label>\r\n    </div>\r\n    <div class=\"block\">\r\n      <v-btn style=\"background-color:#00CCCC\" @click=\"ellipse()\"><div class=\"oval rotate-animation\"></div></v-btn>\r\n      <label >ellips</label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <v-btn  style=\"background-color:#00CCCC\" @click=\"star()\"><i class=\"fa-solid fa-star rotate-animation\"></i></v-btn>\r\n      <label >star</label>\r\n     </div>\r\n      <div class=\"block\">\r\n      <v-btn  style=\"background-color:#00CCCC\" @click=\"polyg()\">hexagon<i class=\"fa-solid fa-hexagon\"></i></v-btn>\r\n      <label ></label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <v-btn  class=\"rotate-animation\" @click=\"line()\" style=\"width:30px; background-color:#00CCCC\"><i class=\"fa-solid fa-lines-leaning\"></i></v-btn>\r\n      <label >line</label>\r\n     </div>\r\n      <div class=\"block\">\r\n      <v-btn  class=\"rotate-animation\" @click=\"brush()\" style=\"width:30px; background-color:#00CCCC\"><i class=\"fa-solid fa-pencil\"></i></v-btn>\r\n      <label >brush</label>\r\n     </div>\r\n    </div>\r\n  </div>\r\n\r\n          <!-- <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>save</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of saving</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>Open</h1></v-card-title>\r\n          <v-card-subtitle> xml OR json  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of file</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n -->\r\n\r\n    <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n  <v-stage :config=\"configKonva\" ref=\"stage\" @dblclick=\"draw\"\r\n     @click=\"handleClick\"  @mousedown=\"handleStageMouseDown\"\r\n   >\r\n    <v-layer>\r\n      <v-rect\r\n   v-for=\"(square, index) in squares\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n           x: square.x,\r\n          y: square.y,\r\n          width: square.width,\r\n          height: square.height,\r\n          fill: square.fill, // Use the selected fill color\r\n          stroke: square.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n          id:square.id\r\n          \r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n      @dbclick=\"shapeClicked('square', index)\"\r\n      @dragend=\"newpo('square', index, $event)\"   \r\n  >\r\n\r\n  </v-rect>\r\n      <!-- drawing rectangles -->\r\n      <v-rect\r\n       v-for=\"(rect, index) in rectangles\"\r\n        :key=\"index\"\r\n        :config=\"{ \r\n          x:  rect.x,\r\n          y: rect.y,\r\n          width: rect.width,\r\n          height: rect.height,\r\n          fill: rect.fill, // Use the selected fill color\r\n          stroke: rect.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n          id:rect.id,\r\n          rotation:rect.rotation,\r\n          scaleX:rect.scaleX,\r\n          scaleY:rect.scaleY\r\n           \r\n       }\"\r\n          @transformend=\"handleTransformEnd\"\r\n        @click=\"shapeClicked('rect', index) \"\r\n       @dragend=\"newpo('rect', index, $event)\"   \r\n      \r\n        \r\n      ></v-rect>\r\n     <!-- drawing circles -->\r\n     <v-circle\r\n      v-for=\"(circle, index) in circles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: circle.x,\r\n          y: circle.y,\r\n          radius:circle.radius,\r\n          fill:circle.fill,\r\n          stroke:circle.stroke,\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:circle.id,\r\n           rotation:circle.rotation,\r\n          scaleX:circle.scaleX,\r\n          scaleY:circle.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n         @click=\"shapeClicked('circle', index)\"\r\n         @dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n     </v-circle>\r\n     <!-- drawing ellipses -->\r\n     <v-ellipse\r\n        v-for=\"(ellipse, index) in ellipses\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: ellipse.x,\r\n          y: ellipse.y,\r\n          radiusX:ellipse.radiusX,\r\n          radiusY:ellipse.radiusY,\r\n          fill: ellipse.fill, // Use the selected fill color\r\n          stroke: ellipse.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:ellipse.id,\r\n           rotation:ellipse.rotation,\r\n          scaleX:ellipse.scaleX,\r\n          scaleY:ellipse.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n       @click=\"shapeClicked('ellipse', index)\"\r\n       @dragend=\"newpo('ellipse', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-ellipse>\r\n     <!-- drawing star -->\r\n     <v-star\r\n        v-for=\"(star, index) in stars\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: star.x,\r\n          y: star.y,\r\n          innerRadius:star.innerRadius,\r\n          outerRadius:star.outerRadius,\r\n          numPoints:star.numPoints,\r\n          fill: star.fill, // Use the selected fill color\r\n          stroke: star.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:star.id,\r\n           rotation:star.rotation,\r\n          scaleX:star.scaleX,\r\n          scaleY:star.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n       @click=\"shapeClicked('star', index)\"\r\n       @dragend=\"newpo('star', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-star>\r\n     <!-- drawing line segment -->\r\n     <v-line\r\n       v-for=\"(line, index) in lines\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x : line.x,\r\n          y : line.y,\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:true,\r\n          id:line.id,\r\n           rotation:line.rotation,\r\n          scaleX:line.scaleX,\r\n          scaleY:line.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n         @click=\"shapeClicked('line', index)\"\r\n         @dragend=\"newpo('line', index, $event)\"   \r\n     >\r\n\r\n     </v-line>\r\n  <!-- square -->\r\n  \r\n  <v-regular-polygon\r\n   v-for=\"(triangle, index) in triangles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          x: triangle.x,\r\n          y: triangle.y,\r\n          sides:3,\r\n          radius:triangle.radius,\r\n          fill: triangle.fill, \r\n          stroke: triangle.stroke, \r\n          strokeWidth: 2,\r\n          draggable:true,\r\n          id:triangle.id,\r\n           rotation:triangle.rotation,\r\n          scaleX:triangle.scaleX,\r\n          scaleY:triangle.scaleY\r\n        }\"\r\n         @transformend=\"handleTransformEnd\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\"   \r\n  >\r\n\r\n  </v-regular-polygon>\r\n  <v-line\r\n         v-for=\"(line, index) in brus\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:false,\r\n        }\"\r\n  >\r\n \r\n  </v-line>\r\n\r\n\r\n   <v-regular-polygon\r\n   v-for=\"(polygon, index) in polygons\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'polygon',\r\n          x: polygon.x,\r\n          y: polygon.y,\r\n          sides:6,\r\n          radius:polygon.radius,\r\n          fill: polygon.fill, \r\n          stroke: polygon.stroke, \r\n          strokeWidth: 5,\r\n          draggable:true,\r\n          id:polygon.id,\r\n           rotation:polygon.rotation,\r\n          scaleX:polygon.scaleX,\r\n          scaleY:polygon.scaleY\r\n        }\"\r\n           @transformend=\"handleTransformEnd\"\r\n      @click=\"shapeClicked('Polygon', index)\"\r\n      @dragend=\"newpo('Polygon', index, $event)\"   \r\n  >\r\n</v-regular-polygon>\r\n    \r\n <v-transformer ref=\"transformer\" />\r\n    </v-layer>\r\n  </v-stage>\r\n</div>\r\n  \r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n          width: 1350,\r\n          height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      stars:[],\r\n       polygons:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      str:false,\r\n      poly:false,\r\n      delete:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedshapeid: '',  //transform\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        poldialog:false,\r\n        length:200,\r\n        un:0,\r\n        re:0,\r\n        shapeid:-1,\r\n         brus:[]\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n   handleClick() {\r\n       this.cop=false;\r\n      this.cofill=false;\r\n      this.coledge=false; \r\n    },\r\n    /*drawbrush()\r\n    {\r\n       if(this.bru)\r\n       {\r\n        this.draw();\r\n         const stage = this.$refs.stage.getStage();\r\n            const position = stage.getPointerPosition();\r\n         this.currentShape.points.push(position.x, position.y);\r\n       }\r\n       this.stopDrawing();\r\n    },\r\n*/\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n   var v=0;\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n       for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n          console.log(v);\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n\r\n    }\r\n    if (type === 'star') {\r\n      this.shapeType = \"Star\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n    this.stars[index].x=e.target.x();\r\n    this.stars[index].y=e.target.y();\r\n    this.shapes[v].x=this.stars[index].x;\r\n    this.shapes[v].y=this.stars[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.stars[index].x);\r\n    console.log(this.stars[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    \r\n  }\r\n    if (type === 'line') {\r\n      this.shapeid=-1;\r\n    this.updateTransformer();\r\n      this.shapeType = \"Line\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n\r\n    if (type === 'Polygon') {\r\n      this.shapeType = \"Polygon\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        this.shapeid=-1;\r\n    this.updateTransformer();\r\n         console.log(v);\r\n    this.polygons[index].x=e.target.x();\r\n    this.polygons[index].y=e.target.y();\r\n    this.shapes[v].x=this.polygons[index].x;\r\n    this.shapes[v].y=this.polygons[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.polygons[index].x);\r\n    console.log(this.polygons[index].y);\r\n    this.shapeid=-1;\r\n    this.updateTransformer();\r\n    }\r\n    \r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n         this.str=false;\r\n      this.poly=false;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n         this.str=false;\r\n      this.poly=false;\r\n    }, \r\n    star()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.str=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.poly=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n   polyg()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.poly=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.str=false;\r\n      this.bru=false;\r\n    },\r\n\r\n\r\n\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.stars =[];\r\n      this.polygons=[];\r\n      this.un=0;\r\n      this.re=0;\r\n      this.shapeid=-1;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n\r\n\r\n    if(type==='Polygon')\r\n     {\r\n       this.shapeType = \"Polygon\"\r\n        let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n           if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.updateTransformer();\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.polygons.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n         \r\n           this.un++; \r\n              this.polygons.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n              this.selectedid=-1;\r\n               this.updateTransformer();\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.polygons[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.polygons[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.polygons[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.polygons[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n        \r\n     }\r\n\r\n      if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n        let v=0;\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n            \r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++; \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n        if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n      else if(type==='star') {\r\n        let v=0;\r\n         this.shapeType = \"Star\"\r\n  for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.stars.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n      if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.stars.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n        if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.stars[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.stars[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.stars[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.stars[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify() \r\n       \r\n     }\r\n        }\r\n       \r\n     else if(type==='square')\r\n     {\r\n      console.log(\"xx\");\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n           \r\n        }\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.str=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.cop=false;\r\n    },\r\n      draw() {\r\n     if(this.rectangle)\r\n      {\r\n          this.shapeid++;\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Rectangle',\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 250,\r\n            height: 400,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                  scaleX : 1,\r\n                 scaleY : 1\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ){\r\n          this.shapeid++;\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Circle',\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 200,\r\n               id:String(this.shapeid),\r\n                 rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Ellipse',\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 200,\r\n              radiusY:130,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.str)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Star',\r\n                 fill:this.pureColor,\r\n                 stroke:this.pureColor2,\r\n               strokeWidth:2,\r\n              innerRadius:130,\r\n              outerRadius:200,\r\n              numPoints:6,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin)\r\n      {\r\n          this.shapeid++;\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Line',\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0,200,150],\r\n                 id:String(this.shapeid),\r\n                   rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt)\r\n      {\r\n          this.shapeid++;\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n               type:'Square',\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 200,\r\n            height: 200,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n         this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Triangle',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                    rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.poly)\r\n      {\r\n             this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Polygon',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                     rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n\r\n              };\r\n              \r\n            }\r\n          }\r\n      }\r\n      \r\n   \r\n        else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             this.currentShape = {\r\n            points: [position.x, position.y],\r\n            stroke: this.pureColor2,\r\n            strokeWidth: 4,\r\n          };\r\n            }\r\n          }\r\n        \r\n      }\r\n        this.stopDrawing();\r\n    },\r\n    stopDrawing() {\r\n      console.log(this.currentShape);\r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n      else if(this.str)\r\n      {\r\n        console.log(\"brt\");\r\n        this.shapeType = 'Star';\r\n\r\n           this.stars.push({...this.currentShape});\r\n           this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n        else if(this.bru)\r\n      {\r\n          this.brus.push({...this.currentShape});\r\n      }\r\n      else if(this.poly)\r\n      {\r\n          this.shapeType = 'Polygon';\r\n           this.polygons.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n        this.currentShape = null;\r\n      }\r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){\r\n      this.un = 0\r\n      this.re = 0 \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n\r\n         for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n        \r\n         \r\n      }\r\n      \r\n           this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n      }\r\n      if(this.lodxml){\r\n        this.un = 0\r\n        this.re = 0\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      \r\n        for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n    }\r\n\r\n     },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\n\r\n    async undo()\r\n    {\r\n     this.selectedid=-1;\r\n     this.updateTransformer(); \r\n      if(this.un!==0)\r\n      {\r\n               await fetch('http://localhost:8080/undo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n      console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n            this.selectedid=-1;\r\n                this.updateTransformer(); \r\n             this.rectangles.push({...this.shapes[i]});\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n\r\n\r\n              this.circles.push({...this.shapes[i]});\r\n               this.selectedid=-1;\r\n                this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n\r\n            this.ellipses.push({...this.shapes[i]})\r\n             this.selectedid=-1;\r\n               this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n             this.selectedid=-1;\r\n                this.updateTransformer(); \r\n\r\n            this.stars.push({...this.shapes[i]})\r\n             this.selectedid=-1;\r\n                 this.updateTransformer(); \r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n               this.selectedid=-1;\r\n            this.updateTransformer(); \r\n             this.squares.push({...this.shapes[i]});\r\n              this.selectedid=-1;\r\n                this.updateTransformer(); \r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n               this.selectedid=-1;\r\n            this.updateTransformer(); \r\n            this.triangles.push({...this.shapes[i]});\r\n             this.selectedid=-1;\r\n               this.updateTransformer(); \r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.selectedid=-1;\r\n            this.updateTransformer(); \r\n             this.lines.push({...this.shapes[i]});\r\n              this.selectedid=-1;\r\n            this.updateTransformer(); \r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n\r\n         }\r\n        }\r\n         \r\n      }\r\n          this.un--;\r\n            this.re++;\r\n      }\r\n      this.selectedid=-1;\r\n                this.updateTransformer(); \r\n      \r\n    },\r\n     async Redo()\r\n    {\r\n     this.selectedid=-1;\r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons=[];\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      \r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    },\r\n     handleTransformEnd(e) {\r\n      var shape = this.shapes.find(\r\n        (r) => r.id === this.selectedid\r\n      );\r\n      this.un++;\r\n      shape.x = e.target.x();\r\n      shape.y = e.target.y();\r\n      shape.rotation = e.target.rotation();\r\n      shape.scaleX = e.target.scaleX();\r\n      shape.scaleY = e.target.scaleY();\r\n\r\n      this.ord=shape.id;\r\n      this.shapeType=shape.type;\r\n      this.modifysh=shape;\r\n\r\n       \r\n        if(shape.type === \"Square\"){\r\n            shape = this.squares.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Rectangle\"){\r\n            shape = this.rectangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Circle\"){\r\n            shape = this.circles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Triangle\"){\r\n            shape = this.triangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Polygon\"){\r\n            shape = this.pentagons.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Line\"){\r\n            shape = this.lines.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.name === \"Ellipse\"){\r\n            shape = this.ellipses.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n          else if(shape.name === \"Star\"){\r\n            shape = this.stars.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      console.log(shape);\r\n      this.modify();\r\n      \r\n\r\n\r\n    },\r\n    handleStageMouseDown(e) {\r\n      if (e.target === e.target.getStage()) {\r\n        this.selectedid = '';\r\n        this.updateTransformer();\r\n        return;\r\n        \r\n      }\r\n\r\n      const clickedOnTransformer =\r\n        e.target.getParent().className === 'Transformer';\r\n      if (clickedOnTransformer) {\r\n        return;\r\n      }\r\n\r\n     \r\n    \r\n      const x= e.target.id();\r\n      // const shape = this.shapes.find((r) => r.id === x);\r\n\r\n      for(let i = 0; i)\r\n\r\n      if (shape) {\r\n        this.selectedid = x;\r\n      } else {\r\n        this.selectedid = '';\r\n      }\r\n      this.updateTransformer();\r\n    },\r\n    updateTransformer() {\r\n      const transformerNode = this.$refs.transformer.getNode();\r\n      const stage = transformerNode.getStage();\r\n      const { selectedid } = this;\r\n      console.log(selectedid);\r\n      const selectedNode = stage.findOne('#' + String(this.selectedid));\r\n      console.log(selectedNode);\r\n      if (selectedNode === transformerNode.node()) {\r\n        return;\r\n      }\r\n\r\n      if (selectedNode) {\r\n        transformerNode.nodes([selectedNode]);\r\n      } else {\r\n        transformerNode.nodes([]);\r\n      }\r\n    },\r\n\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n  .hover-animation {\r\n    transition: transform 0.2s ease-in-out;\r\n  }\r\n  \r\n  .hover-animation:hover {\r\n    animation: bounce 0.6s ease infinite;\r\n  }\r\n  \r\n  @keyframes bounce {\r\n    0%, 20%, 50%, 80%, 100% {\r\n      transform: translateY(0);\r\n    }\r\n    40% {\r\n      transform: translateY(-15px);\r\n    }\r\n    60% {\r\n      transform: translateY(-10px);\r\n    }\r\n  }\r\n  .paint{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    \r\n  }\r\n  .header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap:0px;\r\n  \r\n  }\r\n  .operations{\r\n    display: flex;\r\n    gap: 10px;\r\n    align-content: center;\r\n    margin:10px;\r\n    margin:  2px auto;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  \r\n  }\r\n  .clorfil{\r\n    margin-right: 5px;\r\n    width:250px;\r\n    border-radius:20px;\r\n    \r\n  }\r\n  .bordshaps{\r\n    height: 300px;\r\n    margin: 3px;\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: #00CCCC  ;\r\n    border-color: #00CCCC;\r\n    background-color: #00CCCC;\r\n    border-radius:20px;\r\n    margin:   auto 2px;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    \r\n  }\r\n  .rotate-animation {\r\n    transition: transform 0.3s ease-in-out;\r\n  }\r\n  \r\n  .rotate-animation:hover {\r\n    transform: rotate(360deg);\r\n  }\r\n  \r\n  .shaps{\r\n    margin-right: 3px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    \r\n  } \r\n  label{\r\n    opacity: 0.2;\r\n    color: aliceblue;\r\n    \r\n  }\r\n  .block{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 5px;\r\n  }\r\n  v-btn:hover {\r\n    cursor: pointer;\r\n  }\r\n  label:hover{\r\n    opacity: 100;\r\n    color: aliceblue;\r\n  \r\n  }\r\n  .square {\r\n    height: 20px;\r\n    width: 20px;\r\n    border: black solid;\r\n  }\r\n  .rectengle {\r\n    height: 15px;\r\n    width: 25px;\r\n    border: black solid;\r\n  }\r\n\r\n  .circle {\r\n    height: 25px;\r\n    width: 25px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .circle1{\r\n    height: 50px;\r\n    width: 50px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .oval {\r\n    height:20px;\r\n    width: 30px;\r\n    border: black solid;\r\n    \r\n    border-radius: 50%;\r\n  }\r\n  .triangle-up {\r\n      width: 0;\r\n      height: 0;\r\n      border-left: 9px solid transparent;\r\n      border-right: 9px solid transparent;\r\n      border-bottom: 20px solid #555;\r\n  }\r\n  .line{\r\n      border-left: 1px solid transparent;\r\n      border-bottom:18px solid #555;\r\n  }\r\n  .color{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-bottom: 10px;\r\n  \r\n  }\r\n  .fillcolor{\r\n    margin-top: 4px;\r\n    height: 30px;\r\n    width:30px;\r\n    border: black solid;\r\n    border-radius: 49%;\r\n    overflow: hidden;\r\n  \r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}