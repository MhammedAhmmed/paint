{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//import Konva from 'konva';\n\nimport { ref } from \"vue\";\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      value: null,\n      selectedColor: '',\n      selectedColor2: '',\n      selectedColor3: '',\n      selectedColor4: '',\n      selectedColor5: '',\n      configKonva: {\n        width: 1000,\n        height: 800\n      },\n      pureColor: '#ffffff',\n      // Selected fill color\n      pureColor2: '#000000',\n      // Selected edge color\n      isdraw: false,\n      rectangles: [],\n      squares: [],\n      lines: [],\n      circles: [],\n      ellipses: [],\n      triangles: [],\n      rectangle: false,\n      circ: false,\n      ellips: false,\n      lin: false,\n      sqrt: false,\n      tria: false,\n      bru: false,\n      delete: false,\n      mov: false,\n      cofill: false,\n      coledge: false,\n      currentShape: null,\n      shapes: [],\n      selectedShapeName: '',\n      resiz: false,\n      userInput: 0,\n      sav: false,\n      path: \"\",\n      shapeType: '',\n      ord: null,\n      modifysh: null,\n      cop: false,\n      co: null,\n      cc: null,\n      vv: null,\n      tridialog: false,\n      sqrdialog: false,\n      circdialog: false,\n      rectcdialog: false,\n      elpsdialog: false,\n      savdialog: false,\n      savjason: false,\n      savxml: false,\n      pathdialog: false,\n      loaddialog: false,\n      pathloaddialog: false,\n      lodjason: false,\n      lodxml: false\n    };\n  },\n  methods: {\n    setup() {\n      const pureColor = ref < ColorInputWithoutInstance > \"red\";\n      return {\n        pureColor\n      };\n    },\n    // save()\n    // {\n    //     this.saving();\n    // },\n\n    oldpo(type, index) {\n      if (type === 'triangle') {\n        this.cc = this.triangles[index].x;\n        this.vv = this.triangles[index].y;\n      } else if (type === 'rect') {\n        this.cc = this.rectangles[index].x;\n        this.vv = this.rectangles[index].y;\n      } else if (type === 'line') {\n        this.cc = this.lines[index].x;\n        this.vv = this.lines[index].y;\n      } else if (type === 'ellipse') {\n        this.cc = this.ellipses[index].x;\n        this.vv = this.ellipses[index].y;\n      } else if (type === 'square') {\n        this.cc = this.squares[index].x;\n        this.vv = this.squares[index].y;\n      } else if (type === 'circle') {\n        this.cc = this.circles[index].x;\n        this.vv = this.circles[index].y;\n      }\n    },\n    newpo(type, index, e) {\n      var v = 0;\n      if (type === 'circle') {\n        this.shapeType = \"Circle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radius === this.circles[index].radius) {\n                  if (this.shapes[i].fill === this.circles[index].fill) {\n                    if (this.shapes[i].stroke === this.circles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.circles[index].x = e.target.x();\n        this.circles[index].y = e.target.y();\n        this.shapes[v].x = this.circles[index].x;\n        this.shapes[v].y = this.circles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.shapes[v]);\n        console.log(this.circles[index].x);\n        console.log(this.circles[index].y);\n      }\n      if (type === 'rect') {\n        this.shapeType = \"Rectangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].width === this.rectangles[index].width) {\n                  if (this.shapes[i].fill === this.rectangles[index].fill) {\n                    if (this.shapes[i].stroke === this.rectangles[index].stroke) {\n                      if (this.shapes[i].height === this.rectangles[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.rectangles[index].x = e.target.x();\n        this.rectangles[index].y = e.target.y();\n        this.shapes[v].x = this.rectangles[index].x;\n        this.shapes[v].y = this.rectangles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.rectangles[index].x);\n        console.log(this.rectangles[index].y);\n      }\n      if (type === 'ellipse') {\n        this.shapeType = \"Ellipse\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radiusX === this.ellipses[index].radiusX) {\n                  if (this.shapes[i].fill === this.ellipses[index].fill) {\n                    if (this.shapes[i].stroke === this.ellipses[index].stroke) {\n                      if (this.shapes[i].radiusY === this.ellipses[index].radiusY) v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.ellipses[index].x = e.target.x();\n        this.ellipses[index].y = e.target.y();\n        this.shapes[v].x = this.ellipses[index].x;\n        this.shapes[v].y = this.ellipses[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.ellipses[index].x);\n        console.log(this.ellipses[index].y);\n      }\n      if (type === 'line') {\n        this.shapeType = \"Line\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                v = i;\n                console.log(v);\n                break;\n              }\n            }\n          }\n        }\n        this.lines[index].x = e.target.x();\n        this.lines[index].y = e.target.y();\n        this.shapes[v].x = this.lines[index].x;\n        this.shapes[v].y = this.lines[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.lines[index].x);\n        console.log(this.lines[index].y);\n      }\n      if (type === 'square') {\n        this.shapeType = \"Square\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].width === this.squares[index].width) {\n                  if (this.shapes[i].fill === this.squares[index].fill) {\n                    if (this.shapes[i].stroke === this.squares[index].stroke) {\n                      if (this.shapes[i].height === this.squares[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.squares[index].x = e.target.x();\n        this.squares[index].y = e.target.y();\n        this.shapes[v].x = this.squares[index].x;\n        this.shapes[v].y = this.squares[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.squares[index].x);\n        console.log(this.squares[index].y);\n      }\n      if (type === 'triangle') {\n        this.shapeType = \"Triangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radius === this.triangles[index].radius) {\n                  if (this.shapes[i].fill === this.triangles[index].fill) {\n                    if (this.shapes[i].stroke === this.triangles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        console.log(v);\n        this.triangles[index].x = e.target.x();\n        this.triangles[index].y = e.target.y();\n        this.shapes[v].x = this.triangles[index].x;\n        this.shapes[v].y = this.triangles[index].y;\n        this.modifysh = this.shapes[v];\n        this.ord = v;\n        this.modify();\n        console.log(this.triangles[index].x);\n        console.log(this.triangles[index].y);\n      }\n    },\n    rect() {\n      this.rectangle = true;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    brush() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = true;\n    },\n    ellipse() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = true;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    circle() {\n      this.rectangle = false;\n      this.circ = true;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    line() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = true;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    square() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = true;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    triangle() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = true;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    fill() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = true;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    edge() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = true;\n      this.bru = false;\n    },\n    clr() {\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      this.shapes = [];\n    },\n    resize() {\n      this.resiz = true;\n      this.userInput = document.getElementById('userInput').value;\n    },\n    copy() {\n      this.cop = true;\n    },\n    async shapeClicked(type, index) {\n      if (type === 'triangle') {\n        this.shapeType = \"Triangle\";\n        console.log(index);\n        //console.log(this.shapes.length);\n        this.triangles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radius === this.triangles[index].radius) {\n                  if (this.shapes[i].fill === this.triangles[index].fill) {\n                    if (this.shapes[i].stroke === this.triangles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        // console.log(v);\n        console.log(this.shapes);\n        console.log(this.triangles);\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.triangles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.triangles[index].draggable = false;\n          this.triangles[index].radius *= this.userInput;\n          this.triangles[index].draggable = true;\n          this.shapes[v].radius = this.triangles[index].radius;\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.triangles.splice(index, 1);\n          // console.log(this.shapes);\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.triangles[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.triangles[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.triangles[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n\n        /*********************************************************************** */\n      } else if (type === 'circle') {\n        this.shapeType = \"Circle\";\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radius === this.circles[index].radius) {\n                  if (this.shapes[i].fill === this.circles[index].fill) {\n                    if (this.shapes[i].stroke === this.circles[index].stroke) {\n                      v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.circles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.circles[index].draggable = false;\n          this.circles[index].radius *= this.userInput;\n          this.circles[index].draggable = true;\n          this.shapes[v].radius = this.circles[index].radius;\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.circles.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.circles[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.circles[index].fill; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.circles[index].stroke = selectedEdgeColor;\n          this.shapes[v].stroke = this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      } else if (type === 'line') {\n        let v = 0;\n        this.shapeType = \"Line\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                v = i;\n                console.log(v);\n                break;\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.lines.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.delete) {\n          this.lines.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v].stroke = this.lines[index].stroke;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /************************************************************ */else if (type === 'rect') {\n        let v = 0;\n        this.shapeType = \"Rectangle\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].width === this.rectangles[index].width) {\n                  if (this.shapes[i].fill === this.rectangles[index].fill) {\n                    if (this.shapes[i].stroke === this.rectangles[index].stroke) {\n                      if (this.shapes[i].height === this.rectangles[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.rectangles.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        this.rectangles[index].draggable = true;\n        if (this.resiz) {\n          this.rectangles[index].draggable = false;\n          this.rectangles[index].width *= this.userInput;\n          this.rectangles[index].height *= this.userInput;\n          this.rectangles[index].draggable = true;\n          this.shapes[v].width = this.rectangles[index].width;\n          this.shapes[v].height = this.rectangles[index].height;\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.rectangles.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          //selectedFillColor=this.pureColor\n          this.shapes[v].fill = this.rectangles[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.rectangles[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /*************************************************************** */else if (type === 'ellipse') {\n        let v = 0;\n        this.shapeType = \"Ellipse\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].radiusX === this.ellipses[index].radiusX) {\n                  if (this.shapes[i].fill === this.ellipses[index].fill) {\n                    if (this.shapes[i].stroke === this.ellipses[index].stroke) {\n                      if (this.shapes[i].radiusY === this.ellipses[index].radiusY) v = i;\n                      console.log(v);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.ellipses.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.ellipses[index].draggable = false;\n          this.ellipses[index].radiusX *= this.userInput;\n          this.ellipses[index].radiusY *= this.userInput;\n          this.ellipses[index].draggable = true;\n          this.shapes[v].radiusX = this.ellipses[index].radiusx;\n          this.shapes[v].radiusY = this.ellipses[index].radiusY;\n          this.resiz = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.delete) {\n          this.ellipses.splice(index, 1);\n          this.delete = false;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor;\n          this.ellipses[index].fill = selectedFillColor;\n          this.shapes[v].fill = this.ellipses[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff';\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v].stroke = this.ellipses[index].stroke;\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n      /**************************************************** */else if (type === 'square') {\n        let v = 0;\n        this.shapeType = \"Square\";\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] !== null) {\n            if (this.shapes[i].x === this.cc) {\n              if (this.shapes[i].y === this.vv) {\n                if (this.shapes[i].width === this.squares[index].width) {\n                  if (this.shapes[i].fill === this.squares[index].fill) {\n                    if (this.shapes[i].stroke === this.squares[index].stroke) {\n                      if (this.shapes[i].height === this.squares[index].height) {\n                        v = i;\n                        console.log(v);\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (this.cop) {\n          this.ord = v;\n          console.log(this.shapes[v]);\n          await this.prototype();\n          console.log(this.co);\n          this.squares.push({\n            ...this.co\n          });\n          this.shapes.push({\n            ...this.co\n          });\n          this.cop = false;\n        }\n        if (this.resiz) {\n          this.squares[index].draggable = false;\n          this.squares[index].width *= this.userInput;\n          this.squares[index].height *= this.userInput;\n          this.squares[index].draggable = true;\n          this.shapes[v].width = this.squares[index].width;\n          this.shapes[v].height = this.squares[index].height;\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n          this.resiz = false;\n        }\n        // this.squares[index].fill = this.selectedColor;\n        if (this.delete) {\n          this.squares.splice(index, 1);\n          this.delete = false;\n          this.ord = v;\n          this.modify2();\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.shapes[v].fill = this.squares[index].fill;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v].stroke = this.squares[index].stroke;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n          this.modifysh = this.shapes[v];\n          this.ord = v;\n          this.modify();\n        }\n      }\n    },\n    del() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = true;\n      this.coledge = false;\n      this.bru = false;\n    },\n    move() {\n      this.mov = true;\n    },\n    startDrawing() {\n      if (this.rectangle === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              width: 0,\n              height: 0\n            };\n            console.log(this.currentShape.x);\n            console.log(this.currentShape.y);\n          }\n        }\n      } else if (this.circ === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radius: 0\n            };\n          }\n        }\n      } else if (this.ellips === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              strokeWidth: 2,\n              radiusX: 0,\n              radiusY: 0\n            };\n          }\n        }\n      } else if (this.lin === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              stroke: this.pureColor2,\n              strokeWidth: 4,\n              points: [position.x, position.y]\n            };\n          }\n        }\n      } else if (this.sqrt === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              width: 0,\n              height: 0\n            };\n          }\n        }\n      } else if (this.tria) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              strokeWidth: 2,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 0\n            };\n          }\n        }\n      }\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\n    },\n\n    stopDrawing() {\n      if (this.isdraw) {\n        this.isdraw = false;\n        console.log(\"xxxxx\");\n        if (this.circ) {\n          this.shapeType = 'Circle';\n          this.circles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.rectangle) {\n          this.shapeType = 'Rectangle';\n          this.rectangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.ellips) {\n          this.shapeType = 'Ellipse';\n          this.ellipses.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.lin || this.bru) {\n          this.shapeType = 'Line';\n          this.lines.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.sqrt) {\n          this.shapeType = 'Square';\n          this.squares.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.tria) {\n          this.shapeType = 'Triangle';\n          this.triangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        }\n        this.createShape();\n        this.currentShape = null;\n        this.circ = false;\n        this.ellips = false;\n        this.rectangle = false;\n        this.lin = false;\n        this.sqrt = false;\n        this.tria = false;\n        this.mov = false;\n        this.bru = false;\n      }\n    },\n    async createShape() {\n      await fetch('http://localhost:8080/create', {\n        method: 'POST',\n        body: this.shapeType + JSON.stringify(this.currentShape)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async modify() {\n      await fetch('http://localhost:8080/modify', {\n        method: 'POST',\n        body: this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    async prototype() {\n      await fetch('http://localhost:8080/copy', {\n        method: 'POST',\n        body: this.ord\n      }).then(res => res.json()).then(data => this.co = data);\n    },\n    async modify2() {\n      await fetch('http://localhost:8080/delete', {\n        method: 'POST',\n        body: this.ord + \",\" + this.shapeType\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    },\n    draw() {\n      if (this.rectangle) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.y - this.currentShape.y;\n            }\n          }\n        }\n      }\n      //--------------------------------------------------------------------------------\n      else if (this.circ) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n      //************************************************************************************************** */\n      else if (this.ellips) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\n              this.currentShape.radiusY = Math.abs(position.y - this.currentShape.y);\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.lin) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.points[2] = position.x;\n              this.currentShape.points[3] = position.y;\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.sqrt) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.x - this.currentShape.x;\n            }\n          }\n        }\n      }\n      //************************************ **/\n      else if (this.tria) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n    },\n    async saving() {\n      console.log(this.savejason);\n      if (this.savejason) {\n        await fetch('http://localhost:8080/saveJson', {\n          method: 'POST',\n          body: this.path + \".json\"\n        }).catch(error => {\n          console.error('Fetch error:', error);\n        });\n      }\n      if (this.savxml) {\n        await fetch('http://localhost:8080/saveXml', {\n          method: 'POST',\n          body: this.path + \".xml\"\n        }).catch(error => {\n          console.error('Fetch error:', error);\n        });\n      }\n    },\n    async loading() {\n      if (this.lodjason) {\n        let req = await fetch('http://localhost:8080/loadJson', {\n          method: 'POST',\n          body: this.path + \".json\"\n        });\n        let res = req.json();\n        res.then(data => this.shapes = data);\n        c;\n        this.circles = [];\n        this.lines = [];\n        this.squares = [];\n        this.rectangles = [];\n        this.triangles = [];\n        this.ellipses = [];\n        for (let i = 0; i < this.shapes.length; i++) {\n          console.log(\"kladvmakskd\");\n          if (this.shapes[i] !== null) {\n            console.log(this.shapes[i].type);\n            if (this.shapes[i].type === 'Quadrilateral' && this.shapes[i].width !== this.shapes[i].height) {\n              this.rectangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Circle') {\n              console.log(this.shapes[i].type);\n              this.circles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Ellipse') {\n              this.ellipses.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Quadrilateral') {\n              this.squares.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Triangle') {\n              console.log(this.shapes[i].type);\n              this.triangles.push({\n                ...this.shapes[i]\n              });\n            } else if (this.shapes[i].type === 'Line') {\n              this.lines.push({\n                ...this.shapes[i]\n              });\n            }\n          }\n        }\n      }\n      if (this.lodxml) {\n        await fetch('http://localhost:8080/loadXml', {\n          method: 'GET',\n          body: this.path + \".xml\"\n        }).then(res => res.json).then(data => this.shapes = data);\n      }\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      for (let i = 0; i < this.shapes.length; i++) {\n        if (this.shapes[i] !== null) {\n          if (this.shapes[i].type === 'Quadrilateral' && this.shapes[i].width !== this.shapes[i].height) {\n            this.rectangles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Circle') {\n            this.circles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Ellipse') {\n            this.ellipses.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Quadrilateral') {\n            this.squares.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Triangle') {\n            this.triangles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Line') {\n            this.lines.push({\n              ...this.shapes[i]\n            });\n          }\n        }\n      }\n    },\n    savejason() {\n      this.savjason = true;\n      this.savxml = false;\n    },\n    savexml() {\n      this.savxml = true;\n      this.savjason = false;\n    },\n    submity() {\n      this.savdialog = false;\n      this.pathdialog = true;\n    },\n    ok() {\n      this.loaddialog = false;\n      this.pathloaddialog = true;\n    },\n    save() {\n      this.saving();\n      this.savdialog = true;\n    },\n    send() {\n      var str = document.getElementById('path').value;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] == '\\\\') {\n          this.path += '\\\\';\n        }\n        this.path += str[i];\n      }\n      console.log(this.savjason);\n      console.log(this.savxml);\n      console.log(this.path);\n      this.pathdialog = false;\n      this.saving();\n      this.savjaso = false;\n      this.savxml = false;\n    },\n    laod() {\n      this.loaddialog = true;\n    },\n    loadjason() {\n      this.lodjason = true;\n      this.lodxml = false;\n    },\n    loadxml() {\n      this.lodxml = true;\n      this.lodjason = false;\n    },\n    open() {\n      var str = document.getElementById('pathload').value;\n      for (let i = 0; i < str.length; i++) {\n        if (str[i] == '\\\\') {\n          this.path += '\\\\';\n        }\n        this.path += str[i];\n      }\n      console.log(this.lodjason);\n      console.log(this.lodxml);\n      console.log(this.path);\n      this.pathloaddialog = false;\n      this.loading();\n      this.lodjason = false;\n      this.lodxml = false;\n    },\n    async undo() {\n      await fetch('http://localhost:8080/undo', {\n        method: 'GET'\n      }).then(res => res.json()).then(data => this.shapes = data);\n      console.log(this.shapes);\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      for (let i = 0; i < this.shapes.length; i++) {\n        if (this.shapes[i] !== null) {\n          if (this.shapes[i].type === 'Quadrilateral' && this.shapes[i].width !== this.shapes[i].height) {\n            this.rectangles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Circle') {\n            this.circles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Ellipse') {\n            this.ellipses.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Quadrilateral') {\n            this.squares.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Triangle') {\n            this.triangles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Line') {\n            this.lines.push({\n              ...this.shapes[i]\n            });\n          }\n        }\n      }\n    },\n    async Redo() {\n      await fetch('http://localhost:8080/redo', {\n        method: 'GET'\n      }).then(res => res.json()).then(data => this.shapes = data);\n      console.log(this.shapes);\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      for (let i = 0; i < this.shapes.length; i++) {\n        if (this.shapes[i] !== null) {\n          if (this.shapes[i].type === 'Quadrilateral' && this.shapes[i].width !== this.shapes[i].height) {\n            this.rectangles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Circle') {\n            this.circles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Ellipse') {\n            this.ellipses.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Quadrilateral') {\n            this.squares.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Triangle') {\n            this.triangles.push({\n              ...this.shapes[i]\n            });\n          } else if (this.shapes[i].type === 'Line') {\n            this.lines.push({\n              ...this.shapes[i]\n            });\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["ref","ColorInputWithoutInstance","name","data","value","selectedColor","selectedColor2","selectedColor3","selectedColor4","selectedColor5","configKonva","width","height","pureColor","pureColor2","isdraw","rectangles","squares","lines","circles","ellipses","triangles","rectangle","circ","ellips","lin","sqrt","tria","bru","delete","mov","cofill","coledge","currentShape","shapes","selectedShapeName","resiz","userInput","sav","path","shapeType","ord","modifysh","cop","co","cc","vv","tridialog","sqrdialog","circdialog","rectcdialog","elpsdialog","savdialog","savjason","savxml","pathdialog","loaddialog","pathloaddialog","lodjason","lodxml","methods","setup","oldpo","type","index","x","y","newpo","e","v","i","length","radius","fill","stroke","console","log","target","modify","radiusX","radiusY","rect","brush","ellipse","circle","line","square","triangle","edge","clr","resize","document","getElementById","copy","shapeClicked","draggable","prototype","push","splice","modify2","selectedFillColor","selectedEdgeColor","radiusx","del","move","startDrawing","stage","$refs","getStage","position","getPointerPosition","strokeWidth","points","stopDrawing","createShape","fetch","method","body","JSON","stringify","catch","error","then","res","json","draw","Math","pow","abs","saving","savejason","loading","req","c","savexml","submity","ok","save","send","str","savjaso","laod","loadjason","loadxml","open","undo","Redo"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"appaint\" style=\"border:solid black 2px; width:1130px; background-color:#404340 ;\">\r\n    <div class=\"header\">\r\n  <div class=\"operations\" >\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"laod()\">open <i class=\"fa-solid fa-folder-open\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"undo()\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"Redo()\">Redo <i class=\"fa-solid fa-rotate-right\"></i></button>\r\n    <button  style=\"background-color:rgb(111, 125, 131)\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></button>\r\n    <button style=\"background-color:rgb(111, 125, 131)\" @click=\"copy()\">copy <i class=\"fa-solid fa-copy\"></i></button>\r\n    <button for=\"userInput\"  style=\"background-color:rgb(111, 125, 131)\" @click=\"resize() \">resize</button>\r\n    <input type=\"text\" id=\"userInput\" style=\"border:solid black ;\">\r\n    \r\n\r\n     <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>save</h1></v-card-title>\r\n          <v-card-subtitle> xml OR jason  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">jason</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of saving</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title><h1>Open</h1></v-card-title>\r\n          <v-card-subtitle> xml OR jason  </v-card-subtitle>\r\n          <v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">jason</v-btn>\r\n          <div style=\"height:5px;\"></div>\r\n          <v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n      <v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n        <v-card variant=\"outlined\">\r\n          <v-card-title>path of file</v-card-title>\r\n          <input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n          <v-card-actions >\r\n            <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n   \r\n\r\n\r\n\r\n  </div>\r\n  <div class=\"clorfil\" >\r\n    <div class=\"block\">\r\n      <div class=\"fillcolor\">\r\n        <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n    </div>\r\n      <button @click=\"fill()\" style=\"background-color:rgb(111, 125, 131)\">fill<i class=\"fa-solid fa-fill-drip\"></i></button>\r\n      <button @click=\"edge()\" style=\"background-color:rgb(111, 125, 131)\">border<i class=\"fa-solid fa-paintbrush\"></i></button>\r\n    \r\n  </div>\r\n  </div>\r\n</div>\r\n \r\n  <div class=\"paint\">\r\n   \r\n    <div class=\"bordshaps\" >\r\n     \r\n    <div class=\"shaps\">\r\n      <div class=\"block\">\r\n     <button @click=\"square()\" ><div class=\"square\"></div></button>\r\n     <label >square</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <button @click=\"rect()\" ><div class=\"rectengle\"></div></button>\r\n     <label >rectengle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n        <button @click=\"circle()\" ><div class=\"circle\"></div></button>\r\n     <label >circle</label>\r\n    </div>\r\n      <div class=\"block\">\r\n     <button @click=\"triangle()\" ><div class=\"triangle-up\"></div></button>\r\n     <label >triangle</label>\r\n    </div>\r\n    <div class=\"block\">\r\n      <button @click=\"ellipse()\"><div class=\"oval\"></div></button>\r\n      <label >ellips</label>\r\n     </div>\r\n    <div class=\"block\">\r\n      <button @click=\"line()\" style=\"width:30px;\"><i class=\"fa-solid fa-lines-leaning\"></i></button>\r\n      <label >line</label>\r\n     </div>\r\n    </div>\r\n  </div>\r\n    <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n  <v-stage :config=\"configKonva\" ref=\"stage\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" \r\n     >\r\n    <v-layer>\r\n      <!-- drawing rectangles -->\r\n      <v-rect\r\n       v-for=\"(rect, index) in rectangles\"\r\n        :key=\"index\"\r\n        :config=\"{ \r\n          type:'Rectangle',\r\n          x:  rect.x,\r\n          y: rect.y,\r\n          width: rect.width,\r\n          height: rect.height,\r\n          fill: rect.fill, // Use the selected fill color\r\n          stroke: rect.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n           \r\n       }\"\r\n         \r\n        @click=\"shapeClicked('rect', index) \"\r\n         @mouseenter=\"oldpo('rect', index)\"\r\n       @dragend=\"newpo('rect', index, $event)\"   \r\n      \r\n        \r\n      ></v-rect>\r\n     <!-- drawing circles -->\r\n     <v-circle\r\n      v-for=\"(circle, index) in circles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'circle',\r\n          x: circle.x,\r\n          y: circle.y,\r\n          radius:circle.radius,\r\n          fill:circle.fill,\r\n          stroke:circle.stroke,\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n         @click=\"shapeClicked('circle', index)\"\r\n          @mouseenter=\"oldpo('circle', index)\"\r\n         @dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n     </v-circle>\r\n     <!-- drawing ellipses -->\r\n     <v-ellipse\r\n        v-for=\"(ellipse, index) in ellipses\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'ellipse',\r\n          x: ellipse.x,\r\n          y: ellipse.y,\r\n          radiusX:ellipse.radiusX,\r\n          radiusY:ellipse.radiusY,\r\n          fill: ellipse.fill, // Use the selected fill color\r\n          stroke: ellipse.stroke, // Use the selected edge color\r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n       @click=\"shapeClicked('ellipse', index)\"\r\n        @mouseenter=\"oldpo('ellipse', index)\"\r\n       @dragend=\"newpo('ellipse', index, $event)\"   \r\n\r\n     >\r\n\r\n     </v-ellipse>\r\n     <!-- drawing line segment -->\r\n     <v-line\r\n       v-for=\"(line, index) in lines\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'line',\r\n          points:line.points,\r\n          stroke: line.stroke,\r\n          strokeWidth: 4,\r\n          draggable:true,\r\n        }\"\r\n         @click=\"shapeClicked('line', index)\"\r\n          @mouseenter=\"oldpo('line', index)\"\r\n         @dragend=\"newpo('line', index, $event)\"   \r\n     >\r\n\r\n     </v-line>\r\n  <!-- square -->\r\n  <v-rect\r\n   v-for=\"(square, index) in squares\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'square',\r\n           x: square.x,\r\n          y: square.y,\r\n          width: square.width,\r\n          height: square.height,\r\n          fill: square.fill, // Use the selected fill color\r\n          stroke: square.stroke, // Use the selected edge color\r\n          strokeWidth: 2 ,\r\n          draggable:true,\r\n        }\"\r\n      @click=\"shapeClicked('square', index)\"\r\n       @mouseenter=\"oldpo('square', index)\"\r\n      @dragend=\"newpo('square', index, $event)\"   \r\n  >\r\n\r\n  </v-rect>\r\n  <v-regular-polygon\r\n   v-for=\"(triangle, index) in triangles\"\r\n        :key=\"index\"\r\n        :config=\"{\r\n          type:'triangle',\r\n          x: triangle.x,\r\n          y: triangle.y,\r\n          sides:3,\r\n          radius:triangle.radius,\r\n          fill: triangle.fill, \r\n          stroke: triangle.stroke, \r\n          strokeWidth: 2,\r\n          draggable:true,\r\n        }\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @mouseenter=\"oldpo('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\"   \r\n  >\r\n\r\n  </v-regular-polygon>\r\n    \r\n\r\n    </v-layer>\r\n  </v-stage>\r\n</div>\r\n  \r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n//import Konva from 'konva';\r\n\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n        width: 1000,\r\n        height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      delete:false,\r\n      mov:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedShapeName: '',\r\n      resiz:false,\r\n      userInput:0,\r\n\r\n      sav:false,\r\n      path:\"\" ,\r\n      shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n      cc:null,\r\n      vv:null,\r\n      tridialog:false,\r\n        sqrdialog:false,\r\n        circdialog:false,\r\n        rectcdialog:false,\r\n        elpsdialog:false,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n\r\n\r\n    };\r\n  },\r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n    // save()\r\n    // {\r\n    //     this.saving();\r\n    // },\r\n\r\n    oldpo(type, index)\r\n    {\r\n        if(type==='triangle')\r\n        {\r\n            this.cc=this.triangles[index].x;\r\n            this.vv=this.triangles[index].y;\r\n        }\r\n        else if(type==='rect')\r\n        {\r\n          this.cc=this.rectangles[index].x;\r\n            this.vv=this.rectangles[index].y;\r\n        }\r\n        else if(type==='line')\r\n        {\r\n          this.cc=this.lines[index].x;\r\n            this.vv=this.lines[index].y;\r\n        }\r\n        else if(type==='ellipse')\r\n        {\r\n             this.cc=this.ellipses[index].x;\r\n            this.vv=this.ellipses[index].y;\r\n        }\r\n        else if(type==='square')\r\n        {\r\n          \r\n             this.cc=this.squares[index].x;\r\n            this.vv=this.squares[index].y;\r\n        }\r\n        else if(type==='circle')\r\n        {\r\n           this.cc=this.circles[index].x;\r\n            this.vv=this.circles[index].y;\r\n        }\r\n    },\r\n\r\nnewpo(type, index,e) {\r\n   var v=0;\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radius===this.circles[index].radius)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.circles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.circles[index].stroke)\r\n                      {\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n         \r\n        }\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.rectangles[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.rectangles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.rectangles[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.rectangles[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radiusX===this.ellipses[index].radiusX)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.ellipses[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.ellipses[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].radiusY===this.ellipses[index].radiusY)\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n       \r\n        }\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'line') {\r\n      this.shapeType = \"Line\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n       if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n          \r\n                   \r\n                        \r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.squares[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.cc)\r\n              {\r\n                if(this.shapes[i].y===this.vv)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[index].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[index].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[index].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n\r\n    },\r\n    clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n    \r\n    },\r\n    resize(){\r\n      this.resiz=true;\r\n      this.userInput = document.getElementById('userInput').value;\r\n\r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n      if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n         //console.log(this.shapes.length);\r\n           this.triangles[index].draggable=true;\r\n        let v=0;\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n              if(this.shapes[i]!==null)\r\n              {\r\n                        if(this.shapes[i].x===this.cc)\r\n              {\r\n                if(this.shapes[i].y===this.vv)\r\n                { \r\n                    if(this.shapes[i].radius===this.triangles[index].radius)\r\n                    {\r\n                      \r\n\r\n                      if(this.shapes[i].fill===this.triangles[index].fill)\r\n                      {\r\n                          if(this.shapes[i].stroke===this.triangles[index].stroke)\r\n                          {\r\n                                v=i;\r\n                                console.log(v);\r\n                                break;\r\n                          }\r\n                      }\r\n                    }\r\n\r\n\r\n                          \r\n\r\n                }\r\n\r\n              \r\n              }\r\n              }\r\n         \r\n        }\r\n        // console.log(v);\r\n        console.log(this.shapes)\r\n        console.log(this.triangles)\r\n\r\n        if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n        }\r\n      if(this.resiz)\r\n      {\r\n       \r\n        this.triangles[index].draggable=false;\r\n        this.triangles[index].radius *=  this.userInput;\r\n        this.triangles[index].draggable=true;\r\n        this.shapes[v].radius=this.triangles[index].radius;\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()\r\n\r\n      }\r\n        if(this.delete)\r\n        {\r\n          \r\n              this.triangles.splice(index,1);\r\n             // console.log(this.shapes);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n        }\r\n\r\n       if (this.cofill) {\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radius===this.circles[index].radius)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.circles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.circles[index].stroke)\r\n                      {\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n         \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.circles[index].draggable=false;\r\n        this.circles[index].radius *= this.userInput;\r\n        this.circles[index].draggable=true;\r\n        this.shapes[v].radius=this.circles[index].radius;\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n           this.modify()\r\n      }\r\n          if(this.delete)\r\n        {\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n          \r\n\r\n\r\n                       \r\n                               \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                              \r\n\r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n          \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n         \r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                 if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.rectangles[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.rectangles[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.rectangles[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.rectangles[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n         if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      this.rectangles[index].draggable=true;\r\n      if(this.resiz)\r\n      {\r\n        this.rectangles[index].draggable=false;\r\n        this.rectangles[index].width *= this.userInput;\r\n        this.rectangles[index].height *= this.userInput;\r\n        this.rectangles[index].draggable=true;\r\n        this.shapes[v].width=this.rectangles[index].width;\r\n        this.shapes[v].height=this.rectangles[index].height;\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n          this.modify()\r\n      }\r\n             if(this.delete)\r\n        {\r\n         \r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].radiusX===this.ellipses[index].radiusX)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.ellipses[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.ellipses[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].radiusY===this.ellipses[index].radiusY)\r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n       \r\n        }\r\n        if(this.cop)\r\n        {\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.ellipses[index].draggable=false;\r\n        this.ellipses[index].radiusX *=  this.userInput;\r\n        this.ellipses[index].radiusY *=  this.userInput;\r\n        this.ellipses[index].draggable=true;\r\n        this.shapes[v].radiusX=this.ellipses[index].radiusx;\r\n                this.shapes[v].radiusY=this.ellipses[index].radiusY;\r\n\r\n        this.resiz=false;\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify();\r\n\r\n      }\r\n                if(this.delete)\r\n        {\r\n         \r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n        /**************************************************** */\r\n     else if(type==='square')\r\n     {\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].x===this.cc)\r\n          {\r\n            if(this.shapes[i].y===this.vv)\r\n            { \r\n                if(this.shapes[i].width===this.squares[index].width)\r\n                {\r\n                   \r\n\r\n                   if(this.shapes[i].fill===this.squares[index].fill)\r\n                   {\r\n                      if(this.shapes[i].stroke===this.squares[index].stroke)\r\n                      {\r\n                        if(this.shapes[i].height===this.squares[index].height)\r\n                        {\r\n                                 \r\n                             v=i;\r\n                            console.log(v);\r\n                            break;\r\n                        }\r\n                      }\r\n                   }\r\n                }\r\n\r\n\r\n                       \r\n\r\n            }\r\n\r\n          \r\n          }\r\n          }\r\n        \r\n        }\r\n         if(this.cop)\r\n        {\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n           \r\n           \r\n        }\r\n      if(this.resiz)\r\n      {\r\n        this.squares[index].draggable=false;\r\n        this.squares[index].width *=  this.userInput;\r\n        this.squares[index].height *=  this.userInput;\r\n       \r\n        this.squares[index].draggable=true;\r\n         this.shapes[v].width=this.squares[index].width;\r\n         this.shapes[v].height=this.squares[index].height;\r\n           this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n            this.modify()\r\n            this.resiz=false;\r\n      }\r\n     // this.squares[index].fill = this.selectedColor;\r\n               if(this.delete)\r\n        {\r\n         \r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n              this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n    },\r\n    move()\r\n    {\r\n      this.mov=true;\r\n    },\r\n    \r\n    \r\n      startDrawing() {\r\n     if(this.rectangle===true)\r\n      {\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 0,\r\n            height: 0,\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ===true){\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 0,\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips===true)\r\n      {\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 0,\r\n              radiusY:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin===true)\r\n      {\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt===true)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 0,\r\n            height: 0,\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:0\r\n              };\r\n            }\r\n          }\r\n      }\r\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\r\n  \r\n     \r\n      \r\n    \r\n    },\r\n    stopDrawing() {\r\n     \r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin||this.bru)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n\r\n\r\n\r\n        this.currentShape = null;\r\n        this.circ=false;\r\n        this.ellips=false;\r\n        this.rectangle=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.mov = false;\r\n        this.bru=false;\r\n      }\r\n     \r\n      \r\n      \r\n    \r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    draw() {\r\n      if(this.rectangle)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.y - this.currentShape.y;\r\n          }\r\n        }\r\n      }\r\n      }\r\n    //--------------------------------------------------------------------------------\r\n      else if(this.circ)\r\n      {\r\n          if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radius = Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************************************************************************** */\r\n      else if(this.ellips)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\r\n            this.currentShape.radiusY=Math.abs(position.y - this.currentShape.y);\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.lin)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n             this.currentShape.points[2] = position.x;\r\n          this.currentShape.points[3] = position.y;\r\n           \r\n          }\r\n        }\r\n      }\r\n      }\r\n      //******************************************** */\r\n      else if(this.sqrt)\r\n      {\r\n            if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape.width = position.x - this.currentShape.x;\r\n            this.currentShape.height = position.x - this.currentShape.x;\r\n          }\r\n        }\r\n      }\r\n      }\r\n      //************************************ **/\r\n      else if(this.tria)\r\n      {\r\n             if (this.isdraw) {\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n           \r\n            this.currentShape.radius=Math.sqrt(\r\n                Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n          }\r\n        }\r\n      }\r\n      }\r\n      \r\n    },\r\n\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savejason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      },\r\n\r\n     async loading(){ \r\n        if(this.lodjason){\r\n        let req =  await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        });\r\n        let res = (req.json())\r\n        res.then(data => this.shapes = data)\r\n        c\r\n        \r\nthis.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        console.log(\"kladvmakskd\")\r\n        if(this.shapes[i]!==null)\r\n        {\r\n          console.log(this.shapes[i].type)\r\n          if(this.shapes[i].type==='Quadrilateral'&&this.shapes[i].width!==this.shapes[i].height)\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n            console.log(this.shapes[i].type)\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Quadrilateral')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            console.log(this.shapes[i].type)\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      \r\n\r\n      }\r\n      if(this.lodxml){\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'GET',\r\n          body: this.path+\".xml\",\r\n        }).then(res=>res.json)\r\n          .then(data=>this.shapes=data)}\r\n           \r\n           this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Quadrilateral'&&this.shapes[i].width!==this.shapes[i].height)\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Quadrilateral')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n\r\n      },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n        \r\n\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        \r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n\r\n\r\n      },\r\n\r\n     \r\n\r\n\r\n    async undo()\r\n    {\r\n         await fetch('http://localhost:8080/undo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Quadrilateral'&&this.shapes[i].width!==this.shapes[i].height)\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Quadrilateral')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n    },\r\n     async Redo()\r\n    {\r\n         await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      \r\n      for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Quadrilateral'&&this.shapes[i].width!==this.shapes[i].height)\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Quadrilateral')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style>\r\n.paint{\r\n  display: flex;\r\n  justify-content: center;\r\n  justify-items: center;\r\n  \r\n}\r\n.header{\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap:0px;\r\n\r\n}\r\n.operations{\r\n  width:600px;\r\n  border: #555 solid  ;\r\n  border-color: #555;\r\n  background-color: rgb(111, 125, 131);\r\n  border-radius:20px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-content: center;\r\n  margin:10px;\r\n  margin:  2px auto;\r\n  justify-content: center;\r\n  justify-items: center;\r\n\r\n}\r\n.clorfil{\r\n  margin-right: 30px;\r\n  width:180px;\r\n  border: rgb(7, 5, 5) solid  ;\r\n  border-color: #555;\r\n  background-color: rgb(111, 125, 131);\r\n  border-radius:20px;\r\n  \r\n}\r\n.bordshaps{\r\n  height: 180px;\r\n  margin: 3px;\r\n  padding-left: 1px;\r\n  padding-right: 1px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: #555 solid  ;\r\n  border-color: #555;\r\n  background-color: rgb(111, 125, 131);\r\n  border-radius:20px;\r\n  margin:   auto 2px;\r\n  justify-items: center;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  \r\n}\r\n\r\n.shaps{\r\n  margin-right: 3px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  \r\n} \r\nlabel{\r\n  opacity: 0.2;\r\n  color: aliceblue;\r\n  \r\n}\r\n.block{\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 5px;\r\n}\r\nbutton:hover {\r\n  cursor: pointer;\r\n}\r\nlabel:hover{\r\n  opacity: 100;\r\n  color: aliceblue;\r\n\r\n}\r\n.square {\r\n  height: 10px;\r\n  width: 10px;\r\n  border: black solid;\r\n}\r\n.rectengle {\r\n  height: 5px;\r\n  width: 10px;\r\n  border: black solid;\r\n}\r\n.circle {\r\n  height: 10px;\r\n  width: 10px;\r\n  border: black solid;\r\n  border-radius: 50%;\r\n}\r\n.circle1{\r\n  height: 50px;\r\n  width: 50px;\r\n  border: black solid;\r\n  border-radius: 50%;\r\n}\r\n.oval {\r\n  height: 5px;\r\n  width: 10px;\r\n  border: black solid;\r\n  \r\n  border-radius: 50%;\r\n}\r\n.triangle-up {\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 8px solid transparent;\r\n    border-right: 8px solid transparent;\r\n    border-bottom: 14px solid #555;\r\n}\r\n.line{\r\n    border-left: 1px solid transparent;\r\n    border-bottom:18px solid #555;\r\n}\r\n.color{\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n\r\n}\r\n.fillcolor{\r\n  height: 24px;\r\n  width: 23px;\r\n  border: black solid;\r\n  border-radius: 49%;\r\n  overflow: hidden;\r\n\r\n}\r\n\r\n</style>"],"mappings":";AAkPA;;AAEA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,yBAAwB,QAAS,YAAY;AAEtD,eAAgB;EACdC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,IAAI;MACXC,aAAa,EAAE,EAAE;MACjBC,cAAc,EAAE,EAAE;MAClBC,cAAc,EAAE,EAAE;MAClBC,cAAc,EAAE,EAAE;MAClBC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE;QACXC,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE;MACV,CAAC;MACDC,SAAS,EAAE,SAAS;MAAE;MACtBC,UAAU,EAAE,SAAS;MAAE;MACvBC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAC,EAAE;MACbC,OAAO,EAAC,EAAE;MACVC,KAAK,EAAC,EAAE;MACRC,OAAO,EAAC,EAAE;MACVC,QAAQ,EAAC,EAAE;MACXC,SAAS,EAAC,EAAE;MACZC,SAAS,EAAC,KAAK;MACfC,IAAI,EAAC,KAAK;MACVC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAC,KAAK;MACTC,IAAI,EAAC,KAAK;MACVC,IAAI,EAAC,KAAK;MACVC,GAAG,EAAC,KAAK;MACTC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAC,KAAK;MACTC,MAAM,EAAC,KAAK;MACZC,OAAO,EAAC,KAAK;MACbC,YAAY,EAAC,IAAI;MACjBC,MAAM,EAAC,EAAE;MACTC,iBAAiB,EAAE,EAAE;MACrBC,KAAK,EAAC,KAAK;MACXC,SAAS,EAAC,CAAC;MAEXC,GAAG,EAAC,KAAK;MACTC,IAAI,EAAC,EAAC;MACNC,SAAS,EAAE,EAAE;MACbC,GAAG,EAAC,IAAI;MACRC,QAAQ,EAAC,IAAI;MACbC,GAAG,EAAC,KAAK;MACTC,EAAE,EAAC,IAAI;MACPC,EAAE,EAAC,IAAI;MACPC,EAAE,EAAC,IAAI;MACPC,SAAS,EAAC,KAAK;MACbC,SAAS,EAAC,KAAK;MACfC,UAAU,EAAC,KAAK;MAChBC,WAAW,EAAC,KAAK;MACjBC,UAAU,EAAC,KAAK;MAChBC,SAAS,EAAC,KAAK;MACfC,QAAQ,EAAC,KAAK;MACdC,MAAM,EAAC,KAAK;MACZC,UAAU,EAAC,KAAK;MAChBC,UAAU,EAAC,KAAK;MAChBC,cAAc,EAAC,KAAK;MACpBC,QAAQ,EAAC,KAAK;MACdC,MAAM,EAAC;IAGX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAG;MACN,MAAMhD,SAAQ,GAAIb,GAAG,GAACC,yBAAyB,GAAE,KAAM;MACvD,OAAM;QAACY;MAAS;IAClB,CAAC;IACD;IACA;IACA;IACA;;IAEAiD,KAAKA,CAACC,IAAI,EAAEC,KAAK,EACjB;MACI,IAAGD,IAAI,KAAG,UAAU,EACpB;QACI,IAAI,CAAClB,EAAE,GAAC,IAAI,CAACxB,SAAS,CAAC2C,KAAK,CAAC,CAACC,CAAC;QAC/B,IAAI,CAACnB,EAAE,GAAC,IAAI,CAACzB,SAAS,CAAC2C,KAAK,CAAC,CAACE,CAAC;MACnC,OACK,IAAGH,IAAI,KAAG,MAAM,EACrB;QACE,IAAI,CAAClB,EAAE,GAAC,IAAI,CAAC7B,UAAU,CAACgD,KAAK,CAAC,CAACC,CAAC;QAC9B,IAAI,CAACnB,EAAE,GAAC,IAAI,CAAC9B,UAAU,CAACgD,KAAK,CAAC,CAACE,CAAC;MACpC,OACK,IAAGH,IAAI,KAAG,MAAM,EACrB;QACE,IAAI,CAAClB,EAAE,GAAC,IAAI,CAAC3B,KAAK,CAAC8C,KAAK,CAAC,CAACC,CAAC;QACzB,IAAI,CAACnB,EAAE,GAAC,IAAI,CAAC5B,KAAK,CAAC8C,KAAK,CAAC,CAACE,CAAC;MAC/B,OACK,IAAGH,IAAI,KAAG,SAAS,EACxB;QACK,IAAI,CAAClB,EAAE,GAAC,IAAI,CAACzB,QAAQ,CAAC4C,KAAK,CAAC,CAACC,CAAC;QAC/B,IAAI,CAACnB,EAAE,GAAC,IAAI,CAAC1B,QAAQ,CAAC4C,KAAK,CAAC,CAACE,CAAC;MAClC,OACK,IAAGH,IAAI,KAAG,QAAQ,EACvB;QAEK,IAAI,CAAClB,EAAE,GAAC,IAAI,CAAC5B,OAAO,CAAC+C,KAAK,CAAC,CAACC,CAAC;QAC9B,IAAI,CAACnB,EAAE,GAAC,IAAI,CAAC7B,OAAO,CAAC+C,KAAK,CAAC,CAACE,CAAC;MACjC,OACK,IAAGH,IAAI,KAAG,QAAQ,EACvB;QACG,IAAI,CAAClB,EAAE,GAAC,IAAI,CAAC1B,OAAO,CAAC6C,KAAK,CAAC,CAACC,CAAC;QAC5B,IAAI,CAACnB,EAAE,GAAC,IAAI,CAAC3B,OAAO,CAAC6C,KAAK,CAAC,CAACE,CAAC;MACjC;IACJ,CAAC;IAELC,KAAKA,CAACJ,IAAI,EAAEC,KAAK,EAACI,CAAC,EAAE;MAClB,IAAIC,CAAC,GAAC,CAAC;MACR,IAAIN,IAAG,KAAM,QAAQ,EAAE;QACrB,IAAI,CAACvB,SAAQ,GAAI,QAAO;QACvB,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACjC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACM,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACnC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAACE,MAAM,KAAG,IAAI,CAACrD,OAAO,CAAC6C,KAAK,CAAC,CAACQ,MAAM,EACrD;kBAGG,IAAG,IAAI,CAACtC,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACtD,OAAO,CAAC6C,KAAK,CAAC,CAACS,IAAI,EACjD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACvD,OAAO,CAAC6C,KAAK,CAAC,CAACU,MAAM,EACrD;sBACOL,CAAC,GAACC,CAAC;sBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;sBACd;oBACN;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACJ,IAAI,CAAClD,OAAO,CAAC6C,KAAK,CAAC,CAACC,CAAC,GAACG,CAAC,CAACS,MAAM,CAACZ,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC9C,OAAO,CAAC6C,KAAK,CAAC,CAACE,CAAC,GAACE,CAAC,CAACS,MAAM,CAACX,CAAC,CAAC,CAAC;QAClC,IAAI,CAAChC,MAAM,CAACmC,CAAC,CAAC,CAACJ,CAAC,GAAC,IAAI,CAAC9C,OAAO,CAAC6C,KAAK,CAAC,CAACC,CAAC;QACtC,IAAI,CAAC/B,MAAM,CAACmC,CAAC,CAAC,CAACH,CAAC,GAAC,IAAI,CAAC/C,OAAO,CAAC6C,KAAK,CAAC,CAACE,CAAC;QACtC,IAAI,CAACxB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;QAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;QACV,IAAI,CAACS,MAAM,CAAC;QACZH,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC,CAAC;QAC3BM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzD,OAAO,CAAC6C,KAAK,CAAC,CAACC,CAAC,CAAC;QAClCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzD,OAAO,CAAC6C,KAAK,CAAC,CAACE,CAAC,CAAC;MAClC;MACA,IAAIH,IAAG,KAAM,MAAM,EAAE;QACnB,IAAI,CAACvB,SAAQ,GAAI,WAAU;QAC5B,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACjC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACO,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACpC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACK,UAAU,CAACgD,KAAK,CAAC,CAACrD,KAAK,EACtD;kBAGG,IAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACzD,UAAU,CAACgD,KAAK,CAAC,CAACS,IAAI,EACpD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAAC1D,UAAU,CAACgD,KAAK,CAAC,CAACU,MAAM,EACxD;sBACE,IAAG,IAAI,CAACxC,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,KAAG,IAAI,CAACI,UAAU,CAACgD,KAAK,CAAC,CAACpD,MAAM,EACxD;wBAEKyD,CAAC,GAACC,CAAC;wBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;wBACd;sBACJ;oBACF;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACJ,IAAI,CAACrD,UAAU,CAACgD,KAAK,CAAC,CAACC,CAAC,GAACG,CAAC,CAACS,MAAM,CAACZ,CAAC,CAAC,CAAC;QACrC,IAAI,CAACjD,UAAU,CAACgD,KAAK,CAAC,CAACE,CAAC,GAACE,CAAC,CAACS,MAAM,CAACX,CAAC,CAAC,CAAC;QACrC,IAAI,CAAChC,MAAM,CAACmC,CAAC,CAAC,CAACJ,CAAC,GAAC,IAAI,CAACjD,UAAU,CAACgD,KAAK,CAAC,CAACC,CAAC;QACzC,IAAI,CAAC/B,MAAM,CAACmC,CAAC,CAAC,CAACH,CAAC,GAAC,IAAI,CAAClD,UAAU,CAACgD,KAAK,CAAC,CAACE,CAAC;QACvC,IAAI,CAACxB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;QAC9B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;QACV,IAAI,CAACS,MAAM,CAAC;QACZH,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC5D,UAAU,CAACgD,KAAK,CAAC,CAACC,CAAC,CAAC;QACrCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC5D,UAAU,CAACgD,KAAK,CAAC,CAACE,CAAC,CAAC;MACrC;MACA,IAAIH,IAAG,KAAM,SAAS,EAAE;QACtB,IAAI,CAACvB,SAAQ,GAAI,SAAQ;QAC3B,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAChC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACQ,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACrC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAACS,OAAO,KAAG,IAAI,CAAC3D,QAAQ,CAAC4C,KAAK,CAAC,CAACe,OAAO,EACxD;kBAGG,IAAG,IAAI,CAAC7C,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACrD,QAAQ,CAAC4C,KAAK,CAAC,CAACS,IAAI,EAClD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACtD,QAAQ,CAAC4C,KAAK,CAAC,CAACU,MAAM,EACtD;sBACE,IAAG,IAAI,CAACxC,MAAM,CAACoC,CAAC,CAAC,CAACU,OAAO,KAAG,IAAI,CAAC5D,QAAQ,CAAC4C,KAAK,CAAC,CAACgB,OAAO,EACnDX,CAAC,GAACC,CAAC;sBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;sBACd;oBACN;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACJ,IAAI,CAACjD,QAAQ,CAAC4C,KAAK,CAAC,CAACC,CAAC,GAACG,CAAC,CAACS,MAAM,CAACZ,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC7C,QAAQ,CAAC4C,KAAK,CAAC,CAACE,CAAC,GAACE,CAAC,CAACS,MAAM,CAACX,CAAC,CAAC,CAAC;QACnC,IAAI,CAAChC,MAAM,CAACmC,CAAC,CAAC,CAACJ,CAAC,GAAC,IAAI,CAAC7C,QAAQ,CAAC4C,KAAK,CAAC,CAACC,CAAC;QACvC,IAAI,CAAC/B,MAAM,CAACmC,CAAC,CAAC,CAACH,CAAC,GAAC,IAAI,CAAC9C,QAAQ,CAAC4C,KAAK,CAAC,CAACE,CAAC;QACrC,IAAI,CAACxB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;QAC9B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;QACV,IAAI,CAACS,MAAM,CAAC;QACZH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACxD,QAAQ,CAAC4C,KAAK,CAAC,CAACC,CAAC,CAAC;QACnCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACxD,QAAQ,CAAC4C,KAAK,CAAC,CAACE,CAAC,CAAC;MACnC;MACA,IAAIH,IAAG,KAAM,MAAM,EAAE;QACnB,IAAI,CAACvB,SAAQ,GAAI,MAAK;QACxB,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAChC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACH,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC1B;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBAKiBuB,CAAC,GAACC,CAAC;gBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;gBACd;cAChB;YAGF;UACA;QAEF;QACJ,IAAI,CAACnD,KAAK,CAAC8C,KAAK,CAAC,CAACC,CAAC,GAACG,CAAC,CAACS,MAAM,CAACZ,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC/C,KAAK,CAAC8C,KAAK,CAAC,CAACE,CAAC,GAACE,CAAC,CAACS,MAAM,CAACX,CAAC,CAAC,CAAC;QAChC,IAAI,CAAChC,MAAM,CAACmC,CAAC,CAAC,CAACJ,CAAC,GAAC,IAAI,CAAC/C,KAAK,CAAC8C,KAAK,CAAC,CAACC,CAAC;QACpC,IAAI,CAAC/B,MAAM,CAACmC,CAAC,CAAC,CAACH,CAAC,GAAC,IAAI,CAAChD,KAAK,CAAC8C,KAAK,CAAC,CAACE,CAAC;QAClC,IAAI,CAACxB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;QAC9B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;QACV,IAAI,CAACS,MAAM,CAAC;QACZH,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1D,KAAK,CAAC8C,KAAK,CAAC,CAACC,CAAC,CAAC;QAChCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1D,KAAK,CAAC8C,KAAK,CAAC,CAACE,CAAC,CAAC;MAChC;MACA,IAAIH,IAAG,KAAM,QAAQ,EAAE;QACrB,IAAI,CAACvB,SAAQ,GAAI,QAAO;QAC1B,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAChC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACQ,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACrC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACM,OAAO,CAAC+C,KAAK,CAAC,CAACrD,KAAK,EACnD;kBAGG,IAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACxD,OAAO,CAAC+C,KAAK,CAAC,CAACS,IAAI,EACjD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACzD,OAAO,CAAC+C,KAAK,CAAC,CAACU,MAAM,EACrD;sBACE,IAAG,IAAI,CAACxC,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,KAAG,IAAI,CAACK,OAAO,CAAC+C,KAAK,CAAC,CAACpD,MAAM,EACrD;wBAEKyD,CAAC,GAACC,CAAC;wBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;wBACd;sBACJ;oBACF;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACJ,IAAI,CAACpD,OAAO,CAAC+C,KAAK,CAAC,CAACC,CAAC,GAACG,CAAC,CAACS,MAAM,CAACZ,CAAC,CAAC,CAAC;QAClC,IAAI,CAAChD,OAAO,CAAC+C,KAAK,CAAC,CAACE,CAAC,GAACE,CAAC,CAACS,MAAM,CAACX,CAAC,CAAC,CAAC;QAClC,IAAI,CAAChC,MAAM,CAACmC,CAAC,CAAC,CAACJ,CAAC,GAAC,IAAI,CAAChD,OAAO,CAAC+C,KAAK,CAAC,CAACC,CAAC;QACtC,IAAI,CAAC/B,MAAM,CAACmC,CAAC,CAAC,CAACH,CAAC,GAAC,IAAI,CAACjD,OAAO,CAAC+C,KAAK,CAAC,CAACE,CAAC;QACpC,IAAI,CAACxB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;QAC9B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;QACV,IAAI,CAACS,MAAM,CAAC;QACZH,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3D,OAAO,CAAC+C,KAAK,CAAC,CAACC,CAAC,CAAC;QAClCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3D,OAAO,CAAC+C,KAAK,CAAC,CAACE,CAAC,CAAC;MAClC;MACA,IAAIH,IAAG,KAAM,UAAU,EAAE;QACvB,IAAI,CAACvB,SAAQ,GAAI,UAAS;QAExB,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACpC;UACM,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACU,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACvC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAACE,MAAM,KAAG,IAAI,CAACnD,SAAS,CAAC2C,KAAK,CAAC,CAACQ,MAAM,EACvD;kBAGE,IAAG,IAAI,CAACtC,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACpD,SAAS,CAAC2C,KAAK,CAAC,CAACS,IAAI,EACnD;oBACI,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACrD,SAAS,CAAC2C,KAAK,CAAC,CAACU,MAAM,EACvD;sBACML,CAAC,GAACC,CAAC;sBACHK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;sBACd;oBACN;kBACJ;gBACF;cAKJ;YAGF;UACA;QAEN;QACCM,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;QACnB,IAAI,CAAChD,SAAS,CAAC2C,KAAK,CAAC,CAACC,CAAC,GAACG,CAAC,CAACS,MAAM,CAACZ,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC5C,SAAS,CAAC2C,KAAK,CAAC,CAACE,CAAC,GAACE,CAAC,CAACS,MAAM,CAACX,CAAC,CAAC,CAAC;QACpC,IAAI,CAAChC,MAAM,CAACmC,CAAC,CAAC,CAACJ,CAAC,GAAC,IAAI,CAAC5C,SAAS,CAAC2C,KAAK,CAAC,CAACC,CAAC;QACxC,IAAI,CAAC/B,MAAM,CAACmC,CAAC,CAAC,CAACH,CAAC,GAAC,IAAI,CAAC7C,SAAS,CAAC2C,KAAK,CAAC,CAACE,CAAC;QACxC,IAAI,CAACxB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;QAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;QACV,IAAI,CAACS,MAAM,CAAC;QACZH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvD,SAAS,CAAC2C,KAAK,CAAC,CAACC,CAAC,CAAC;QACpCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvD,SAAS,CAAC2C,KAAK,CAAC,CAACE,CAAC,CAAC;MACpC;IAEF,CAAC;IACCe,IAAIA,CAAA,EAAE;MACD,IAAI,CAAC3D,SAAS,GAAC,IAAI;MACrB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACDsD,KAAKA,CAAA,EAAE;MACA,IAAI,CAAC5D,SAAS,GAAC,KAAK;MACxB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,IAAI;IACf,CAAC;IACDuD,OAAOA,CAAA,EACP;MACG,IAAI,CAAC7D,SAAS,GAAC,KAAK;MACpB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,IAAI;MAChB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACDwD,MAAMA,CAAA,EACN;MACK,IAAI,CAAC9D,SAAS,GAAC,KAAK;MACtB,IAAI,CAACC,IAAI,GAAC,IAAI;MACf,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACDyD,IAAIA,CAAA,EACJ;MACO,IAAI,CAAC/D,SAAS,GAAC,KAAK;MACxB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,IAAI;MACb,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACD0D,MAAMA,CAAA,EACN;MAEM,IAAI,CAAChE,SAAS,GAAC,KAAK;MACvB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,IAAI;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACD2D,QAAQA,CAAA,EACR;MACM,IAAI,CAACjE,SAAS,GAAC,KAAK;MACvB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,IAAI;MACd,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACD6C,IAAIA,CAAA,EAAE;MAEA,IAAI,CAACnD,SAAS,GAAC,KAAK;MACvB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,IAAI;MAChB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAEhB,CAAC;IACD4D,IAAIA,CAAA,EAAE;MACF,IAAI,CAAClE,SAAS,GAAC,KAAK;MACrB,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,KAAK;MACjB,IAAI,CAACG,OAAO,GAAC,IAAI;MACjB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAEhB,CAAC;IACD6D,GAAGA,CAAA,EACH;MACE,IAAI,CAACtE,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,KAAK,GAAC,EAAE;MACb,IAAI,CAACD,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,UAAU,GAAC,EAAE;MAClB,IAAI,CAACK,SAAS,GAAC,EAAE;MACjB,IAAI,CAACD,QAAQ,GAAC,EAAE;MAChB,IAAI,CAACc,MAAM,GAAC,EAAE;IAEhB,CAAC;IACDwD,MAAMA,CAAA,EAAE;MACN,IAAI,CAACtD,KAAK,GAAC,IAAI;MACf,IAAI,CAACC,SAAQ,GAAIsD,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACxF,KAAK;IAE7D,CAAC;IACDyF,IAAIA,CAAA,EACJ;MACE,IAAI,CAAClD,GAAG,GAAC,IAAI;IACf,CAAC;IAED,MAAMmD,YAAYA,CAAC/B,IAAI,EAAEC,KAAK,EAAE;MAC9B,IAAGD,IAAI,KAAG,UAAU,EACrB;QACC,IAAI,CAACvB,SAAQ,GAAI,UAAS;QACvBmC,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;QAClB;QACE,IAAI,CAAC3C,SAAS,CAAC2C,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;QACvC,IAAI1B,CAAC,GAAC,CAAC;QACT,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAClC;UACM,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACU,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACvC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAACE,MAAM,KAAG,IAAI,CAACnD,SAAS,CAAC2C,KAAK,CAAC,CAACQ,MAAM,EACvD;kBAGE,IAAG,IAAI,CAACtC,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACpD,SAAS,CAAC2C,KAAK,CAAC,CAACS,IAAI,EACnD;oBACI,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACrD,SAAS,CAAC2C,KAAK,CAAC,CAACU,MAAM,EACvD;sBACML,CAAC,GAACC,CAAC;sBACHK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;sBACd;oBACN;kBACJ;gBACF;cAKJ;YAGF;UACA;QAEN;QACA;QACAM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM;QACvByC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvD,SAAS;QAE1B,IAAG,IAAI,CAACsB,GAAG,EACX;UACE,IAAI,CAACF,GAAG,GAAC4B,CAAC;UACVM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC;UAC1B,MAAM,IAAI,CAAC2B,SAAS,CAAC,CAAC;UACtBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,EAAE;UACnB,IAAI,CAACvB,SAAS,CAAC4E,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAChC,IAAI,CAACV,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC7B,IAAI,CAACD,GAAE,GAAI,KAAI;QACjB;QACF,IAAG,IAAI,CAACP,KAAK,EACb;UAEE,IAAI,CAACf,SAAS,CAAC2C,KAAK,CAAC,CAAC+B,SAAS,GAAC,KAAK;UACrC,IAAI,CAAC1E,SAAS,CAAC2C,KAAK,CAAC,CAACQ,MAAK,IAAM,IAAI,CAACnC,SAAS;UAC/C,IAAI,CAAChB,SAAS,CAAC2C,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;UACpC,IAAI,CAAC7D,MAAM,CAACmC,CAAC,CAAC,CAACG,MAAM,GAAC,IAAI,CAACnD,SAAS,CAAC2C,KAAK,CAAC,CAACQ,MAAM;UAClD,IAAI,CAACpC,KAAK,GAAC,KAAK;UACd,IAAI,CAACM,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UACxB,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACV,IAAI,CAACS,MAAM,CAAC;QAEpB;QACE,IAAG,IAAI,CAACjD,MAAM,EACd;UAEM,IAAI,CAACR,SAAS,CAAC6E,MAAM,CAAClC,KAAK,EAAC,CAAC,CAAC;UAC/B;UACE,IAAI,CAACtB,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UACvB,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACV,IAAI,CAAC8B,OAAO,CAAC;UACnB,IAAI,CAACtE,MAAM,GAAC,KAAK;QACvB;QAED,IAAI,IAAI,CAACE,MAAM,EAAE;UAChB,IAAMqE,iBAAgB,GAAI,IAAI,CAACvF,SAAS,EAAE;UAC1C,IAAI,CAACP,cAAc,GAAE8F,iBAAgB;UACrC,IAAI,CAAC/E,SAAS,CAAC2C,KAAK,CAAC,CAACS,IAAG,GAAI2B,iBAAiB;UAC9C,IAAI,CAAClE,MAAM,CAACmC,CAAC,CAAC,CAACI,IAAI,GAAC,IAAI,CAACpD,SAAS,CAAC2C,KAAK,CAAC,CAACS,IAAI,EAAQ;UACtD2B,iBAAiB,GAAC,IAAI,CAACvF,SAAQ;UAC/B,IAAI,CAACkB,MAAK,GAAI,KAAK;UACnB,IAAI,CAAClB,SAAQ,GAAI,SAAS,EAAE;UAC1B,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UACzB,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACT,IAAI,CAACS,MAAM,CAAC;QACT;QACJ,IAAG,IAAI,CAAC9C,OAAO,EAAC;UACf,IAAIqE,iBAAgB,GAAI,IAAI,CAACxF,SAAS,EAAE;UAC5C,IAAI,CAACQ,SAAS,CAAC2C,KAAK,CAAC,CAACU,MAAK,GAAI2B,iBAAiB;UAChD,IAAI,CAACnE,MAAM,CAACmC,CAAC,CAAC,CAACK,MAAM,GAAC,IAAI,CAACrD,SAAS,CAAC2C,KAAK,CAAC,CAACU,MAAM,EAAE;UACpD,IAAI,CAAC1C,OAAM,GAAI,KAAK;UACpB,IAAI,CAACnB,SAAQ,GAAI,SAAS,EAAE;UACrB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC3B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACX,IAAI,CAACS,MAAM,CAAC;QAEnB;;QAEH;MAEF,OACK,IAAGf,IAAI,KAAG,QAAQ,EACvB;QACE,IAAI,CAACvB,SAAQ,GAAI,QAAO;QACxB,IAAI6B,CAAC,GAAC,CAAC;QACR,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAClC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACM,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACnC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAACE,MAAM,KAAG,IAAI,CAACrD,OAAO,CAAC6C,KAAK,CAAC,CAACQ,MAAM,EACrD;kBAGG,IAAG,IAAI,CAACtC,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACtD,OAAO,CAAC6C,KAAK,CAAC,CAACS,IAAI,EACjD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACvD,OAAO,CAAC6C,KAAK,CAAC,CAACU,MAAM,EACrD;sBACOL,CAAC,GAACC,CAAC;sBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;sBACd;oBACN;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACC,IAAG,IAAI,CAAC1B,GAAG,EACZ;UACE,IAAI,CAACF,GAAG,GAAC4B,CAAC;UACVM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC;UAC1B,MAAM,IAAI,CAAC2B,SAAS,CAAC,CAAC;UACtBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,EAAE;UACnB,IAAI,CAACzB,OAAO,CAAC8E,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC9B,IAAI,CAACV,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC7B,IAAI,CAACD,GAAE,GAAI,KAAI;QAEjB;QACF,IAAG,IAAI,CAACP,KAAK,EACb;UACE,IAAI,CAACjB,OAAO,CAAC6C,KAAK,CAAC,CAAC+B,SAAS,GAAC,KAAK;UACnC,IAAI,CAAC5E,OAAO,CAAC6C,KAAK,CAAC,CAACQ,MAAK,IAAK,IAAI,CAACnC,SAAS;UAC5C,IAAI,CAAClB,OAAO,CAAC6C,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;UAClC,IAAI,CAAC7D,MAAM,CAACmC,CAAC,CAAC,CAACG,MAAM,GAAC,IAAI,CAACrD,OAAO,CAAC6C,KAAK,CAAC,CAACQ,MAAM;UAChD,IAAI,CAACpC,KAAK,GAAC,KAAK;UACd,IAAI,CAACM,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC3B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACV,IAAI,CAACS,MAAM,CAAC;QACjB;QACI,IAAG,IAAI,CAACjD,MAAM,EAChB;UAEM,IAAI,CAACV,OAAO,CAAC+E,MAAM,CAAClC,KAAK,EAAC,CAAC,CAAC;UAE1B,IAAI,CAACnC,MAAM,GAAC,KAAK;UACb,IAAI,CAACY,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAAC8B,OAAO,CAAC;QACvB;QACA,IAAI,IAAI,CAACpE,MAAM,EAAE;UAEjB,IAAMqE,iBAAgB,GAAI,IAAI,CAACvF,SAAS,EAAE;UAC1C,IAAI,CAACM,OAAO,CAAC6C,KAAK,CAAC,CAACS,IAAG,GAAI2B,iBAAiB;UACzC,IAAI,CAAClE,MAAM,CAACmC,CAAC,CAAC,CAACI,IAAI,GAAC,IAAI,CAACtD,OAAO,CAAC6C,KAAK,CAAC,CAACS,IAAI,EAAI;UACnD2B,iBAAiB,GAAC,IAAI,CAACvF,SAAQ;UAC/B,IAAI,CAACkB,MAAK,GAAI,KAAK;UACnB,IAAI,CAAClB,SAAQ,GAAI,SAAS,EAAE;UACvB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC3B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAACS,MAAM,CAAC;QAEP;QACD,IAAG,IAAI,CAAC9C,OAAO,EAAC;UACnB,IAAIqE,iBAAgB,GAAI,IAAI,CAACxF,SAAS,EAAE;UAC3C,IAAI,CAACM,OAAO,CAAC6C,KAAK,CAAC,CAACU,MAAK,GAAI2B,iBAAiB;UAC9C,IAAI,CAACnE,MAAM,CAACmC,CAAC,CAAC,CAACK,MAAM,GAAC,IAAI,CAACvD,OAAO,CAAC6C,KAAK,CAAC,CAACU,MAAM,EAAE;UAClD,IAAI,CAAC1C,OAAM,GAAI,KAAK;UACpB,IAAI,CAACnB,SAAQ,GAAI,SAAS,EAAE;UACxB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACV,IAAI,CAACS,MAAM,CAAC;QAGrB;MAEA,OACK,IAAGf,IAAI,KAAG,MAAM,EACrB;QACC,IAAIM,CAAC,GAAC,CAAC;QACN,IAAI,CAAC7B,SAAQ,GAAI,MAAK;QACzB,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAChC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACO,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACpC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBAMiBuB,CAAC,GAACC,CAAC;gBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;gBACd;cAIhB;YAGF;UACA;QAEF;QACC,IAAG,IAAI,CAAC1B,GAAG,EACZ;UACE,IAAI,CAACF,GAAG,GAAC4B,CAAC;UACVM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC;UAC1B,MAAM,IAAI,CAAC2B,SAAS,CAAC,CAAC;UACtBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,EAAE;UACnB,IAAI,CAAC1B,KAAK,CAAC+E,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC5B,IAAI,CAACV,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC7B,IAAI,CAACD,GAAE,GAAI,KAAI;QAGjB;QACK,IAAG,IAAI,CAACd,MAAM,EACnB;UAEM,IAAI,CAACX,KAAK,CAACgF,MAAM,CAAClC,KAAK,EAAC,CAAC,CAAC;UACxB,IAAI,CAACnC,MAAM,GAAC,KAAK;UACf,IAAI,CAACY,GAAG,GAAC4B,CAAC;UACV,IAAI,CAAC8B,OAAO,CAAC;QACvB;QACA,IAAG,IAAI,CAACnE,OAAO,EAAC;UACX,IAAIqE,iBAAgB,GAAI,IAAI,CAACxF,SAAS,EAAE;UAC3C,IAAI,CAACK,KAAK,CAAC8C,KAAK,CAAC,CAACU,MAAK,GAAI2B,iBAAiB,EAAE;UAC9C,IAAI,CAACrE,OAAM,GAAI,KAAK;UACpB,IAAI,CAACE,MAAM,CAACmC,CAAC,CAAC,CAACK,MAAM,GAAC,IAAI,CAACxD,KAAK,CAAC8C,KAAK,CAAC,CAACU,MAAM;UAC9C,IAAI,CAAC7D,SAAQ,GAAI,SAAS,EAAE;UACpB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC1B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAACS,MAAM,CAAC;QACtB;MACH;MACA,qEACK,IAAGf,IAAI,KAAG,MAAM,EACrB;QACC,IAAIM,CAAC,GAAC,CAAC;QACN,IAAI,CAAC7B,SAAQ,GAAI,WAAU;QAC7B,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACjC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACO,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACpC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACK,UAAU,CAACgD,KAAK,CAAC,CAACrD,KAAK,EACtD;kBAGG,IAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACzD,UAAU,CAACgD,KAAK,CAAC,CAACS,IAAI,EACpD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAAC1D,UAAU,CAACgD,KAAK,CAAC,CAACU,MAAM,EACxD;sBACE,IAAG,IAAI,CAACxC,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,KAAG,IAAI,CAACI,UAAU,CAACgD,KAAK,CAAC,CAACpD,MAAM,EACxD;wBAEKyD,CAAC,GAACC,CAAC;wBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;wBACd;sBACJ;oBACF;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACC,IAAG,IAAI,CAAC1B,GAAG,EACZ;UACE,IAAI,CAACF,GAAG,GAAC4B,CAAC;UACVM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC;UAC1B,MAAM,IAAI,CAAC2B,SAAS,CAAC,CAAC;UACtBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,EAAE;UACnB,IAAI,CAAC5B,UAAU,CAACiF,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UACjC,IAAI,CAACV,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC7B,IAAI,CAACD,GAAE,GAAI,KAAI;QAEjB;QACF,IAAI,CAAC3B,UAAU,CAACgD,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;QACrC,IAAG,IAAI,CAAC3D,KAAK,EACb;UACE,IAAI,CAACpB,UAAU,CAACgD,KAAK,CAAC,CAAC+B,SAAS,GAAC,KAAK;UACtC,IAAI,CAAC/E,UAAU,CAACgD,KAAK,CAAC,CAACrD,KAAI,IAAK,IAAI,CAAC0B,SAAS;UAC9C,IAAI,CAACrB,UAAU,CAACgD,KAAK,CAAC,CAACpD,MAAK,IAAK,IAAI,CAACyB,SAAS;UAC/C,IAAI,CAACrB,UAAU,CAACgD,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;UACrC,IAAI,CAAC7D,MAAM,CAACmC,CAAC,CAAC,CAAC1D,KAAK,GAAC,IAAI,CAACK,UAAU,CAACgD,KAAK,CAAC,CAACrD,KAAK;UACjD,IAAI,CAACuB,MAAM,CAACmC,CAAC,CAAC,CAACzD,MAAM,GAAC,IAAI,CAACI,UAAU,CAACgD,KAAK,CAAC,CAACpD,MAAM;UACnD,IAAI,CAACwB,KAAK,GAAC,KAAK;UACd,IAAI,CAACM,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC1B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAACS,MAAM,CAAC;QAChB;QACO,IAAG,IAAI,CAACjD,MAAM,EACnB;UAEM,IAAI,CAACb,UAAU,CAACkF,MAAM,CAAClC,KAAK,EAAC,CAAC,CAAC;UAC7B,IAAI,CAACnC,MAAM,GAAC,KAAK;UACjB,IAAI,CAACY,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAAC8B,OAAO,CAAC;QACnB;QACA,IAAI,IAAI,CAACpE,MAAM,EAAE;UACjB,IAAIqE,iBAAgB,GAAI,IAAI,CAACvF,SAAS,EAAE;UACxC,IAAI,CAACG,UAAU,CAACgD,KAAK,CAAC,CAACS,IAAG,GAAI2B,iBAAiB,EAAE;UACjD;UACA,IAAI,CAAClE,MAAM,CAACmC,CAAC,CAAC,CAACI,IAAI,GAAC,IAAI,CAACzD,UAAU,CAACgD,KAAK,CAAC,CAACS,IAAI;UAC/C,IAAI,CAAC1C,MAAK,GAAI,KAAK;UACnB,IAAI,CAAClB,SAAQ,GAAI,SAAS,EAAE;UACpB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACT,IAAI,CAACS,MAAM,CAAC;QACZ;QACT,IAAG,IAAI,CAAC9C,OAAO,EAAC;UACX,IAAIqE,iBAAgB,GAAI,IAAI,CAACxF,SAAS,EAAE;UAC3C,IAAI,CAACG,UAAU,CAACgD,KAAK,CAAC,CAACU,MAAK,GAAI2B,iBAAiB,EAAE;UACnD,IAAI,CAACnE,MAAM,CAACmC,CAAC,CAAC,CAACK,MAAM,GAAC,IAAI,CAAC1D,UAAU,CAACgD,KAAK,CAAC,CAACU,MAAM;UACnD,IAAI,CAAC1C,OAAM,GAAI,KAAK;UACpB,IAAI,CAACnB,SAAQ,GAAI,SAAS,EAAE;UACvB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC3B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACX,IAAI,CAACS,MAAM,CAAC;QAGtB;MACA;MACA,wEACM,IAAGf,IAAI,KAAG,SAAS,EAAE;QACxB,IAAIM,CAAC,GAAC,CAAC;QACN,IAAI,CAAC7B,SAAQ,GAAI,SAAQ;QAC/B,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAC/B;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACQ,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACrC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAACS,OAAO,KAAG,IAAI,CAAC3D,QAAQ,CAAC4C,KAAK,CAAC,CAACe,OAAO,EACxD;kBAGG,IAAG,IAAI,CAAC7C,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACrD,QAAQ,CAAC4C,KAAK,CAAC,CAACS,IAAI,EAClD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACtD,QAAQ,CAAC4C,KAAK,CAAC,CAACU,MAAM,EACtD;sBACE,IAAG,IAAI,CAACxC,MAAM,CAACoC,CAAC,CAAC,CAACU,OAAO,KAAG,IAAI,CAAC5D,QAAQ,CAAC4C,KAAK,CAAC,CAACgB,OAAO,EACnDX,CAAC,GAACC,CAAC;sBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;sBACd;oBACN;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACA,IAAG,IAAI,CAAC1B,GAAG,EACX;UACE,IAAI,CAACF,GAAG,GAAC4B,CAAC;UACVM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC;UAC1B,MAAM,IAAI,CAAC2B,SAAS,CAAC,CAAC;UACtBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,EAAE;UACnB,IAAI,CAACxB,QAAQ,CAAC6E,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC/B,IAAI,CAACV,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC7B,IAAI,CAACD,GAAE,GAAI,KAAI;QAEjB;QACF,IAAG,IAAI,CAACP,KAAK,EACb;UACE,IAAI,CAAChB,QAAQ,CAAC4C,KAAK,CAAC,CAAC+B,SAAS,GAAC,KAAK;UACpC,IAAI,CAAC3E,QAAQ,CAAC4C,KAAK,CAAC,CAACe,OAAM,IAAM,IAAI,CAAC1C,SAAS;UAC/C,IAAI,CAACjB,QAAQ,CAAC4C,KAAK,CAAC,CAACgB,OAAM,IAAM,IAAI,CAAC3C,SAAS;UAC/C,IAAI,CAACjB,QAAQ,CAAC4C,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;UACnC,IAAI,CAAC7D,MAAM,CAACmC,CAAC,CAAC,CAACU,OAAO,GAAC,IAAI,CAAC3D,QAAQ,CAAC4C,KAAK,CAAC,CAACsC,OAAO;UAC3C,IAAI,CAACpE,MAAM,CAACmC,CAAC,CAAC,CAACW,OAAO,GAAC,IAAI,CAAC5D,QAAQ,CAAC4C,KAAK,CAAC,CAACgB,OAAO;UAE3D,IAAI,CAAC5C,KAAK,GAAC,KAAK;UACd,IAAI,CAACM,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACV,IAAI,CAACS,MAAM,CAAC,CAAC;QAEjB;QACU,IAAG,IAAI,CAACjD,MAAM,EACtB;UAEM,IAAI,CAACT,QAAQ,CAAC8E,MAAM,CAAClC,KAAK,EAAC,CAAC,CAAC;UAC3B,IAAI,CAACnC,MAAM,GAAC,KAAK;UAClB,IAAI,CAACa,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UACxB,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACX,IAAI,CAAC8B,OAAO,CAAC;QAEvB;QACE,IAAI,IAAI,CAACpE,MAAM,EAAE;UACrB,IAAIqE,iBAAgB,GAAI,IAAI,CAACvF,SAAS;UACtC,IAAI,CAACO,QAAQ,CAAC4C,KAAK,CAAC,CAACS,IAAG,GAAI2B,iBAAiB;UAC7C,IAAI,CAAClE,MAAM,CAACmC,CAAC,CAAC,CAACI,IAAI,GAAC,IAAI,CAACrD,QAAQ,CAAC4C,KAAK,CAAC,CAACS,IAAI;UAC7C,IAAI,CAAC1C,MAAK,GAAI,KAAK;UACnB,IAAI,CAAClB,SAAQ,GAAI,SAAS;UACxB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UACzB,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAACS,MAAM,CAAC;QACjB;QAEI,IAAG,IAAI,CAAC9C,OAAO,EAAC;UACb,IAAIqE,iBAAgB,GAAI,IAAI,CAACxF,SAAS,EAAE;UACzC,IAAI,CAACO,QAAQ,CAAC4C,KAAK,CAAC,CAACU,MAAK,GAAI2B,iBAAiB,EAAE;UAC/C,IAAI,CAACnE,MAAM,CAACmC,CAAC,CAAC,CAACK,MAAM,GAAC,IAAI,CAACtD,QAAQ,CAAC4C,KAAK,CAAC,CAACU,MAAM;UACnD,IAAI,CAAC1C,OAAM,GAAI,KAAK;UACpB,IAAI,CAACnB,SAAQ,GAAI,SAAS,EAAE;UACrB,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC9B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACb,IAAI,CAACS,MAAM,CAAC;QAEnB;MACG;MACA,6DACE,IAAGf,IAAI,KAAG,QAAQ,EACvB;QACC,IAAIM,CAAC,GAAC,CAAC;QACL,IAAI,CAAC7B,SAAQ,GAAI,QAAO;QAC5B,KAAI,IAAI8B,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EAChC;UACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACQ,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACL,CAAC,KAAG,IAAI,CAACpB,EAAE,EACrC;cACE,IAAG,IAAI,CAACX,MAAM,CAACoC,CAAC,CAAC,CAACJ,CAAC,KAAG,IAAI,CAACpB,EAAE,EAC7B;gBACI,IAAG,IAAI,CAACZ,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACM,OAAO,CAAC+C,KAAK,CAAC,CAACrD,KAAK,EACnD;kBAGG,IAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAACG,IAAI,KAAG,IAAI,CAACxD,OAAO,CAAC+C,KAAK,CAAC,CAACS,IAAI,EACjD;oBACG,IAAG,IAAI,CAACvC,MAAM,CAACoC,CAAC,CAAC,CAACI,MAAM,KAAG,IAAI,CAACzD,OAAO,CAAC+C,KAAK,CAAC,CAACU,MAAM,EACrD;sBACE,IAAG,IAAI,CAACxC,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,KAAG,IAAI,CAACK,OAAO,CAAC+C,KAAK,CAAC,CAACpD,MAAM,EACrD;wBAEKyD,CAAC,GAACC,CAAC;wBACJK,OAAO,CAACC,GAAG,CAACP,CAAC,CAAC;wBACd;sBACJ;oBACF;kBACH;gBACH;cAKJ;YAGF;UACA;QAEF;QACC,IAAG,IAAI,CAAC1B,GAAG,EACZ;UACC,IAAI,CAACF,GAAG,GAAC4B,CAAC;UACTM,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACmC,CAAC,CAAC;UAC1B,MAAM,IAAI,CAAC2B,SAAS,CAAC,CAAC;UACtBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,EAAE;UACnB,IAAI,CAAC3B,OAAO,CAACgF,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC9B,IAAI,CAACV,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAACrD;UAAE,CAAC;UAC7B,IAAI,CAACD,GAAE,GAAI,KAAI;QAGjB;QACF,IAAG,IAAI,CAACP,KAAK,EACb;UACE,IAAI,CAACnB,OAAO,CAAC+C,KAAK,CAAC,CAAC+B,SAAS,GAAC,KAAK;UACnC,IAAI,CAAC9E,OAAO,CAAC+C,KAAK,CAAC,CAACrD,KAAI,IAAM,IAAI,CAAC0B,SAAS;UAC5C,IAAI,CAACpB,OAAO,CAAC+C,KAAK,CAAC,CAACpD,MAAK,IAAM,IAAI,CAACyB,SAAS;UAE7C,IAAI,CAACpB,OAAO,CAAC+C,KAAK,CAAC,CAAC+B,SAAS,GAAC,IAAI;UACjC,IAAI,CAAC7D,MAAM,CAACmC,CAAC,CAAC,CAAC1D,KAAK,GAAC,IAAI,CAACM,OAAO,CAAC+C,KAAK,CAAC,CAACrD,KAAK;UAC9C,IAAI,CAACuB,MAAM,CAACmC,CAAC,CAAC,CAACzD,MAAM,GAAC,IAAI,CAACK,OAAO,CAAC+C,KAAK,CAAC,CAACpD,MAAM;UAC9C,IAAI,CAAC8B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC3B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACV,IAAI,CAACS,MAAM,CAAC;UACZ,IAAI,CAAC1C,KAAK,GAAC,KAAK;QACtB;QACD;QACU,IAAG,IAAI,CAACP,MAAM,EACrB;UAEM,IAAI,CAACZ,OAAO,CAACiF,MAAM,CAAClC,KAAK,EAAC,CAAC,CAAC;UAC1B,IAAI,CAACnC,MAAM,GAAC,KAAK;UACf,IAAI,CAACY,GAAG,GAAC4B,CAAC;UACZ,IAAI,CAAC8B,OAAO,CAAC;QACrB;QACF,IAAI,IAAI,CAACpE,MAAM,EAAE;UACf,IAAMqE,iBAAgB,GAAI,IAAI,CAACvF,SAAS,EAAE;UAC1C,IAAI,CAACP,cAAc,GAAE8F,iBAAgB;UACrC,IAAI,CAACnF,OAAO,CAAC+C,KAAK,CAAC,CAACS,IAAG,GAAI2B,iBAAiB,EAAE;UAC9CA,iBAAiB,GAAC,IAAI,CAACvF,SAAQ;UAC7B,IAAI,CAACqB,MAAM,CAACmC,CAAC,CAAC,CAACI,IAAI,GAAC,IAAI,CAACxD,OAAO,CAAC+C,KAAK,CAAC,CAACS,IAAI;UAC9C,IAAI,CAAC1C,MAAK,GAAI,KAAK;UACnB,IAAI,CAAClB,SAAQ,GAAI,SAAS,EAAE;UAC1B,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACT,IAAI,CAACS,MAAM,CAAC;QAEN;QACT,IAAG,IAAI,CAAC9C,OAAO,EACf;UACU,IAAIqE,iBAAgB,GAAI,IAAI,CAACxF,SAAS,EAAE;UAChD,IAAI,CAACI,OAAO,CAAC+C,KAAK,CAAC,CAACU,MAAK,GAAI2B,iBAAiB,EAAE;UAChD,IAAI,CAACrE,OAAM,GAAI,KAAK;UAClB,IAAI,CAACE,MAAM,CAACmC,CAAC,CAAC,CAACK,MAAM,GAAC,IAAI,CAACzD,OAAO,CAAC+C,KAAK,CAAC,CAACU,MAAM;UAClD,IAAI,CAAC7D,SAAQ,GAAI,SAAS,EAAE;UAC1B,IAAI,CAAC6B,QAAQ,GAAC,IAAI,CAACR,MAAM,CAACmC,CAAC,CAAC;UAC5B,IAAI,CAAC5B,GAAG,GAAC4B,CAAC;UACX,IAAI,CAACS,MAAM,CAAC;QAEf;MAGH;IAED,CAAC;IAGDyB,GAAGA,CAAA,EACH;MACU,IAAI,CAACjF,SAAS,GAAC,KAAK;MAC3B,IAAI,CAACC,IAAI,GAAC,KAAK;MAChB,IAAI,CAACC,MAAM,GAAC,KAAK;MACjB,IAAI,CAACC,GAAG,GAAC,KAAK;MACd,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACC,IAAI,GAAC,KAAK;MACf,IAAI,CAACI,MAAM,GAAC,KAAK;MACjB,IAAI,CAACF,MAAM,GAAC,IAAI;MAChB,IAAI,CAACG,OAAO,GAAC,KAAK;MAClB,IAAI,CAACJ,GAAG,GAAC,KAAK;IAChB,CAAC;IACD4E,IAAIA,CAAA,EACJ;MACE,IAAI,CAAC1E,GAAG,GAAC,IAAI;IACf,CAAC;IAGC2E,YAAYA,CAAA,EAAG;MAChB,IAAG,IAAI,CAACnF,SAAS,KAAG,IAAI,EACvB;QACI,IAAI,CAACP,MAAK,GAAI,IAAI;QACtB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;QACzC,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;UAC3C,IAAID,QAAQ,EAAE;YACZ,IAAI,CAAC5E,YAAW,GAAI;cAClBgC,CAAC,EAAE4C,QAAQ,CAAC5C,CAAC;cACbC,CAAC,EAAE2C,QAAQ,CAAC3C,CAAC;cACZO,IAAI,EAAC,IAAI,CAAC5D,SAAS;cACpB6D,MAAM,EAAC,IAAI,CAAC5D,UAAU;cACtBiG,WAAW,EAAC,CAAC;cACbpG,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE;YACV,CAAC;YACD+D,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3C,YAAY,CAACgC,CAAC,CAAC;YAChCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3C,YAAY,CAACiC,CAAC,CAAC;UAClC;QACF;MACA,OACK,IAAG,IAAI,CAAC3C,IAAI,KAAG,IAAI,EAAC;QACf,IAAI,CAACR,MAAK,GAAI,IAAI;QAC5B,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;QACzC,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;UAC3C,IAAID,QAAQ,EAAE;YACZ,IAAI,CAAC5E,YAAW,GAAI;cAClBgC,CAAC,EAAE4C,QAAQ,CAAC5C,CAAC;cACbC,CAAC,EAAE2C,QAAQ,CAAC3C,CAAC;cACbO,IAAI,EAAC,IAAI,CAAC5D,SAAS;cACnB6D,MAAM,EAAC,IAAI,CAAC5D,UAAU;cACtBiG,WAAW,EAAC,CAAC;cACbvC,MAAM,EAAE;YACV,CAAC;UACH;QACF;MACA,OACK,IAAG,IAAI,CAAChD,MAAM,KAAG,IAAI,EAC1B;QACK,IAAI,CAACT,MAAK,GAAI,IAAI;QACnB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;QACzC,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;UAC3C,IAAID,QAAQ,EAAE;YACZ,IAAI,CAAC5E,YAAW,GAAI;cAClBgC,CAAC,EAAE4C,QAAQ,CAAC5C,CAAC;cACbC,CAAC,EAAE2C,QAAQ,CAAC3C,CAAC;cACZO,IAAI,EAAC,IAAI,CAAC5D,SAAS;cACxB6D,MAAM,EAAC,IAAI,CAAC5D,UAAU;cACtBiG,WAAW,EAAC,CAAC;cACXhC,OAAO,EAAE,CAAC;cACVC,OAAO,EAAC;YACR,CAAC;UACH;QACF;MACJ,OACK,IAAG,IAAI,CAACvD,GAAG,KAAG,IAAI,EACvB;QACQ,IAAI,CAACV,MAAK,GAAI,IAAI;QACtB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;QACzC,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;UAC3C,IAAID,QAAQ,EAAE;YACZ,IAAI,CAAC5E,YAAW,GAAI;cAClBgC,CAAC,EAAE4C,QAAQ,CAAC5C,CAAC;cACbC,CAAC,EAAE2C,QAAQ,CAAC3C,CAAC;cACjBQ,MAAM,EAAC,IAAI,CAAC5D,UAAU;cACtBiG,WAAW,EAAC,CAAC;cACZC,MAAM,EAAE,CAACH,QAAQ,CAAC5C,CAAC,EAAE4C,QAAQ,CAAC3C,CAAC;YAC9B,CAAC;UACH;QACF;MACJ,OACK,IAAG,IAAI,CAACxC,IAAI,KAAG,IAAI,EACxB;QACM,IAAI,CAACX,MAAK,GAAI,IAAI;QACpB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;QACzC,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;UAC3C,IAAID,QAAQ,EAAE;YACZ,IAAI,CAAC5E,YAAW,GAAI;cACpBgC,CAAC,EAAE4C,QAAQ,CAAC5C,CAAC;cACfC,CAAC,EAAE2C,QAAQ,CAAC3C,CAAC;cAEb6C,WAAW,EAAC,CAAC;cACZtC,IAAI,EAAC,IAAI,CAAC5D,SAAS;cACpB6D,MAAM,EAAC,IAAI,CAAC5D,UAAU;cACtBH,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE;YACN,CAAC;UACH;QACF;MACJ,OACK,IAAG,IAAI,CAACe,IAAI,EACjB;QACI,IAAI,CAACZ,MAAK,GAAI,IAAI;QAClB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;QACzC,IAAIF,KAAK,EAAE;UACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;UAC3C,IAAID,QAAQ,EAAE;YACZ,IAAI,CAAC5E,YAAW,GAAI;cACnBgC,CAAC,EAAE4C,QAAQ,CAAC5C,CAAC;cACZC,CAAC,EAAE2C,QAAQ,CAAC3C,CAAC;cACb6C,WAAW,EAAC,CAAC;cACbtC,IAAI,EAAC,IAAI,CAAC5D,SAAS;cACnB6D,MAAM,EAAC,IAAI,CAAC5D,UAAU;cACtB0D,MAAM,EAAC;YACT,CAAC;UACH;QACF;MACJ;MACA;;;;;;;;;;;;;;;;;IAqBF,CAAC;;IACDyC,WAAWA,CAAA,EAAG;MAER,IAAI,IAAI,CAAClG,MAAM,EAAE;QACnB,IAAI,CAACA,MAAK,GAAI,KAAK;QACnB4D,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACpB,IAAG,IAAI,CAACrD,IAAI,EACZ;UACE,IAAI,CAACiB,SAAQ,GAAI,QAAQ;UACd,IAAI,CAACrB,OAAO,CAAC8E,IAAI,CAAC;YAAE,GAAG,IAAI,CAAChE;UAAa,CAAC,CAAC;UAC3C,IAAI,CAACC,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;QAErD,OAEG,IAAG,IAAI,CAACX,SAAS,EAAC;UACrB,IAAI,CAACkB,SAAQ,GAAI,WAAW;UAE1B,IAAI,CAACxB,UAAU,CAACiF,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;UAC1C,IAAI,CAACC,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;QAC9C,OAEK,IAAG,IAAI,CAACT,MAAM,EACnB;UACE,IAAI,CAACgB,SAAQ,GAAI,SAAS;UAEvB,IAAI,CAACpB,QAAQ,CAAC6E,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;UACxC,IAAI,CAACC,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;QAC/C,OAEK,IAAG,IAAI,CAACR,GAAG,IAAE,IAAI,CAACG,GAAG,EAC1B;UACE,IAAI,CAACY,SAAQ,GAAI,MAAM;UAElB,IAAI,CAACtB,KAAK,CAAC+E,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;UACrC,IAAI,CAACC,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;QACjD,OAEK,IAAG,IAAI,CAACP,IAAI,EACjB;UACE,IAAI,CAACc,SAAQ,GAAI,QAAQ;UAEjB,IAAI,CAACvB,OAAO,CAACgF,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;UACvC,IAAI,CAACC,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;QACpD,OAEK,IAAG,IAAI,CAACN,IAAI,EACjB;UACE,IAAI,CAACa,SAAQ,GAAI,UAAU;UAEtB,IAAI,CAACnB,SAAS,CAAC4E,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;UACxC,IAAI,CAACC,MAAM,CAAC+D,IAAI,CAAC;YAAC,GAAG,IAAI,CAAChE;UAAY,CAAC,CAAC;QAClD;QACA,IAAI,CAACiF,WAAW,CAAC,CAAC;QAIhB,IAAI,CAACjF,YAAW,GAAI,IAAI;QACxB,IAAI,CAACV,IAAI,GAAC,KAAK;QACf,IAAI,CAACC,MAAM,GAAC,KAAK;QACjB,IAAI,CAACF,SAAS,GAAC,KAAK;QACpB,IAAI,CAACG,GAAG,GAAC,KAAK;QACd,IAAI,CAACC,IAAI,GAAC,KAAK;QACf,IAAI,CAACC,IAAI,GAAC,KAAK;QACf,IAAI,CAACG,GAAE,GAAI,KAAK;QAChB,IAAI,CAACF,GAAG,GAAC,KAAK;MAChB;IAKF,CAAC;IACD,MAAMsF,WAAWA,CAAA,EAAE;MACjB,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAC1CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAG,IAAI,CAAC7E,SAAQ,GAAI8E,IAAI,CAACC,SAAS,CAAC,IAAI,CAACtF,YAAY;MAC1D,CAAC,CAAC,CAACuF,KAAK,CAACC,KAAI,IAAK;QAChB9C,OAAO,CAAC8C,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC,CAAC,CAAC;IACJ,CAAC;IAED,MAAM3C,MAAMA,CAAA,EACZ;MACI,MAAMqC,KAAK,CAAC,8BAA8B,EAAE;QAC5CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAG,IAAI,CAAC5E,GAAE,GAAI,GAAE,GAAI,IAAI,CAACD,SAAQ,GAAI8E,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC7E,QAAQ;MACvE,CAAC,CAAC,CAAC8E,KAAK,CAACC,KAAI,IAAK;QAChB9C,OAAO,CAAC8C,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC,CAAC,CAAC;IACJ,CAAC;IACD,MAAMzB,SAASA,CAAA,EACf;MACE,MAAMmB,KAAK,CAAC,4BAA4B,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAG,IAAI,CAAC5E;MACd,CAAC,EACAiF,IAAI,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACtBF,IAAI,CAACvH,IAAG,IAAK,IAAI,CAACyC,EAAC,GAAIzC,IAAI;IAC9B,CAAC;IACD,MAAMgG,OAAOA,CAAA,EACb;MACI,MAAMgB,KAAK,CAAC,8BAA8B,EAAE;QAC5CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAG,IAAI,CAAC5E,GAAE,GAAI,GAAE,GAAI,IAAI,CAACD;MAC/B,CAAC,CAAC,CAACgF,KAAK,CAACC,KAAI,IAAK;QAChB9C,OAAO,CAAC8C,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC,CAAC,CAAC;IACJ,CAAC;IAEDI,IAAIA,CAAA,EAAG;MACL,IAAG,IAAI,CAACvG,SAAS,EACjB;QACM,IAAI,IAAI,CAACP,MAAM,EAAE;UACrB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;UACzC,IAAIF,KAAK,EAAE;YACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;YAC3C,IAAID,QAAQ,EAAE;cACZ,IAAI,CAAC5E,YAAY,CAACtB,KAAI,GAAIkG,QAAQ,CAAC5C,CAAA,GAAI,IAAI,CAAChC,YAAY,CAACgC,CAAC;cAC1D,IAAI,CAAChC,YAAY,CAACrB,MAAK,GAAIiG,QAAQ,CAAC3C,CAAA,GAAI,IAAI,CAACjC,YAAY,CAACiC,CAAC;YAC7D;UACF;QACF;MACA;MACF;MAAA,KACO,IAAG,IAAI,CAAC3C,IAAI,EACjB;QACI,IAAI,IAAI,CAACR,MAAM,EAAE;UACnB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;UACzC,IAAIF,KAAK,EAAE;YACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;YAC3C,IAAID,QAAQ,EAAE;cACZ,IAAI,CAAC5E,YAAY,CAACuC,MAAK,GAAIsD,IAAI,CAACpG,IAAI,CAChCoG,IAAI,CAACC,GAAG,CAAClB,QAAQ,CAAC5C,CAAA,GAAI,IAAI,CAAChC,YAAY,CAACgC,CAAC,EAAE,CAAC,IAAI6D,IAAI,CAACC,GAAG,CAAClB,QAAQ,CAAC3C,CAAA,GAAI,IAAI,CAACjC,YAAY,CAACiC,CAAC,EAAE,CAAC,CAAC,CAAC;YACpG;UACF;QACF;MACA;MACA;MAAA,KACK,IAAG,IAAI,CAAC1C,MAAM,EACnB;QACM,IAAI,IAAI,CAACT,MAAM,EAAE;UACrB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;UACzC,IAAIF,KAAK,EAAE;YACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;YAC3C,IAAID,QAAQ,EAAE;cACZ,IAAI,CAAC5E,YAAY,CAAC8C,OAAM,GAAI+C,IAAI,CAACE,GAAG,CAACnB,QAAQ,CAAC5C,CAAA,GAAI,IAAI,CAAChC,YAAY,CAACgC,CAAC,CAAC;cACtE,IAAI,CAAChC,YAAY,CAAC+C,OAAO,GAAC8C,IAAI,CAACE,GAAG,CAACnB,QAAQ,CAAC3C,CAAA,GAAI,IAAI,CAACjC,YAAY,CAACiC,CAAC,CAAC;YACtE;UACF;QACF;MACA;MACA;MAAA,KACK,IAAG,IAAI,CAACzC,GAAG,EAChB;QACM,IAAI,IAAI,CAACV,MAAM,EAAE;UACrB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;UACzC,IAAIF,KAAK,EAAE;YACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;YAC3C,IAAID,QAAQ,EAAE;cACX,IAAI,CAAC5E,YAAY,CAAC+E,MAAM,CAAC,CAAC,IAAIH,QAAQ,CAAC5C,CAAC;cAC3C,IAAI,CAAChC,YAAY,CAAC+E,MAAM,CAAC,CAAC,IAAIH,QAAQ,CAAC3C,CAAC;YAExC;UACF;QACF;MACA;MACA;MAAA,KACK,IAAG,IAAI,CAACxC,IAAI,EACjB;QACM,IAAI,IAAI,CAACX,MAAM,EAAE;UACrB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;UACzC,IAAIF,KAAK,EAAE;YACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;YAC3C,IAAID,QAAQ,EAAE;cACZ,IAAI,CAAC5E,YAAY,CAACtB,KAAI,GAAIkG,QAAQ,CAAC5C,CAAA,GAAI,IAAI,CAAChC,YAAY,CAACgC,CAAC;cAC1D,IAAI,CAAChC,YAAY,CAACrB,MAAK,GAAIiG,QAAQ,CAAC5C,CAAA,GAAI,IAAI,CAAChC,YAAY,CAACgC,CAAC;YAC7D;UACF;QACF;MACA;MACA;MAAA,KACK,IAAG,IAAI,CAACtC,IAAI,EACjB;QACO,IAAI,IAAI,CAACZ,MAAM,EAAE;UACtB,MAAM2F,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC;UACzC,IAAIF,KAAK,EAAE;YACT,MAAMG,QAAO,GAAIH,KAAK,CAACI,kBAAkB,CAAC,CAAC;YAC3C,IAAID,QAAQ,EAAE;cAEZ,IAAI,CAAC5E,YAAY,CAACuC,MAAM,GAACsD,IAAI,CAACpG,IAAI,CAC9BoG,IAAI,CAACC,GAAG,CAAClB,QAAQ,CAAC5C,CAAA,GAAI,IAAI,CAAChC,YAAY,CAACgC,CAAC,EAAE,CAAC,IAAI6D,IAAI,CAACC,GAAG,CAAClB,QAAQ,CAAC3C,CAAA,GAAI,IAAI,CAACjC,YAAY,CAACiC,CAAC,EAAE,CAAC,CAAC,CAAC;YACpG;UACF;QACF;MACA;IAEF,CAAC;IAEF,MAAM+D,MAAMA,CAAA,EACT;MACEtD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsD,SAAS;MAC1B,IAAG,IAAI,CAACA,SAAS,EAAC;QAClB,MAAMf,KAAK,CAAC,gCAAgC,EAAE;UAC5CC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE,IAAI,CAAC9E,IAAI,GAAC;QAClB,CAAC,CAAC,CAACiF,KAAK,CAACC,KAAI,IAAK;UAChB9C,OAAO,CAAC8C,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACtC,CAAC,CAAC;MACJ;MACA,IAAG,IAAI,CAACnE,MAAM,EAAC;QACb,MAAM6D,KAAK,CAAC,+BAA+B,EAAE;UAC3CC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE,IAAI,CAAC9E,IAAI,GAAC;QAClB,CAAC,CAAC,CAACiF,KAAK,CAACC,KAAI,IAAK;UAChB9C,OAAO,CAAC8C,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACtC,CAAC,CAAC;MACJ;IACA,CAAC;IAEF,MAAMU,OAAOA,CAAA,EAAE;MACZ,IAAG,IAAI,CAACzE,QAAQ,EAAC;QACjB,IAAI0E,GAAE,GAAK,MAAMjB,KAAK,CAAC,gCAAgC,EAAE;UACvDC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAG,IAAI,CAAC9E,IAAG,GAAI;QACrB,CAAC,CAAC;QACF,IAAIoF,GAAE,GAAKS,GAAG,CAACR,IAAI,CAAC,CAAC;QACrBD,GAAG,CAACD,IAAI,CAACvH,IAAG,IAAK,IAAI,CAAC+B,MAAK,GAAI/B,IAAI;QACnCkI,CAAA;QAER,IAAI,CAAClH,OAAO,GAAC,EAAE;QACT,IAAI,CAACD,KAAK,GAAC,EAAE;QACb,IAAI,CAACD,OAAO,GAAC,EAAE;QACf,IAAI,CAACD,UAAU,GAAC,EAAE;QAClB,IAAI,CAACK,SAAS,GAAC,EAAE;QACjB,IAAI,CAACD,QAAQ,GAAC,EAAE;QAEhB,KAAI,IAAIkD,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACpC;UACEK,OAAO,CAACC,GAAG,CAAC,aAAa;UACzB,IAAG,IAAI,CAAC1C,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;YACEK,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI;YAC/B,IAAG,IAAI,CAAC7B,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,IAAE,IAAI,CAAC7B,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,EACtF;cACG,IAAI,CAACI,UAAU,CAACiF,IAAI,CAAC;gBAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;cAAC,CAAC,CAAC;YAC5C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,QAAQ,EACtC;cACEY,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI;cAC7B,IAAI,CAAC5C,OAAO,CAAC8E,IAAI,CAAC;gBAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;cAAC,CAAC,CAAC;YAC1C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,SAAS,EACvC;cACE,IAAI,CAAC3C,QAAQ,CAAC6E,IAAI,CAAC;gBAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;cAAC,CAAC;YACxC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,EAC7C;cACG,IAAI,CAAC9C,OAAO,CAACgF,IAAI,CAAC;gBAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;cAAC,CAAC,CAAC;YACzC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,UAAU,EACxC;cACEY,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI;cAC/B,IAAI,CAAC1C,SAAS,CAAC4E,IAAI,CAAC;gBAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;cAAC,CAAC,CAAC;YAC1C,OACI,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,MAAM,EACpC;cACI,IAAI,CAAC7C,KAAK,CAAC+E,IAAI,CAAC;gBAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;cAAC,CAAC,CAAC;YACxC;UACD;QAEF;MAGA;MACA,IAAG,IAAI,CAACX,MAAM,EAAC;QACb,MAAMwD,KAAK,CAAC,+BAA+B,EAAE;UAC3CC,MAAM,EAAE,KAAK;UACbC,IAAI,EAAE,IAAI,CAAC9E,IAAI,GAAC;QAClB,CAAC,CAAC,CAACmF,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACC,IAAI,EAClBF,IAAI,CAACvH,IAAI,IAAE,IAAI,CAAC+B,MAAM,GAAC/B,IAAI,CAAC;MAAA;MAE5B,IAAI,CAACgB,OAAO,GAAC,EAAE;MACpB,IAAI,CAACD,KAAK,GAAC,EAAE;MACb,IAAI,CAACD,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,UAAU,GAAC,EAAE;MAClB,IAAI,CAACK,SAAS,GAAC,EAAE;MACjB,IAAI,CAACD,QAAQ,GAAC,EAAE;MAEhB,KAAI,IAAIkD,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACpC;QACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;UACO,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,IAAE,IAAI,CAAC7B,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,EAC3F;YACG,IAAI,CAACI,UAAU,CAACiF,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC5C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,QAAQ,EACtC;YACI,IAAI,CAAC5C,OAAO,CAAC8E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC1C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,SAAS,EACvC;YACE,IAAI,CAAC3C,QAAQ,CAAC6E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC;UACxC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,EAC7C;YACG,IAAI,CAAC9C,OAAO,CAACgF,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UACzC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,UAAU,EACxC;YACE,IAAI,CAAC1C,SAAS,CAAC4E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC1C,OACI,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,MAAM,EACpC;YACI,IAAI,CAAC7C,KAAK,CAAC+E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UACxC;QACD;MAEF;IAEA,CAAC;IACC4D,SAASA,CAAA,EAAE;MACb,IAAI,CAAC7E,QAAQ,GAAC,IAAI;MAClB,IAAI,CAACC,MAAM,GAAC,KAAK;IACnB,CAAC;IACDgF,OAAOA,CAAA,EAAE;MACP,IAAI,CAAChF,MAAM,GAAC,IAAI;MAChB,IAAI,CAACD,QAAQ,GAAC,KAAK;IACrB,CAAC;IACCkF,OAAOA,CAAA,EAAE;MACP,IAAI,CAACnF,SAAS,GAAC,KAAK;MACpB,IAAI,CAACG,UAAU,GAAC,IAAI;IAGtB;IACAiF,EAAEA,CAAA,EAAE;MACF,IAAI,CAAChF,UAAU,GAAC,KAAK;MACrB,IAAI,CAACC,cAAc,GAAC,IAAI;IAE1B,CAAC;IACDgF,IAAIA,CAAA,EACJ;MACI,IAAI,CAACR,MAAM,CAAC,CAAC;MACb,IAAI,CAAC7E,SAAS,GAAC,IAAI;IACvB,CAAC;IACDsF,IAAIA,CAAA,EAAE;MACJ,IAAIC,GAAG,GAAChD,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACxF,KAAK;MAC7C,KAAI,IAAIkE,CAAC,GAAC,GAAGA,CAAC,GAACqE,GAAG,CAACpE,MAAM,EAACD,CAAC,EAAE,EAC7B;QACE,IAAGqE,GAAG,CAACrE,CAAC,CAAC,IAAE,IAAI,EACf;UAEE,IAAI,CAAC/B,IAAI,IAAE,IAAG;QAEhB;QACA,IAAI,CAACA,IAAI,IAAEoG,GAAG,CAACrE,CAAC,CAAC;MACnB;MACAK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvB,QAAQ;MACzBsB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,MAAM;MACvBqB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrC,IAAI;MACrB,IAAI,CAACgB,UAAU,GAAC,KAAK;MACrB,IAAI,CAAC0E,MAAM,CAAC,CAAC;MACb,IAAI,CAACW,OAAO,GAAC,KAAK;MAClB,IAAI,CAACtF,MAAM,GAAC,KAAK;IAEnB,CAAC;IACDuF,IAAIA,CAAA,EAAE;MACJ,IAAI,CAACrF,UAAU,GAAC,IAAI;IACtB,CAAC;IACDsF,SAASA,CAAA,EAAE;MACT,IAAI,CAACpF,QAAQ,GAAC,IAAI;MAClB,IAAI,CAACC,MAAM,GAAC,KAAK;IAEnB,CAAC;IACDoF,OAAOA,CAAA,EAAE;MACP,IAAI,CAACpF,MAAM,GAAC,IAAI;MAChB,IAAI,CAACD,QAAQ,GAAC,KAAK;IACrB,CAAC;IACDsF,IAAIA,CAAA,EACJ;MACE,IAAIL,GAAG,GAAChD,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACxF,KAAK;MACjD,KAAI,IAAIkE,CAAC,GAAC,GAAGA,CAAC,GAACqE,GAAG,CAACpE,MAAM,EAACD,CAAC,EAAE,EAC7B;QACE,IAAGqE,GAAG,CAACrE,CAAC,CAAC,IAAE,IAAI,EACf;UAEE,IAAI,CAAC/B,IAAI,IAAE,IAAG;QAEhB;QACA,IAAI,CAACA,IAAI,IAAEoG,GAAG,CAACrE,CAAC,CAAC;MACnB;MACAK,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClB,QAAQ;MACzBiB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,MAAM;MACvBgB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrC,IAAI;MACrB,IAAI,CAACkB,cAAc,GAAC,KAAK;MACzB,IAAI,CAAC0E,OAAO,CAAC,CAAC;MACd,IAAI,CAACzE,QAAQ,GAAC,KAAK;MACnB,IAAI,CAACC,MAAM,GAAC,KAAK;IAGnB,CAAC;IAKH,MAAMsF,IAAIA,CAAA,EACV;MACK,MAAM9B,KAAK,CAAC,4BAA4B,EAAE;QAC3CC,MAAM,EAAE;MACV,CAAC,EACAM,IAAI,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACtBF,IAAI,CAACvH,IAAG,IAAK,IAAI,CAAC+B,MAAK,GAAI/B,IAAI;MAEjCwE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAAC;MACvB,IAAI,CAACf,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,KAAK,GAAC,EAAE;MACb,IAAI,CAACD,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,UAAU,GAAC,EAAE;MAClB,IAAI,CAACK,SAAS,GAAC,EAAE;MACjB,IAAI,CAACD,QAAQ,GAAC,EAAE;MAEhB,KAAI,IAAIkD,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACpC;QACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;UACO,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,IAAE,IAAI,CAAC7B,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,EAC3F;YACG,IAAI,CAACI,UAAU,CAACiF,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC5C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,QAAQ,EACtC;YACI,IAAI,CAAC5C,OAAO,CAAC8E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC1C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,SAAS,EACvC;YACE,IAAI,CAAC3C,QAAQ,CAAC6E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC;UACxC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,EAC7C;YACG,IAAI,CAAC9C,OAAO,CAACgF,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UACzC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,UAAU,EACxC;YACE,IAAI,CAAC1C,SAAS,CAAC4E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC1C,OACI,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,MAAM,EACpC;YACI,IAAI,CAAC7C,KAAK,CAAC+E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UACxC;QACD;MAEF;IACF,CAAC;IACA,MAAM4E,IAAIA,CAAA,EACX;MACK,MAAM/B,KAAK,CAAC,4BAA4B,EAAE;QAC3CC,MAAM,EAAE;MACV,CAAC,EACAM,IAAI,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACtBF,IAAI,CAACvH,IAAG,IAAK,IAAI,CAAC+B,MAAK,GAAI/B,IAAI;MAEjCwE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,MAAM,CAAC;MACvB,IAAI,CAACf,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,KAAK,GAAC,EAAE;MACb,IAAI,CAACD,OAAO,GAAC,EAAE;MACf,IAAI,CAACD,UAAU,GAAC,EAAE;MAClB,IAAI,CAACK,SAAS,GAAC,EAAE;MACjB,IAAI,CAACD,QAAQ,GAAC,EAAE;MAEhB,KAAI,IAAIkD,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACpC,MAAM,CAACqC,MAAM,EAACD,CAAC,EAAE,EACpC;QACE,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,KAAG,IAAI,EACxB;UACO,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,IAAE,IAAI,CAAC7B,MAAM,CAACoC,CAAC,CAAC,CAAC3D,KAAK,KAAG,IAAI,CAACuB,MAAM,CAACoC,CAAC,CAAC,CAAC1D,MAAM,EAC3F;YACG,IAAI,CAACI,UAAU,CAACiF,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC5C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,QAAQ,EACtC;YACI,IAAI,CAAC5C,OAAO,CAAC8E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC1C,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,SAAS,EACvC;YACE,IAAI,CAAC3C,QAAQ,CAAC6E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC;UACxC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,eAAe,EAC7C;YACG,IAAI,CAAC9C,OAAO,CAACgF,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UACzC,OACK,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,UAAU,EACxC;YACE,IAAI,CAAC1C,SAAS,CAAC4E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UAC1C,OACI,IAAG,IAAI,CAACpC,MAAM,CAACoC,CAAC,CAAC,CAACP,IAAI,KAAG,MAAM,EACpC;YACI,IAAI,CAAC7C,KAAK,CAAC+E,IAAI,CAAC;cAAC,GAAG,IAAI,CAAC/D,MAAM,CAACoC,CAAC;YAAC,CAAC,CAAC;UACxC;QACD;MAEF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}