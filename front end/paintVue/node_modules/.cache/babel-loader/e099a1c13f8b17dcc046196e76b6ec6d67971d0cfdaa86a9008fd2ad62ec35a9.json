{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"bord\"\n};\nconst _hoisted_3 = {\n  class: \"left-bar\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-folder-open\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = [_hoisted_4];\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-floppy-disk\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_7 = [_hoisted_6];\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"palette\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-fill-drip\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = [_hoisted_10];\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-paintbrush\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_13 = [_hoisted_12];\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-copy\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_15 = [_hoisted_14];\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrow-rotate-left\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_17 = [_hoisted_16];\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-rotate-right\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_19 = [_hoisted_18];\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  width: \"18\",\n  height: \"18\",\n  x: \"3\",\n  y: \"3\"\n}), /*#__PURE__*/_createCommentVNode(\" Square \")], -1 /* HOISTED */));\nconst _hoisted_22 = [_hoisted_21];\nconst _hoisted_23 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"12\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  width: \"18\",\n  height: \"10\",\n  x: \"3\",\n  y: \"1\"\n}), /*#__PURE__*/_createCommentVNode(\" Rectangle \")], -1 /* HOISTED */));\nconst _hoisted_24 = [_hoisted_23];\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"10\"\n}), /*#__PURE__*/_createCommentVNode(\" Circle \")], -1 /* HOISTED */));\nconst _hoisted_26 = [_hoisted_25];\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12 2 2 22 22 22\"\n}), /*#__PURE__*/_createCommentVNode(\" Triangle \")], -1 /* HOISTED */));\nconst _hoisted_28 = [_hoisted_27];\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"ellipse\", {\n  cx: \"12\",\n  cy: \"12\",\n  rx: \"10\",\n  ry: \"6\"\n}), /*#__PURE__*/_createCommentVNode(\" Ellipse \")], -1 /* HOISTED */));\nconst _hoisted_30 = [_hoisted_29];\nconst _hoisted_31 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12 2 15.09 8 22 9.27 17 14 18.18 20 12 17.09 5.82 20 7 14 2 9.27 8 8 12\"\n})], -1 /* HOISTED */));\nconst _hoisted_32 = [_hoisted_31];\nconst _hoisted_33 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12,2 22,7 22,17 12,22 2,17 2,7\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n})], -1 /* HOISTED */));\nconst _hoisted_34 = [_hoisted_33];\nconst _hoisted_35 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"line\", {\n  x1: \"2\",\n  y1: \"12\",\n  x2: \"22\",\n  y2: \"12\"\n}), /*#__PURE__*/_createCommentVNode(\" Line \")], -1 /* HOISTED */));\nconst _hoisted_36 = [_hoisted_35];\nconst _hoisted_37 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_38 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-eraser\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_39 = [_hoisted_38];\nconst _hoisted_40 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-trash\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_41 = [_hoisted_40];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_rect = _resolveComponent(\"v-rect\");\n  const _component_v_circle = _resolveComponent(\"v-circle\");\n  const _component_v_ellipse = _resolveComponent(\"v-ellipse\");\n  const _component_v_star = _resolveComponent(\"v-star\");\n  const _component_v_line = _resolveComponent(\"v-line\");\n  const _component_v_regular_polygon = _resolveComponent(\"v-regular-polygon\");\n  const _component_v_transformer = _resolveComponent(\"v-transformer\");\n  const _component_v_layer = _resolveComponent(\"v-layer\");\n  const _component_v_stage = _resolveComponent(\"v-stage\");\n  const _component_color_picker = _resolveComponent(\"color-picker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" <v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"savdialog\\\" transition=\\\"dialog-top-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title><h1>save</h1></v-card-title>\\r\\n<v-card-subtitle> xml OR json  </v-card-subtitle>\\r\\n<button :style=\\\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"savejason()\\\">json</button>\\r\\n<div style=\\\"height:5px;\\\"></div>\\r\\n<button :style=\\\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"savexml()\\\">xml</button>\\r\\n<v-card-actions >\\r\\n  <button  variant=\\\"outlined\\\" @click=\\\"submity() \\\">OK</button>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\\r\\n<v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"pathdialog\\\" transition=\\\"dialog-bottom-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title>path of saving</v-card-title>\\r\\n<input type=\\\"text\\\" placeholder=\\\"c:\\\\\\\\name\\\" id=\\\"path\\\" autofocus>\\r\\n<v-card-actions >\\r\\n  <button  variant=\\\"outlined\\\" @click=\\\"send()\\\">save</button>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\\r\\n<v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"loaddialog\\\" transition=\\\"dialog-top-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title><h1>Open</h1></v-card-title>\\r\\n<v-card-subtitle> xml OR json  </v-card-subtitle>\\r\\n<button :style=\\\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"loadjason()\\\">json</button>\\r\\n<div style=\\\"height:5px;\\\"></div>\\r\\n<button :style=\\\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"loadxml()\\\">xml</button>\\r\\n<v-card-actions >\\r\\n  <button  variant=\\\"outlined\\\" @click=\\\"ok() \\\">OK</button>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\\r\\n<v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"pathloaddialog\\\" transition=\\\"dialog-bottom-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title>path of file</v-card-title>\\r\\n<input type=\\\"text\\\" placeholder=\\\"c:\\\\\\\\name\\\" id=\\\"pathload\\\" autofocus>\\r\\n<v-card-actions >\\r\\n  <button  variant=\\\"outlined\\\" @click=\\\"open()\\\">open</button>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog> \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_v_stage, {\n    config: $data.configKonva,\n    ref: \"stage\",\n    onDblclick: $options.draw,\n    onClick: $options.handleClick,\n    onMousedown: $options.handleStageMouseDown\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_layer, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.squares, (square, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            x: square.x,\n            y: square.y,\n            width: square.width,\n            height: square.height,\n            fill: square.fill,\n            // Use the selected fill color\n            stroke: square.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: square.id,\n            rotation: square.rotation,\n            scaleX: square.scaleX,\n            scaleY: square.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('square', index),\n          onDragend: $event => $options.newpo('square', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing rectangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rectangles, (rect, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill,\n            // Use the selected fill color\n            stroke: rect.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: rect.id,\n            rotation: rect.rotation,\n            scaleX: rect.scaleX,\n            scaleY: rect.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('rect', index),\n          onDragend: $event => $options.newpo('rect', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing circles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.circles, (circle, index) => {\n        return _openBlock(), _createBlock(_component_v_circle, {\n          key: index,\n          config: {\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            stroke: circle.stroke,\n            strokeWidth: 2,\n            draggable: true,\n            id: circle.id,\n            rotation: circle.rotation,\n            scaleX: circle.scaleX,\n            scaleY: circle.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('circle', index),\n          onDragend: $event => $options.newpo('circle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing ellipses \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ellipses, (ellipse, index) => {\n        return _openBlock(), _createBlock(_component_v_ellipse, {\n          key: index,\n          config: {\n            x: ellipse.x,\n            y: ellipse.y,\n            radiusX: ellipse.radiusX,\n            radiusY: ellipse.radiusY,\n            fill: ellipse.fill,\n            // Use the selected fill color\n            stroke: ellipse.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: ellipse.id,\n            rotation: ellipse.rotation,\n            scaleX: ellipse.scaleX,\n            scaleY: ellipse.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('ellipse', index),\n          onDragend: $event => $options.newpo('ellipse', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing star \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.stars, (star, index) => {\n        return _openBlock(), _createBlock(_component_v_star, {\n          key: index,\n          config: {\n            x: star.x,\n            y: star.y,\n            innerRadius: star.innerRadius,\n            outerRadius: star.outerRadius,\n            numPoints: star.numPoints,\n            fill: star.fill,\n            // Use the selected fill color\n            stroke: star.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: star.id,\n            rotation: star.rotation,\n            scaleX: star.scaleX,\n            scaleY: star.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('star', index),\n          onDragend: $event => $options.newpo('star', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing line segment \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lines, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            x: line.x,\n            y: line.y,\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: true,\n            id: line.id,\n            rotation: line.rotation,\n            scaleX: line.scaleX,\n            scaleY: line.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('line', index),\n          onDragend: $event => $options.newpo('line', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" square \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.triangles, (triangle, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            x: triangle.x,\n            y: triangle.y,\n            sides: 3,\n            radius: triangle.radius,\n            fill: triangle.fill,\n            stroke: triangle.stroke,\n            strokeWidth: 2,\n            draggable: true,\n            id: triangle.id,\n            rotation: triangle.rotation,\n            scaleX: triangle.scaleX,\n            scaleY: triangle.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('triangle', index),\n          onDragend: $event => $options.newpo('triangle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.brus, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: false\n          }\n        }, null, 8 /* PROPS */, [\"config\"]);\n      }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.polygons, (polygon, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            x: polygon.x,\n            y: polygon.y,\n            sides: 6,\n            radius: polygon.radius,\n            fill: polygon.fill,\n            stroke: polygon.stroke,\n            strokeWidth: 5,\n            draggable: true,\n            id: polygon.id,\n            rotation: polygon.rotation,\n            scaleX: polygon.scaleX,\n            scaleY: polygon.scaleY\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('Polygon', index),\n          onDragend: $event => $options.newpo('Polygon', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_v_transformer, {\n        ref: \"transformer\"\n      }, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"config\", \"onDblclick\", \"onClick\", \"onMousedown\"])]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    title: \"Save\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.laod()),\n    class: \"custom-btn\"\n  }, [..._hoisted_5]), _createElementVNode(\"button\", {\n    title: \"Load\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.save()),\n    class: \"custom-btn\"\n  }, [..._hoisted_7]), _hoisted_8, _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_color_picker, {\n    gradientColor: _ctx.gradientColor,\n    \"onUpdate:gradientColor\": _cache[2] || (_cache[2] = $event => _ctx.gradientColor = $event),\n    pureColor: $data.pureColor,\n    \"onUpdate:pureColor\": _cache[3] || (_cache[3] = $event => $data.pureColor = $event)\n  }, null, 8 /* PROPS */, [\"gradientColor\", \"pureColor\"])]), _createElementVNode(\"button\", {\n    title: \"Fill\",\n    onClick: _cache[4] || (_cache[4] = $event => $options.fill()),\n    class: \"custom-btn\"\n  }, [..._hoisted_11]), _createElementVNode(\"button\", {\n    title: \"Border\",\n    onClick: _cache[5] || (_cache[5] = $event => $options.edge()),\n    class: \"custom-btn\"\n  }, [..._hoisted_13]), _createElementVNode(\"button\", {\n    title: \"Copy\",\n    onClick: _cache[6] || (_cache[6] = $event => $options.copy()),\n    class: \"custom-btn\"\n  }, [..._hoisted_15]), _createElementVNode(\"button\", {\n    title: \"Undo\",\n    onClick: _cache[7] || (_cache[7] = $event => $options.undo()),\n    class: \"custom-btn\"\n  }, [..._hoisted_17]), _createElementVNode(\"button\", {\n    title: \"Redo\",\n    onClick: _cache[8] || (_cache[8] = $event => $options.Redo()),\n    class: \"custom-btn\"\n  }, [..._hoisted_19]), _hoisted_20, _createElementVNode(\"button\", {\n    title: \"Square\",\n    onClick: _cache[9] || (_cache[9] = $event => $options.square()),\n    class: \"custom-btn\"\n  }, [..._hoisted_22]), _createElementVNode(\"button\", {\n    title: \"Rectangle\",\n    onClick: _cache[10] || (_cache[10] = $event => $options.rect()),\n    class: \"custom-btn\"\n  }, [..._hoisted_24]), _createElementVNode(\"button\", {\n    title: \"Circle\",\n    onClick: _cache[11] || (_cache[11] = $event => $options.circle()),\n    class: \"custom-btn\"\n  }, [..._hoisted_26]), _createElementVNode(\"button\", {\n    title: \"Triangle\",\n    onClick: _cache[12] || (_cache[12] = $event => $options.triangle()),\n    class: \"custom-btn\"\n  }, [..._hoisted_28]), _createElementVNode(\"button\", {\n    title: \"Ellipse\",\n    onClick: _cache[13] || (_cache[13] = $event => $options.ellipse()),\n    class: \"custom-btn\"\n  }, [..._hoisted_30]), _createElementVNode(\"button\", {\n    title: \"Star\",\n    onClick: _cache[14] || (_cache[14] = $event => $options.star()),\n    class: \"custom-btn\"\n  }, [..._hoisted_32]), _createElementVNode(\"button\", {\n    title: \"Hexagon\",\n    onClick: _cache[15] || (_cache[15] = $event => $options.polyg()),\n    class: \"custom-btn\"\n  }, [..._hoisted_34]), _createElementVNode(\"button\", {\n    title: \"Line\",\n    onClick: _cache[16] || (_cache[16] = $event => $options.line()),\n    class: \"custom-btn\"\n  }, [..._hoisted_36]), _createCommentVNode(\" <button title=\\\"Brush\\\" @click=\\\"brush()\\\" class=\\\"custom-btn\\\">  \\r\\n<svg width=\\\"24\\\" height=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\r\\n  <path d=\\\"M5 2L3 4s-2 2 0 3 4 1 4 1 1-2 3-1 3 1 3 1\\\"></path> \\r\\n</svg>\\r\\n</button> \"), _hoisted_37, _createElementVNode(\"button\", {\n    title: \"Delete\",\n    onClick: _cache[17] || (_cache[17] = $event => $options.del()),\n    class: \"custom-btn\"\n  }, [..._hoisted_39]), _createElementVNode(\"button\", {\n    title: \"Clear\",\n    onClick: _cache[18] || (_cache[18] = $event => $options.clr()),\n    class: \"custom-btn\"\n  }, [..._hoisted_41])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_4","_hoisted_6","_hoisted_10","_hoisted_12","_hoisted_14","_hoisted_16","_hoisted_18","width","height","xmlns","fill","stroke","x","y","_createCommentVNode","_hoisted_21","_hoisted_23","cx","cy","r","_hoisted_25","points","_hoisted_27","rx","ry","_hoisted_29","viewBox","_hoisted_31","_hoisted_33","x1","y1","x2","y2","_hoisted_35","_hoisted_38","_hoisted_40","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_v_stage","config","$data","configKonva","ref","onDblclick","$options","draw","onClick","handleClick","onMousedown","handleStageMouseDown","_component_v_layer","_Fragment","_renderList","squares","square","index","_createBlock","_component_v_rect","key","id","rotation","scaleX","scaleY","onTransformend","handleTransformEnd","$event","shapeClicked","onDragend","newpo","rectangles","rect","circles","circle","_component_v_circle","radius","ellipses","ellipse","_component_v_ellipse","radiusX","radiusY","stars","star","_component_v_star","innerRadius","outerRadius","numPoints","lines","line","_component_v_line","triangles","triangle","_component_v_regular_polygon","brus","polygons","polygon","_component_v_transformer","_hoisted_3","title","_cache","laod","save","_hoisted_8","_hoisted_9","_component_color_picker","gradientColor","_ctx","pureColor","edge","copy","undo","Redo","_hoisted_20","polyg","_hoisted_37","del","clr"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n\r\n\r\n<!-- <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title><h1>save</h1></v-card-title>\r\n<v-card-subtitle> xml OR json  </v-card-subtitle>\r\n<button :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</button>\r\n<div style=\"height:5px;\"></div>\r\n<button :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</button>\r\n<v-card-actions >\r\n  <button  variant=\"outlined\" @click=\"submity() \">OK</button>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title>path of saving</v-card-title>\r\n<input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n<v-card-actions >\r\n  <button  variant=\"outlined\" @click=\"send()\">save</button>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title><h1>Open</h1></v-card-title>\r\n<v-card-subtitle> xml OR json  </v-card-subtitle>\r\n<button :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</button>\r\n<div style=\"height:5px;\"></div>\r\n<button :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</button>\r\n<v-card-actions >\r\n  <button  variant=\"outlined\" @click=\"ok() \">OK</button>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title>path of file</v-card-title>\r\n<input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n<v-card-actions >\r\n  <button  variant=\"outlined\" @click=\"open()\">open</button>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog> -->\r\n\r\n<div class=\"bord\">\r\n<v-stage :config=\"configKonva\" ref=\"stage\" @dblclick=\"draw\" @click=\"handleClick\"  @mousedown=\"handleStageMouseDown\">\r\n<v-layer>\r\n<v-rect\r\nv-for=\"(square, index) in squares\"\r\n:key=\"index\"\r\n:config=\"{\r\n x: square.x,\r\ny: square.y,\r\nwidth: square.width,\r\nheight: square.height,\r\nfill: square.fill, // Use the selected fill color\r\nstroke: square.stroke, // Use the selected edge color\r\nstrokeWidth: 2 ,\r\ndraggable:true,\r\nid:square.id,\r\nrotation:square.rotation,\r\nscaleX:square.scaleX,\r\nscaleY:square.scaleY\r\n\r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('square', index)\"\r\n@dragend=\"newpo('square', index, $event)\"   \r\n>\r\n\r\n</v-rect>\r\n<!-- drawing rectangles -->\r\n<v-rect\r\nv-for=\"(rect, index) in rectangles\"\r\n:key=\"index\"\r\n:config=\"{ \r\nx:  rect.x,\r\ny: rect.y,\r\nwidth: rect.width,\r\nheight: rect.height,\r\nfill: rect.fill, // Use the selected fill color\r\nstroke: rect.stroke, // Use the selected edge color\r\nstrokeWidth: 2 ,\r\ndraggable:true,\r\nid:rect.id,\r\nrotation:rect.rotation,\r\nscaleX:rect.scaleX,\r\nscaleY:rect.scaleY\r\n \r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('rect', index) \"\r\n@dragend=\"newpo('rect', index, $event)\"   \r\n\r\n\r\n></v-rect>\r\n<!-- drawing circles -->\r\n<v-circle\r\nv-for=\"(circle, index) in circles\"\r\n:key=\"index\"\r\n:config=\"{\r\nx: circle.x,\r\ny: circle.y,\r\nradius:circle.radius,\r\nfill:circle.fill,\r\nstroke:circle.stroke,\r\nstrokeWidth: 2,\r\ndraggable:true,\r\nid:circle.id,\r\n rotation:circle.rotation,\r\nscaleX:circle.scaleX,\r\nscaleY:circle.scaleY\r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('circle', index)\"\r\n@dragend=\"newpo('circle', index, $event)\"     >\r\n\r\n</v-circle>\r\n<!-- drawing ellipses -->\r\n<v-ellipse\r\nv-for=\"(ellipse, index) in ellipses\"\r\n:key=\"index\"\r\n:config=\"{\r\nx: ellipse.x,\r\ny: ellipse.y,\r\nradiusX:ellipse.radiusX,\r\nradiusY:ellipse.radiusY,\r\nfill: ellipse.fill, // Use the selected fill color\r\nstroke: ellipse.stroke, // Use the selected edge color\r\nstrokeWidth: 2,\r\ndraggable:true,\r\nid:ellipse.id,\r\n rotation:ellipse.rotation,\r\nscaleX:ellipse.scaleX,\r\nscaleY:ellipse.scaleY\r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('ellipse', index)\"\r\n@dragend=\"newpo('ellipse', index, $event)\"   \r\n\r\n>\r\n\r\n</v-ellipse>\r\n<!-- drawing star -->\r\n<v-star\r\nv-for=\"(star, index) in stars\"\r\n:key=\"index\"\r\n:config=\"{\r\nx: star.x,\r\ny: star.y,\r\ninnerRadius:star.innerRadius,\r\nouterRadius:star.outerRadius,\r\nnumPoints:star.numPoints,\r\nfill: star.fill, // Use the selected fill color\r\nstroke: star.stroke, // Use the selected edge color\r\nstrokeWidth: 2,\r\ndraggable:true,\r\nid:star.id,\r\n rotation:star.rotation,\r\nscaleX:star.scaleX,\r\nscaleY:star.scaleY\r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('star', index)\"\r\n@dragend=\"newpo('star', index, $event)\"   \r\n\r\n>\r\n\r\n</v-star>\r\n<!-- drawing line segment -->\r\n<v-line\r\nv-for=\"(line, index) in lines\"\r\n:key=\"index\"\r\n:config=\"{\r\nx : line.x,\r\ny : line.y,\r\npoints:line.points,\r\nstroke: line.stroke,\r\nstrokeWidth: 4,\r\ndraggable:true,\r\nid:line.id,\r\n rotation:line.rotation,\r\nscaleX:line.scaleX,\r\nscaleY:line.scaleY\r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('line', index)\"\r\n@dragend=\"newpo('line', index, $event)\"   \r\n>\r\n\r\n</v-line>\r\n<!-- square -->\r\n\r\n<v-regular-polygon\r\nv-for=\"(triangle, index) in triangles\"\r\n:key=\"index\"\r\n:config=\"{\r\nx: triangle.x,\r\ny: triangle.y,\r\nsides:3,\r\nradius:triangle.radius,\r\nfill: triangle.fill, \r\nstroke: triangle.stroke, \r\nstrokeWidth: 2,\r\ndraggable:true,\r\nid:triangle.id,\r\n rotation:triangle.rotation,\r\nscaleX:triangle.scaleX,\r\nscaleY:triangle.scaleY\r\n}\"\r\n@transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('triangle', index)\"\r\n@dragend=\"newpo('triangle', index, $event)\"   \r\n>\r\n\r\n</v-regular-polygon>\r\n<v-line\r\nv-for=\"(line, index) in brus\"\r\n:key=\"index\"\r\n:config=\"{\r\npoints:line.points,\r\nstroke: line.stroke,\r\nstrokeWidth: 4,\r\ndraggable:false,\r\n}\"\r\n>\r\n\r\n</v-line>\r\n\r\n\r\n<v-regular-polygon\r\nv-for=\"(polygon, index) in polygons\"\r\n:key=\"index\"\r\n:config=\"{\r\nx: polygon.x,\r\ny: polygon.y,\r\nsides:6,\r\nradius:polygon.radius,\r\nfill: polygon.fill, \r\nstroke: polygon.stroke, \r\nstrokeWidth: 5,\r\ndraggable:true,\r\nid:polygon.id,\r\n rotation:polygon.rotation,\r\nscaleX:polygon.scaleX,\r\nscaleY:polygon.scaleY\r\n}\"\r\n @transformend=\"handleTransformEnd\"\r\n@click=\"shapeClicked('Polygon', index)\"\r\n@dragend=\"newpo('Polygon', index, $event)\"   \r\n>\r\n</v-regular-polygon>\r\n\r\n<v-transformer ref=\"transformer\" />\r\n</v-layer>\r\n</v-stage>\r\n</div>\r\n\r\n<div class=\"left-bar\">\r\n<button title=\"Save\" @click=\"laod()\" class=\"custom-btn\"><i class=\"fa-solid fa-folder-open\"></i></button>\r\n<button title=\"Load\" @click=\"save()\" class=\"custom-btn\"><i class=\"fa-solid fa-floppy-disk\"></i></button>\r\n<hr>\r\n<div class=\"palette\">\r\n<color-picker v-model:gradientColor=\"gradientColor\" v-model:pureColor=\"pureColor\" />\r\n</div>\r\n<button title=\"Fill\" @click=\"fill()\" class=\"custom-btn\"><i class=\"fa-solid fa-fill-drip\"></i></button>\r\n<button title=\"Border\" @click=\"edge()\" class=\"custom-btn\"><i class=\"fa-solid fa-paintbrush\"></i></button>\r\n<button title=\"Copy\" @click=\"copy()\" class=\"custom-btn\"><i class=\"fa-solid fa-copy\"></i></button>\r\n<button title=\"Undo\" @click=\"undo()\" class=\"custom-btn\"><i class=\"fa-solid fa-arrow-rotate-left\"></i></button>\r\n<button title=\"Redo\" @click=\"Redo()\" class=\"custom-btn\"><i class=\"fa-solid fa-rotate-right\"></i></button>\r\n<hr>\r\n<button title=\"Square\" @click=\"square()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\"></rect> <!-- Square -->\r\n</svg>\r\n</button>\r\n<button title=\"Rectangle\" @click=\"rect()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <rect width=\"18\" height=\"10\" x=\"3\" y=\"1\"></rect> <!-- Rectangle -->\r\n</svg>\r\n</button>\r\n<button title=\"Circle\" @click=\"circle()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle> <!-- Circle -->\r\n</svg>\r\n</button>\r\n<button title=\"Triangle\" @click=\"triangle()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <polygon points=\"12 2 2 22 22 22\"></polygon> <!-- Triangle -->\r\n</svg>\r\n</button>\r\n<button title=\"Ellipse\" @click=\"ellipse()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <ellipse cx=\"12\" cy=\"12\" rx=\"10\" ry=\"6\"></ellipse> <!-- Ellipse -->\r\n</svg>\r\n</button>\r\n<button title=\"Star\" @click=\"star()\" class=\"custom-btn\">\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <polygon points=\"12 2 15.09 8 22 9.27 17 14 18.18 20 12 17.09 5.82 20 7 14 2 9.27 8 8 12\"></polygon>\r\n</svg>\r\n</button>\r\n<button title=\"Hexagon\" @click=\"polyg()\" class=\"custom-btn\">\r\n  <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <polygon points=\"12,2 22,7 22,17 12,22 2,17 2,7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n  </svg>\r\n</button>\r\n<button title=\"Line\" @click=\"line()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line> <!-- Line -->\r\n</svg>\r\n</button>\r\n<!-- <button title=\"Brush\" @click=\"brush()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <path d=\"M5 2L3 4s-2 2 0 3 4 1 4 1 1-2 3-1 3 1 3 1\"></path> \r\n</svg>\r\n</button> -->\r\n<hr>\r\n\r\n<button title=\"Delete\" @click=\"del()\" class=\"custom-btn\"><i class=\"fa-solid fa-eraser\"></i></button>\r\n<button title=\"Clear\" @click=\"clr()\" class=\"custom-btn\"><i class=\"fa-solid fa-trash\"></i></button>\r\n\r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// import Vue from 'vue';\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      stars:[],\r\n       polygons:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      str:false,\r\n      poly:false,\r\n      delete:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedshapeid: '',  //transform\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        poldialog:false,\r\n        length:200,\r\n        un:0,\r\n        re:0,\r\n        shapeid:-1,\r\n         brus:[]\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n   handleClick() {\r\n       this.cop=false;\r\n      this.cofill=false;\r\n      this.coledge=false; \r\n    },\r\n    /*drawbrush()\r\n    {\r\n       if(this.bru)\r\n       {\r\n        this.draw();\r\n         const stage = this.$refs.stage.getStage();\r\n            const position = stage.getPointerPosition();\r\n         this.currentShape.points.push(position.x, position.y);\r\n       }\r\n       this.stopDrawing();\r\n    },\r\n*/\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n   var v=0;\r\n\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n       for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'star') {\r\n      this.shapeType = \"Star\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        \r\n    this.stars[index].x=e.target.x();\r\n    this.stars[index].y=e.target.y();\r\n    this.shapes[v].x=this.stars[index].x;\r\n    this.shapes[v].y=this.stars[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.stars[index].x);\r\n    console.log(this.stars[index].y);\r\n    \r\n  }\r\n    if (type === 'line') {\r\n      this.shapeType = \"Line\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n\r\n    if (type === 'Polygon') {\r\n      this.shapeType = \"Polygon\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.polygons[index].x=e.target.x();\r\n    this.polygons[index].y=e.target.y();\r\n    this.shapes[v].x=this.polygons[index].x;\r\n    this.shapes[v].y=this.polygons[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.polygons[index].x);\r\n    console.log(this.polygons[index].y);\r\n    }\r\n    \r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n         this.str=false;\r\n      this.poly=false;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n         this.str=false;\r\n      this.poly=false;\r\n    }, \r\n    star()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.str=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.poly=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n   polyg()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.poly=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.str=false;\r\n      this.bru=false;\r\n    },\r\n\r\n\r\n\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.stars =[];\r\n      this.polygons=[];\r\n      this.un=0;\r\n      this.re=0;\r\n      this.shapeid=-1;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n\r\n\r\n    if(type==='Polygon')\r\n     {\r\n       this.shapeType = \"Polygon\"\r\n        let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n           if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.updateTransformer();\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.polygons.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n         \r\n           this.un++; \r\n              this.polygons.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n              this.selectedid=-1;\r\n               this.updateTransformer();\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.polygons[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.polygons[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.polygons[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.polygons[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n        \r\n     }\r\n\r\n     else if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n        let v=0;\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n            \r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++; \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n        if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n      else if(type==='star') {\r\n        let v=0;\r\n         this.shapeType = \"Star\"\r\n  for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.stars.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n      if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.stars.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n        if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.stars[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.stars[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.stars[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.stars[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify() \r\n       \r\n     }\r\n        }\r\n       \r\n     else if(type==='square')\r\n     {\r\n      console.log(\"xx\");\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          console.log(this.shapes[v]);\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n           \r\n        }\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.str=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.cop=false;\r\n    },\r\n      draw() {\r\n        this.selectedid=-1;\r\n        this.updateTransformer();\r\n     if(this.rectangle)\r\n      {\r\n          this.shapeid++;\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Rectangle',\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 250,\r\n            height: 400,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                  scaleX : 1,\r\n                 scaleY : 1\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ){\r\n          this.shapeid++;\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Circle',\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 200,\r\n               id:String(this.shapeid),\r\n                 rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Ellipse',\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 200,\r\n              radiusY:130,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.str)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Star',\r\n                 fill:this.pureColor,\r\n                 stroke:this.pureColor2,\r\n               strokeWidth:2,\r\n              innerRadius:130,\r\n              outerRadius:200,\r\n              numPoints:6,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin)\r\n      {\r\n          this.shapeid++;\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Line',\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0,200,150],\r\n                 id:String(this.shapeid),\r\n                   rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt)\r\n      {\r\n          this.shapeid++;\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n               type:'Square',\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 200,\r\n            height: 200,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n         this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Triangle',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                    rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.poly)\r\n      {\r\n             this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Polygon',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                     rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n\r\n              };\r\n              \r\n            }\r\n          }\r\n      }\r\n      \r\n   \r\n        else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             this.currentShape = {\r\n            points: [position.x, position.y],\r\n            stroke: this.pureColor2,\r\n            strokeWidth: 4,\r\n          };\r\n            }\r\n          }\r\n        \r\n      }\r\n       this.selectedid=-1;\r\n        this.updateTransformer();\r\n      \r\n        this.stopDrawing();\r\n    },\r\n    stopDrawing() {\r\n      console.log(this.currentShape);\r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n        \r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n      else if(this.str)\r\n      {\r\n        console.log(\"brt\");\r\n        this.shapeType = 'Star';\r\n\r\n           this.stars.push({...this.currentShape});\r\n           this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n        else if(this.bru)\r\n      {\r\n          this.brus.push({...this.currentShape});\r\n      }\r\n      else if(this.poly)\r\n      {\r\n          this.shapeType = 'Polygon';\r\n           this.polygons.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n        this.currentShape = null;\r\n      }\r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){\r\n      this.un = 0\r\n      this.re = 0 \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n   \r\n         for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n        \r\n         \r\n      }\r\n          if(this.shapes.length!==0)\r\n          {\r\n              this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n          }\r\n          else\r\n          { \r\n              this.shapeid=-1;  \r\n          }\r\n         \r\n      }\r\n      if(this.lodxml){\r\n        this.un = 0\r\n        this.re = 0\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n      \r\n        for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n        if(this.shapes.length!==0)\r\n          {\r\n              this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n          }\r\n          else\r\n          { \r\n              this.shapeid=-1;  \r\n          }\r\n    }\r\n\r\n     },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\nasync undo() {\r\n  if (this.un !== 0) {\r\n    await fetch('http://localhost:8080/undo', {\r\n      method: 'GET',\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => this.shapes = data);\r\n\r\n    console.log(this.shapes);\r\n\r\n    this.circles = [];\r\n    this.lines = [];\r\n    this.squares = [];\r\n    this.rectangles = [];\r\n    this.triangles = [];\r\n    this.ellipses = [];\r\n    this.stars = [];\r\n    this.polygons = [];\r\n\r\n    // Create an array of promises to wait for each push operation to complete\r\n    const pushPromises = this.shapes.map(shape => {\r\n  if (shape !== null) {\r\n    if (shape.type === 'Rectangle') {\r\n      this.rectangles.push({ ...shape });\r\n    } else if (shape.type === 'Circle') {\r\n      this.circles.push({ ...shape });\r\n    } else if (shape.type === 'Ellipse') {\r\n      this.ellipses.push({ ...shape });\r\n    } else if (shape.type === 'Star') {\r\n      this.stars.push({ ...shape });\r\n    } else if (shape.type === 'Square') {\r\n      this.squares.push({ ...shape });\r\n    } else if (shape.type === 'Triangle') {\r\n      this.triangles.push({ ...shape });\r\n    } else if (shape.type === 'Line') {\r\n      this.lines.push({ ...shape });\r\n    } else if (shape.type === 'Polygon') {\r\n      this.polygons.push({ ...shape });\r\n    }\r\n  }\r\n});\r\n\r\n\r\n    // Wait for all promises to resolve before proceeding\r\n    await Promise.all(pushPromises);\r\n\r\n    this.un--;\r\n    this.re++;\r\n  }\r\n},\r\n     async Redo()\r\n    {\r\n     this.updateTransformer()\r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    },\r\n     handleTransformEnd(e) {\r\n      let shape;\r\n      for(let i = 0; i < this.shapes.length; i++){\r\n        if(this.shapes[i] !== null && this.shapes[i].id === this.selectedid)\r\n          shape = this.shapes[i];\r\n      }\r\n\r\n\r\n      shape.x = e.target.x();\r\n      shape.y = e.target.y();\r\n      shape.rotation = e.target.rotation();\r\n      shape.scaleX = e.target.scaleX();\r\n      shape.scaleY = e.target.scaleY();\r\n\r\n      this.ord=shape.id;\r\n      this.shapeType=shape.type;\r\n      this.modifysh=shape;\r\n\r\n       this.un++;\r\n        if(shape.type === \"Square\"){\r\n            shape = this.squares.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Rectangle\"){\r\n            shape = this.rectangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Circle\"){\r\n            shape = this.circles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Triangle\"){\r\n            shape = this.triangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Polygon\"){\r\n            shape = this.polygons.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Line\"){\r\n            shape = this.lines.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Ellipse\"){\r\n            shape = this.ellipses.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n          else if(shape.type === \"Star\"){\r\n            shape = this.stars.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      console.log(shape);\r\n      this.modify();\r\n      \r\n\r\n\r\n    },\r\n    handleStageMouseDown(e) {\r\n      if (e.target === e.target.getStage()) {\r\n        this.selectedid = '';\r\n        this.updateTransformer();\r\n        return;\r\n        \r\n      }\r\n\r\n      const clickedOnTransformer =\r\n        e.target.getParent().className === 'Transformer';\r\n      if (clickedOnTransformer) {\r\n        return;\r\n      }\r\n\r\n     \r\n    \r\n      const x= e.target.id();\r\n\r\n      // console.log(x)\r\n      let shape;\r\n      for(let i = 0; i < this.shapes.length; i++){\r\n        if(this.shapes[i] !== null && this.shapes[i].id === x)\r\n          shape = this.shapes[i];\r\n      }\r\n\r\n      // const shape = this.shapes.find((r) => r.id === x);\r\n\r\n      if (shape) {\r\n        this.selectedid = x;\r\n      } else {\r\n        this.selectedid = '';\r\n      }\r\n      this.updateTransformer();\r\n    },\r\n    updateTransformer() {\r\n      const transformerNode = this.$refs.transformer.getNode();\r\n      const stage = transformerNode.getStage();\r\n      const { selectedid } = this;\r\n      console.log(selectedid);\r\n      const selectedNode = stage.findOne('#' + String(this.selectedid));\r\n      console.log(selectedNode);\r\n      if (selectedNode === transformerNode.node()) {\r\n        return;\r\n      }\r\n\r\n      if (selectedNode) {\r\n        transformerNode.nodes([selectedNode]);\r\n      } else {\r\n        transformerNode.nodes([]);\r\n      }\r\n    },\r\n\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n@keyframes rotateAnimation {\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n.palette{\r\n\r\n}\r\n\r\n.bord{\r\n  position: relative;\r\n  height: 100vh;\r\n}\r\n  \r\n.left-bar{\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1f2e2e;\r\n  margin-left: 20px;\r\n  padding: 30px 0;\r\n  border-radius: 30px;\r\n}\r\n\r\n.custom-btn{\r\n  width: 100px;\r\n    height: 100px;\r\n  background-color: transparent;\r\n  box-shadow: none;\r\n  border: none;\r\n  color: white;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.custom-btn:hover{\r\n  animation: rotateAnimation 1s infinite;\r\n  background-color: #b300b3;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}