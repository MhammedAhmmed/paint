{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"bord\"\n};\nconst _hoisted_3 = {\n  class: \"left-bar\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-folder-open\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-floppy-disk\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_7 = {\n  class: \"palette\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-fill-drip\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-paintbrush\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-copy\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrow-rotate-left\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-rotate-right\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  width: \"18\",\n  height: \"18\",\n  x: \"3\",\n  y: \"3\"\n}), /*#__PURE__*/_createCommentVNode(\" Square \")], -1 /* HOISTED */));\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"12\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  width: \"18\",\n  height: \"10\",\n  x: \"3\",\n  y: \"1\"\n}), /*#__PURE__*/_createCommentVNode(\" Rectangle \")], -1 /* HOISTED */));\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"10\"\n}), /*#__PURE__*/_createCommentVNode(\" Circle \")], -1 /* HOISTED */));\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12 2 2 22 22 22\"\n}), /*#__PURE__*/_createCommentVNode(\" Triangle \")], -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"ellipse\", {\n  cx: \"12\",\n  cy: \"12\",\n  rx: \"10\",\n  ry: \"6\"\n}), /*#__PURE__*/_createCommentVNode(\" Ellipse \")], -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"12 2 15.09 8 22 9.27 17 14 18.18 20 12 17.09 5.82 20 7 14 2 9.27 8 8 12\"\n})], -1 /* HOISTED */));\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\"\n}, [/*#__PURE__*/_createElementVNode(\"line\", {\n  x1: \"2\",\n  y1: \"12\",\n  x2: \"22\",\n  y2: \"12\"\n}), /*#__PURE__*/_createCommentVNode(\" Line \")], -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"100\",\n  height: \"24\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, [/*#__PURE__*/_createElementVNode(\"polygon\", {\n  points: \"50,5 95,25 95,75 50,95 5,75 5,25\",\n  fill: \"none\",\n  stroke: \"currentColor\"\n})], -1 /* HOISTED */));\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_23 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-eraser\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-trash\"\n}, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_rect = _resolveComponent(\"v-rect\");\n  const _component_v_circle = _resolveComponent(\"v-circle\");\n  const _component_v_ellipse = _resolveComponent(\"v-ellipse\");\n  const _component_v_star = _resolveComponent(\"v-star\");\n  const _component_v_line = _resolveComponent(\"v-line\");\n  const _component_v_regular_polygon = _resolveComponent(\"v-regular-polygon\");\n  const _component_v_transformer = _resolveComponent(\"v-transformer\");\n  const _component_v_layer = _resolveComponent(\"v-layer\");\n  const _component_v_stage = _resolveComponent(\"v-stage\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_color_picker = _resolveComponent(\"color-picker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" <v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"savdialog\\\" transition=\\\"dialog-top-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title><h1>save</h1></v-card-title>\\r\\n<v-card-subtitle> xml OR json  </v-card-subtitle>\\r\\n<v-btn :style=\\\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"savejason()\\\">json</v-btn>\\r\\n<div style=\\\"height:5px;\\\"></div>\\r\\n<v-btn :style=\\\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"savexml()\\\">xml</v-btn>\\r\\n<v-card-actions >\\r\\n  <v-btn  variant=\\\"outlined\\\" @click=\\\"submity() \\\">OK</v-btn>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\\r\\n<v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"pathdialog\\\" transition=\\\"dialog-bottom-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title>path of saving</v-card-title>\\r\\n<input type=\\\"text\\\" placeholder=\\\"c:\\\\\\\\name\\\" id=\\\"path\\\" autofocus>\\r\\n<v-card-actions >\\r\\n  <v-btn  variant=\\\"outlined\\\" @click=\\\"send()\\\">save</v-btn>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\\r\\n<v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"loaddialog\\\" transition=\\\"dialog-top-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title><h1>Open</h1></v-card-title>\\r\\n<v-card-subtitle> xml OR json  </v-card-subtitle>\\r\\n<v-btn :style=\\\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"loadjason()\\\">json</v-btn>\\r\\n<div style=\\\"height:5px;\\\"></div>\\r\\n<v-btn :style=\\\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\\\" @click=\\\"loadxml()\\\">xml</v-btn>\\r\\n<v-card-actions >\\r\\n  <v-btn  variant=\\\"outlined\\\" @click=\\\"ok() \\\">OK</v-btn>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\\r\\n<v-dialog width=\\\"400\\\" class=\\\"saving\\\" v-model=\\\"pathloaddialog\\\" transition=\\\"dialog-bottom-transition\\\">\\r\\n<v-card variant=\\\"outlined\\\">\\r\\n<v-card-title>path of file</v-card-title>\\r\\n<input type=\\\"text\\\" placeholder=\\\"c:\\\\\\\\name\\\" id=\\\"pathload\\\" autofocus>\\r\\n<v-card-actions >\\r\\n  <v-btn  variant=\\\"outlined\\\" @click=\\\"open()\\\">open</v-btn>\\r\\n</v-card-actions>\\r\\n</v-card>\\r\\n</v-dialog>\"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_v_stage, {\n    config: $data.configKonva,\n    ref: \"stage\",\n    onDblclick: $options.draw,\n    onClick: $options.handleClick,\n    onMousedown: $options.handleStageMouseDown,\n    onTouchstart: $options.handleStageMouseDown\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_layer, null, {\n      default: _withCtx(() => [_createCommentVNode(\" drawing squares \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.squares, (square, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'square',\n            x: square.x,\n            y: square.y,\n            width: square.width,\n            height: square.height,\n            fill: square.fill,\n            // Use the selected fill color\n            stroke: square.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true,\n            id: square.id\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('square', index),\n          onDragend: $event => $options.newpo('square', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing rectangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rectangles, (rect, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'Rectangle',\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill,\n            // Use the selected fill color\n            stroke: rect.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('rect', index),\n          onDragend: $event => $options.newpo('rect', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing circles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.circles, (circle, index) => {\n        return _openBlock(), _createBlock(_component_v_circle, {\n          key: index,\n          config: {\n            type: 'circle',\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            stroke: circle.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('circle', index),\n          onDragend: $event => $options.newpo('circle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing ellipses \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ellipses, (ellipse, index) => {\n        return _openBlock(), _createBlock(_component_v_ellipse, {\n          key: index,\n          config: {\n            type: 'ellipse',\n            x: ellipse.x,\n            y: ellipse.y,\n            radiusX: ellipse.radiusX,\n            radiusY: ellipse.radiusY,\n            fill: ellipse.fill,\n            // Use the selected fill color\n            stroke: ellipse.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('ellipse', index),\n          onDragend: $event => $options.newpo('ellipse', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing stars \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.stars, (star, index) => {\n        return _openBlock(), _createBlock(_component_v_star, {\n          key: index,\n          config: {\n            type: 'star',\n            x: star.x,\n            y: star.y,\n            innerRadius: star.innerRadius,\n            outerRadius: star.outerRadius,\n            numPoints: star.numPoints,\n            fill: star.fill,\n            // Use the selected fill color\n            stroke: star.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('star', index),\n          onDragend: $event => $options.newpo('star', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing lines \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lines, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            type: 'line',\n            x: line.x,\n            y: line.y,\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('line', index),\n          onDragend: $event => $options.newpo('line', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing triangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.triangles, (triangle, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'triangle',\n            x: triangle.x,\n            y: triangle.y,\n            sides: 3,\n            radius: triangle.radius,\n            fill: triangle.fill,\n            stroke: triangle.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onTransformend: $options.handleTransformEnd,\n          onClick: $event => $options.shapeClicked('triangle', index),\n          onDragend: $event => $options.newpo('triangle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onTransformend\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing brush \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.brus, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 4,\n            draggable: false\n          }\n        }, null, 8 /* PROPS */, [\"config\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing regular-polygon\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.polygons, (polygon, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'polygon',\n            x: polygon.x,\n            y: polygon.y,\n            sides: 8,\n            radius: polygon.radius,\n            fill: polygon.fill,\n            stroke: polygon.stroke,\n            strokeWidth: 5,\n            draggable: true\n          },\n          onClick: $event => $options.shapeClicked('polygon', index),\n          onDragend: $event => $options.newpo('polygon', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" resizing and routation \"), _createVNode(_component_v_transformer, {\n        ref: \"transformer\"\n      }, null, 512 /* NEED_PATCH */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"config\", \"onDblclick\", \"onClick\", \"onMousedown\", \"onTouchstart\"])]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_v_btn, {\n    title: \"Save\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.laod()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_4]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Load\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.save()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_5]),\n    _: 1 /* STABLE */\n  }), _hoisted_6, _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_color_picker, {\n    gradientColor: _ctx.gradientColor,\n    \"onUpdate:gradientColor\": _cache[2] || (_cache[2] = $event => _ctx.gradientColor = $event),\n    pureColor: $data.pureColor,\n    \"onUpdate:pureColor\": _cache[3] || (_cache[3] = $event => $data.pureColor = $event)\n  }, null, 8 /* PROPS */, [\"gradientColor\", \"pureColor\"])]), _createVNode(_component_v_btn, {\n    title: \"Fill\",\n    onClick: _cache[4] || (_cache[4] = $event => $options.fill()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_8]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Border\",\n    onClick: _cache[5] || (_cache[5] = $event => $options.edge()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_9]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Copy\",\n    onClick: _cache[6] || (_cache[6] = $event => $options.copy()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_10]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Undo\",\n    onClick: _cache[7] || (_cache[7] = $event => $options.undo()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_11]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Redo\",\n    onClick: _cache[8] || (_cache[8] = $event => $options.Redo()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_12]),\n    _: 1 /* STABLE */\n  }), _hoisted_13, _createVNode(_component_v_btn, {\n    title: \"Square\",\n    onClick: _cache[9] || (_cache[9] = $event => $options.square()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_14]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Rectangle\",\n    onClick: _cache[10] || (_cache[10] = $event => $options.rect()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_15]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Circle\",\n    onClick: _cache[11] || (_cache[11] = $event => $options.circle()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_16]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Triangle\",\n    onClick: _cache[12] || (_cache[12] = $event => $options.triangle()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_17]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Ellipse\",\n    onClick: _cache[13] || (_cache[13] = $event => $options.ellipse()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_18]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Star\",\n    onClick: _cache[14] || (_cache[14] = $event => $options.star()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_19]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Line\",\n    onClick: _cache[15] || (_cache[15] = $event => $options.line()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_20]),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" <v-btn title=\\\"Brush\\\" @click=\\\"brush()\\\" class=\\\"custom-btn\\\">  \\r\\n<svg width=\\\"24\\\" height=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\r\\n  <path d=\\\"M5 2L3 4s-2 2 0 3 4 1 4 1 1-2 3-1 3 1 3 1\\\"></path> \\r\\n</svg>\\r\\n</v-btn> \"), _createVNode(_component_v_btn, {\n    title: \"Hexagon\",\n    onClick: _cache[16] || (_cache[16] = $event => $options.polyg()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_21]),\n    _: 1 /* STABLE */\n  }), _hoisted_22, _createVNode(_component_v_btn, {\n    title: \"Delete\",\n    onClick: _cache[17] || (_cache[17] = $event => $options.del()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_23]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_btn, {\n    title: \"Clear\",\n    onClick: _cache[18] || (_cache[18] = $event => $options.clr()),\n    class: \"custom-btn\"\n  }, {\n    default: _withCtx(() => [_hoisted_24]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","_createElementVNode","width","height","xmlns","fill","stroke","x","y","_createCommentVNode","cx","cy","r","points","rx","ry","viewBox","x1","y1","x2","y2","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_v_stage","config","$data","configKonva","ref","onDblclick","$options","draw","onClick","handleClick","onMousedown","handleStageMouseDown","onTouchstart","_component_v_layer","_Fragment","_renderList","squares","square","index","_createBlock","_component_v_rect","key","id","onTransformend","handleTransformEnd","$event","shapeClicked","onDragend","newpo","rectangles","rect","circles","circle","_component_v_circle","radius","ellipses","ellipse","_component_v_ellipse","radiusX","radiusY","stars","star","_component_v_star","innerRadius","outerRadius","numPoints","lines","line","_component_v_line","triangles","triangle","_component_v_regular_polygon","brus","polygons","polygon","_component_v_transformer","_hoisted_3","_component_v_btn","title","_cache","laod","_hoisted_4","save","_hoisted_5","_hoisted_6","_hoisted_7","_component_color_picker","gradientColor","_ctx","pureColor","_hoisted_8","edge","_hoisted_9","copy","_hoisted_10","undo","_hoisted_11","Redo","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","polyg","_hoisted_21","_hoisted_22","del","_hoisted_23","clr","_hoisted_24"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n\r\n\r\n<!-- <v-dialog width=\"400\" class=\"saving\" v-model=\"savdialog\" transition=\"dialog-top-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title><h1>save</h1></v-card-title>\r\n<v-card-subtitle> xml OR json  </v-card-subtitle>\r\n<v-btn :style=\"{ backgroundColor: savjason === true ? '#2196F3' : 'initial', color: savjason === true ? '#FFFFFF' : 'initial' }\" @click=\"savejason()\">json</v-btn>\r\n<div style=\"height:5px;\"></div>\r\n<v-btn :style=\"{ backgroundColor: savxml === true ? '#2196F3' : 'initial', color: savxml === true ? '#FFFFFF' : 'initial' }\" @click=\"savexml()\">xml</v-btn>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"submity() \">OK</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"pathdialog\" transition=\"dialog-bottom-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title>path of saving</v-card-title>\r\n<input type=\"text\" placeholder=\"c:\\\\name\" id=\"path\" autofocus>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"send()\">save</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"loaddialog\" transition=\"dialog-top-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title><h1>Open</h1></v-card-title>\r\n<v-card-subtitle> xml OR json  </v-card-subtitle>\r\n<v-btn :style=\"{ backgroundColor: lodjason === true ? '#2196F3' : 'initial', color: lodjason === true ? '#FFFFFF' : 'initial' }\" @click=\"loadjason()\">json</v-btn>\r\n<div style=\"height:5px;\"></div>\r\n<v-btn :style=\"{ backgroundColor: lodxml === true ? '#2196F3' : 'initial', color: lodxml === true ? '#FFFFFF' : 'initial' }\" @click=\"loadxml()\">xml</v-btn>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"ok() \">OK</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>\r\n<v-dialog width=\"400\" class=\"saving\" v-model=\"pathloaddialog\" transition=\"dialog-bottom-transition\">\r\n<v-card variant=\"outlined\">\r\n<v-card-title>path of file</v-card-title>\r\n<input type=\"text\" placeholder=\"c:\\\\name\" id=\"pathload\" autofocus>\r\n<v-card-actions >\r\n  <v-btn  variant=\"outlined\" @click=\"open()\">open</v-btn>\r\n</v-card-actions>\r\n</v-card>\r\n</v-dialog>-->\r\n\r\n<div class=\"bord\">\r\n<v-stage :config=\"configKonva\" ref=\"stage\" @dblclick=\"draw\" @click=\"handleClick\"  @mousedown=\"handleStageMouseDown\" @touchstart=\"handleStageMouseDown\">\r\n<v-layer>\r\n<!-- drawing squares -->\r\n<v-rect\r\n  v-for=\"(square, index) in squares\"\r\n  :key=\"index\"\r\n  :config=\"{\r\n    type:'square',\r\n    x: square.x,\r\n    y: square.y,\r\n    width: square.width,\r\n    height: square.height,\r\n    fill: square.fill, // Use the selected fill color\r\n    stroke: square.stroke, // Use the selected edge color\r\n    strokeWidth: 2 ,\r\n    draggable:true,\r\n    id:square.id\r\n  }\"\r\n  @transformend=\"handleTransformEnd\"\r\n  @click=\"shapeClicked('square', index)\"\r\n  @dragend=\"newpo('square', index, $event)\">\r\n</v-rect>\r\n\r\n<!-- drawing rectangles -->\r\n<v-rect\r\nv-for=\"(rect, index) in rectangles\"\r\n  :key=\"index\"\r\n  :config=\"{ \r\n    type:'Rectangle',\r\n    x:  rect.x,\r\n    y: rect.y,\r\n    width: rect.width,\r\n    height: rect.height,\r\n    fill: rect.fill, // Use the selected fill color\r\n    stroke: rect.stroke, // Use the selected edge color\r\n    strokeWidth: 2 ,\r\n    draggable:true,    \r\n  }\"\r\n  @transformend=\"handleTransformEnd\"\r\n  @click=\"shapeClicked('rect', index) \"\r\n  @dragend=\"newpo('rect', index, $event)\">\r\n</v-rect>\r\n\r\n<!-- drawing circles -->\r\n<v-circle\r\n  v-for=\"(circle, index) in circles\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'circle',\r\n      x: circle.x,\r\n      y: circle.y,\r\n      radius:circle.radius,\r\n      fill:circle.fill,\r\n      stroke:circle.stroke,\r\n      strokeWidth: 2,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('circle', index)\"\r\n    @dragend=\"newpo('circle', index, $event)\">\r\n</v-circle>\r\n\r\n<!-- drawing ellipses -->\r\n<v-ellipse\r\n    v-for=\"(ellipse, index) in ellipses\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'ellipse',\r\n      x: ellipse.x,\r\n      y: ellipse.y,\r\n      radiusX:ellipse.radiusX,\r\n      radiusY:ellipse.radiusY,\r\n      fill: ellipse.fill, // Use the selected fill color\r\n      stroke: ellipse.stroke, // Use the selected edge color\r\n      strokeWidth: 2,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('ellipse', index)\"\r\n    @dragend=\"newpo('ellipse', index, $event)\">\r\n</v-ellipse>\r\n\r\n<!-- drawing stars -->\r\n<v-star\r\n    v-for=\"(star, index) in stars\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'star',\r\n      x: star.x,\r\n      y: star.y,\r\n      innerRadius:star.innerRadius,\r\n      outerRadius:star.outerRadius,\r\n      numPoints:star.numPoints,\r\n      fill: star.fill, // Use the selected fill color\r\n      stroke: star.stroke, // Use the selected edge color\r\n      strokeWidth: 2,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('star', index)\"\r\n    @dragend=\"newpo('star', index, $event)\">\r\n</v-star>\r\n\r\n<!-- drawing lines -->\r\n<v-line\r\n  v-for=\"(line, index) in lines\"\r\n    :key=\"index\"\r\n    :config=\"{\r\n      type:'line',\r\n      x : line.x,\r\n      y : line.y,\r\n      points:line.points,\r\n      stroke: line.stroke,\r\n      strokeWidth: 4,\r\n      draggable:true,\r\n    }\"\r\n    @transformend=\"handleTransformEnd\"\r\n    @click=\"shapeClicked('line', index)\"\r\n    @dragend=\"newpo('line', index, $event)\">\r\n</v-line>\r\n\r\n<!-- drawing triangles -->\r\n<v-regular-polygon\r\nv-for=\"(triangle, index) in triangles\"\r\n      :key=\"index\"\r\n      :config=\"{\r\n        type:'triangle',\r\n        x: triangle.x,\r\n        y: triangle.y,\r\n        sides:3,\r\n        radius:triangle.radius,\r\n        fill: triangle.fill, \r\n        stroke: triangle.stroke, \r\n        strokeWidth: 2,\r\n        draggable:true,\r\n      }\"\r\n      @transformend=\"handleTransformEnd\"\r\n      @click=\"shapeClicked('triangle', index)\"\r\n      @dragend=\"newpo('triangle', index, $event)\">\r\n\r\n</v-regular-polygon>\r\n\r\n<!-- drawing brush -->\r\n<v-line\r\n  v-for=\"(line, index) in brus\"\r\n  :key=\"index\"\r\n  :config=\"{\r\n    points:line.points,\r\n    stroke: line.stroke,\r\n    strokeWidth: 4,\r\n    draggable:false,\r\n  }\">\r\n</v-line>\r\n\r\n\r\n<!-- drawing regular-polygon-->\r\n<v-regular-polygon\r\nv-for=\"(polygon, index) in polygons\"\r\n      :key=\"index\"\r\n      :config=\"{\r\n        type:'polygon',\r\n        x: polygon.x,\r\n        y: polygon.y,\r\n        sides:8,\r\n        radius:polygon.radius,\r\n        fill: polygon.fill, \r\n        stroke: polygon.stroke, \r\n        strokeWidth: 5,\r\n        draggable:true,\r\n      }\"\r\n      @click=\"shapeClicked('polygon', index)\"\r\n      @dragend=\"newpo('polygon', index, $event)\">\r\n</v-regular-polygon>\r\n\r\n<!-- resizing and routation -->\r\n<v-transformer ref=\"transformer\" />\r\n</v-layer>\r\n</v-stage>\r\n</div>\r\n\r\n<div class=\"left-bar\">\r\n<v-btn title=\"Save\" @click=\"laod()\" class=\"custom-btn\"><i class=\"fa-solid fa-folder-open\"></i></v-btn>\r\n<v-btn title=\"Load\" @click=\"save()\" class=\"custom-btn\"><i class=\"fa-solid fa-floppy-disk\"></i></v-btn>\r\n<hr>\r\n<div class=\"palette\">\r\n<color-picker v-model:gradientColor=\"gradientColor\" v-model:pureColor=\"pureColor\" />\r\n</div>\r\n<v-btn title=\"Fill\" @click=\"fill()\" class=\"custom-btn\"><i class=\"fa-solid fa-fill-drip\"></i></v-btn>\r\n<v-btn title=\"Border\" @click=\"edge()\" class=\"custom-btn\"><i class=\"fa-solid fa-paintbrush\"></i></v-btn>\r\n<v-btn title=\"Copy\" @click=\"copy()\" class=\"custom-btn\"><i class=\"fa-solid fa-copy\"></i></v-btn>\r\n<v-btn title=\"Undo\" @click=\"undo()\" class=\"custom-btn\"><i class=\"fa-solid fa-arrow-rotate-left\"></i></v-btn>\r\n<v-btn title=\"Redo\" @click=\"Redo()\" class=\"custom-btn\"><i class=\"fa-solid fa-rotate-right\"></i></v-btn>\r\n<hr>\r\n<v-btn title=\"Square\" @click=\"square()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\"></rect> <!-- Square -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Rectangle\" @click=\"rect()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <rect width=\"18\" height=\"10\" x=\"3\" y=\"1\"></rect> <!-- Rectangle -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Circle\" @click=\"circle()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle> <!-- Circle -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Triangle\" @click=\"triangle()\" class=\"custom-btn\">\r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <polygon points=\"12 2 2 22 22 22\"></polygon> <!-- Triangle -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Ellipse\" @click=\"ellipse()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <ellipse cx=\"12\" cy=\"12\" rx=\"10\" ry=\"6\"></ellipse> <!-- Ellipse -->\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Star\" @click=\"star()\" class=\"custom-btn\">\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <polygon points=\"12 2 15.09 8 22 9.27 17 14 18.18 20 12 17.09 5.82 20 7 14 2 9.27 8 8 12\"></polygon>\r\n</svg>\r\n</v-btn>\r\n<v-btn title=\"Line\" @click=\"line()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line> <!-- Line -->\r\n</svg>\r\n</v-btn>\r\n<!-- <v-btn title=\"Brush\" @click=\"brush()\" class=\"custom-btn\">  \r\n<svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n  <path d=\"M5 2L3 4s-2 2 0 3 4 1 4 1 1-2 3-1 3 1 3 1\"></path> \r\n</svg>\r\n</v-btn> -->\r\n<v-btn title=\"Hexagon\" @click=\"polyg()\" class=\"custom-btn\">\r\n<svg width=\"100\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <polygon points=\"50,5 95,25 95,75 50,95 5,75 5,25\" fill=\"none\" stroke=\"currentColor\"/>\r\n</svg>\r\n</v-btn>\r\n<hr>\r\n\r\n<v-btn title=\"Delete\" @click=\"del()\" class=\"custom-btn\"><i class=\"fa-solid fa-eraser\"></i></v-btn>\r\n<v-btn title=\"Clear\" @click=\"clr()\" class=\"custom-btn\"><i class=\"fa-solid fa-trash\"></i></v-btn>\r\n\r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// import Vue from 'vue';\r\nimport { ref } from \"vue\";\r\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\r\n\r\nexport default  {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      value: null,\r\n      selectedColor: '',\r\n      selectedColor2: '',\r\n      selectedColor3: '',\r\n      selectedColor4: '',\r\n      selectedColor5: '',\r\n      configKonva: {\r\n          width: 1350,\r\n          height: 800,\r\n      },\r\n      pureColor: '#ffffff', // Selected fill color\r\n      pureColor2: '#000000', // Selected edge color\r\n      isdraw: false,\r\n      rectangles:[],\r\n      squares:[],\r\n      lines:[],\r\n      circles:[],\r\n      ellipses:[],\r\n      triangles:[],\r\n      stars:[],\r\n       polygons:[],\r\n      rectangle:false,\r\n      circ:false,\r\n      ellips:false,\r\n      lin:false,\r\n      sqrt:false,\r\n      tria:false,\r\n      bru:false,\r\n      str:false,\r\n      poly:false,\r\n      delete:false,\r\n      cofill:false,\r\n      coledge:false,\r\n      currentShape:null,\r\n      shapes:[],\r\n      selectedshapeid: '',  //transform\r\n        sav:false,\r\n        path:\"\" ,\r\n        shapeType: '',\r\n      ord:null,\r\n      modifysh:null,\r\n      cop:false,\r\n      co:null,\r\n        savdialog:false,\r\n        savjason:false,\r\n        savxml:false,\r\n        pathdialog:false,\r\n        loaddialog:false,\r\n        pathloaddialog:false,\r\n        lodjason:false,\r\n        lodxml:false,\r\n        poldialog:false,\r\n        length:200,\r\n        un:0,\r\n        re:0,\r\n        shapeid:-1,\r\n         brus:[]\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    setup() {\r\n      const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n      return{pureColor}\r\n    },\r\n   handleClick() {\r\n       this.cop=false;\r\n      this.cofill=false;\r\n      this.coledge=false; \r\n    },\r\n    /*drawbrush()\r\n    {\r\n       if(this.bru)\r\n       {\r\n        this.draw();\r\n         const stage = this.$refs.stage.getStage();\r\n            const position = stage.getPointerPosition();\r\n         this.currentShape.points.push(position.x, position.y);\r\n       }\r\n       this.stopDrawing();\r\n    },\r\n*/\r\nnewpo(type, index,e) {\r\n  this.un++;\r\n   var v=0;\r\n\r\n  if (type === 'circle') {\r\n    this.shapeType = \"Circle\"\r\n       for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n    this.circles[index].x=e.target.x();\r\n    this.circles[index].y=e.target.y();\r\n    this.shapes[v].x=this.circles[index].x;\r\n    this.shapes[v].y=this.circles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.shapes[v]);\r\n    console.log(this.circles[index].x);\r\n    console.log(this.circles[index].y);\r\n    }\r\n    if (type === 'rect') {\r\n      this.shapeType = \"Rectangle\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.rectangles[index].x=e.target.x();\r\n    this.rectangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.rectangles[index].x;\r\n    this.shapes[v].y=this.rectangles[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.rectangles[index].x);\r\n    console.log(this.rectangles[index].y);\r\n    }\r\n    if (type === 'ellipse') {\r\n      this.shapeType = \"Ellipse\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.ellipses[index].x=e.target.x();\r\n    this.ellipses[index].y=e.target.y();\r\n    this.shapes[v].x=this.ellipses[index].x;\r\n    this.shapes[v].y=this.ellipses[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.ellipses[index].x);\r\n    console.log(this.ellipses[index].y);\r\n    }\r\n    if (type === 'star') {\r\n      this.shapeType = \"Star\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        \r\n    this.stars[index].x=e.target.x();\r\n    this.stars[index].y=e.target.y();\r\n    this.shapes[v].x=this.stars[index].x;\r\n    this.shapes[v].y=this.stars[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.stars[index].x);\r\n    console.log(this.stars[index].y);\r\n    \r\n  }\r\n    if (type === 'line') {\r\n      this.shapeType = \"Line\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.lines[index].x=e.target.x();\r\n    this.lines[index].y=e.target.y();\r\n    this.shapes[v].x=this.lines[index].x;\r\n    this.shapes[v].y=this.lines[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.lines[index].x);\r\n    console.log(this.lines[index].y);\r\n    }\r\n    if (type === 'square') {\r\n      this.shapeType = \"Square\"\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.squares[index].x=e.target.x();\r\n    this.squares[index].y=e.target.y();\r\n    this.shapes[v].x=this.squares[index].x;\r\n    this.shapes[v].y=this.squares[index].y;\r\n      this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.squares[index].x);\r\n    console.log(this.squares[index].y);\r\n    }\r\n    if (type === 'triangle') {\r\n      this.shapeType = \"Triangle\"\r\n    \r\n        for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.triangles[index].x=e.target.x();\r\n    this.triangles[index].y=e.target.y();\r\n    this.shapes[v].x=this.triangles[index].x;\r\n    this.shapes[v].y=this.triangles[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.triangles[index].x);\r\n    console.log(this.triangles[index].y);\r\n    }\r\n\r\n    if (type === 'Polygon') {\r\n      this.shapeType = \"Polygon\"\r\n      for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n    this.polygons[index].x=e.target.x();\r\n    this.polygons[index].y=e.target.y();\r\n    this.shapes[v].x=this.polygons[index].x;\r\n    this.shapes[v].y=this.polygons[index].y;\r\n    this.modifysh=this.shapes[v];\r\n    this.ord=v;\r\n    this.modify()\r\n    console.log(this.polygons[index].x);\r\n    console.log(this.polygons[index].y);\r\n    }\r\n    \r\n    \r\n  },\r\n    rect(){\r\n         this.rectangle=true;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    brush(){\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=true;\r\n         this.str=false;\r\n      this.poly=false;\r\n    },\r\n    ellipse()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n         this.str=false;\r\n      this.poly=false;\r\n    }, \r\n    star()\r\n    {\r\n       this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.str=true;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.poly=false;\r\n    }, \r\n    circle()\r\n    {\r\n         this.rectangle=false;\r\n       this.circ=true;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.str=false;\r\n      this.poly=false;\r\n    },\r\n    line()\r\n    {\r\n           this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=true;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    square()\r\n    {\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=true;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    triangle()\r\n    {\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n    },\r\n    fill(){\r\n\r\n          this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=true;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n    edge(){\r\n        this.rectangle=false;\r\n       this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=true;\r\n      this.bru=false;\r\n        this.str=false;\r\n      this.poly=false;\r\n\r\n    },\r\n   polyg()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.poly=true;\r\n      this.cofill=false;\r\n      this.delete=false;\r\n      this.coledge=false;\r\n      this.str=false;\r\n      this.bru=false;\r\n    },\r\n\r\n\r\n\r\n  async  clr()\r\n    {\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.shapes=[];\r\n      this.stars =[];\r\n      this.polygons=[];\r\n      this.un=0;\r\n      this.re=0;\r\n      this.shapeid=-1;\r\n             await fetch('http://localhost:8080/clear', {\r\n        method: 'GET',\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    \r\n    \r\n    },\r\n    copy()\r\n    {\r\n      this.cop=true;\r\n    },\r\n\r\n    async shapeClicked(type, index) {\r\n\r\n\r\n    if(type==='Polygon')\r\n     {\r\n       this.shapeType = \"Polygon\"\r\n        let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n           if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.polygons[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n         console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.updateTransformer();\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.polygons.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n         \r\n           this.un++; \r\n              this.polygons.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n              this.selectedid=-1;\r\n               this.updateTransformer();\r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.polygons[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.polygons[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.polygons[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.polygons[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n        \r\n     }\r\n\r\n     else if(type==='triangle')\r\n     {\r\n      this.shapeType = \"Triangle\"\r\n         console.log(index);\r\n        let v=0;\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.triangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.triangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++\r\n        }\r\n        if(this.delete)\r\n        {\r\n           this.un++; \r\n              this.triangles.splice(index,1);\r\n               this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                    this.modify2()\r\n              this.delete=false;\r\n            \r\n        }\r\n\r\n       if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.triangles[index].fill = selectedFillColor;\r\n        this.shapes[v].fill=this.triangles[index].fill;       // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n             this.ord=v;\r\n              this.modify()\r\n                 }\r\n             if(this.coledge){\r\n              this.un++;\r\n              let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.triangles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.triangles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n                  this.ord=v;\r\n                 this.modify() \r\n       \r\n          }\r\n       \r\n       /*********************************************************************** */\r\n        \r\n     }\r\n     else if(type==='circle')\r\n     {\r\n       this.shapeType = \"Circle\"\r\n       let v=0;\r\n     for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.circles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.circles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n          if(this.delete)\r\n        {\r\n          this.un++;\r\n         \r\n              this.circles.splice(index,1);\r\n\r\n                this.delete=false;\r\n                    this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n              this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.circles[index].fill = selectedFillColor; \r\n           this.shapes[v].fill=this.circles[index].fill;   // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n            this.modify()\r\n              \r\n                 }\r\n                if(this.coledge){\r\n                  this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.circles[index].stroke = selectedEdgeColor; \r\n          this.shapes[v].stroke=this.circles[index].stroke; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n              this.modifysh=this.shapes[v];\r\n              this.ord=v;\r\n              this.modify()    \r\n        \r\n       \r\n     }  \r\n       \r\n     }\r\n     else if(type==='line')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Line\"\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.lines[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.lines.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++; \r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.lines.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                  this.modify2()\r\n        }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n          this.shapes[v].stroke=this.lines[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  this.modifysh=this.shapes[v];\r\n                    this.ord=v;\r\n                  this.modify()\r\n        }\r\n     }\r\n     /************************************************************ */\r\n     else if(type==='rect')\r\n     {\r\n      let v=0;\r\n       this.shapeType = \"Rectangle\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.rectangles[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.rectangles.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n             if(this.delete)\r\n        {\r\n             this.un++;\r\n              this.rectangles.splice(index,1);\r\n                this.delete=false;\r\n                this.ord=v;\r\n              this.modify2()\r\n        }\r\n        if (this.cofill) {\r\n          this.un++;\r\n        let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        //selectedFillColor=this.pureColor\r\n        this.shapes[v].fill=this.rectangles[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n                this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n                 this.modify()\r\n                 }\r\n        if(this.coledge){\r\n          this.un++;\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.shapes[v].stroke=this.rectangles[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n               this.modifysh=this.shapes[v];\r\n                this.ord=v;\r\n               this.modify()   \r\n        \r\n       \r\n     }\r\n     }\r\n     /*************************************************************** */\r\n      else if(type==='ellipse') {\r\n        let v=0;\r\n         this.shapeType = \"Ellipse\"\r\n   for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.ellipses[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.ellipses.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n        if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.ellipses.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n          if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.ellipses[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.ellipses[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.ellipses[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                 this.modifysh=this.shapes[v];\r\n               this.ord=v;\r\n            this.modify() \r\n       \r\n     }\r\n        }\r\n      else if(type==='star') {\r\n        let v=0;\r\n         this.shapeType = \"Star\"\r\n  for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.stars[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n          console.log(v);\r\n        if(this.cop)\r\n        { \r\n          this.un++;\r\n          this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.stars.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n        }\r\n      if(this.delete)\r\n        {\r\n              this.un++;\r\n              this.stars.splice(index,1);\r\n                this.delete=false;\r\n               this.modifysh=this.shapes[v];\r\n                   this.ord=v;\r\n                  this.modify2()\r\n\r\n        }\r\n        if (this.cofill) {\r\n            this.un++;\r\n      let selectedFillColor = this.pureColor;\r\n      this.stars[index].fill = selectedFillColor;\r\n      this.shapes[v].fill=this.stars[index].fill;\r\n      this.cofill = false;\r\n      this.pureColor = '#ffffff';\r\n        this.modifysh=this.shapes[v];\r\n           this.ord=v;\r\n         this.modify()\r\n    }\r\n\r\n        if(this.coledge){\r\n          this.un++;\r\n           let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.stars[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v].stroke=this.stars[index].stroke;\r\n          this.coledge = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n          this.modify() \r\n       \r\n     }\r\n        }\r\n       \r\n     else if(type==='square')\r\n     {\r\n      console.log(\"xx\");\r\n      let v=0;\r\n        this.shapeType = \"Square\"\r\n    for(let i=0;i<this.shapes.length;i++)\r\n        {\r\n         // console.log(this.shapes[i].id)\r\n          if(this.shapes[i]!==null)\r\n          {\r\n                  if(this.shapes[i].id===this.squares[index].id)\r\n                  {\r\n                    v=i;\r\n                    break;\r\n                  }\r\n          }\r\n        \r\n        }\r\n        console.log(v);\r\n         if(this.cop)\r\n        {\r\n          console.log(this.shapes[v]);\r\n          this.un++;\r\n         this.ord=v;\r\n          console.log(this.shapes[v])\r\n          await this.prototype();\r\n          console.log(this.co)\r\n          this.squares.push({...this.co})\r\n          this.shapes.push({...this.co})\r\n          this.cop = false\r\n          this.shapeid++;\r\n           \r\n           \r\n        }\r\n               if(this.delete)\r\n        {\r\n            this.un++;\r\n              this.squares.splice(index,1);\r\n                this.delete=false;\r\n                  this.ord=v;\r\n                this.modify2()\r\n        }\r\n      if (this.cofill) {\r\n        this.un++;\r\n        let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n        this.selectedColor2= selectedFillColor\r\n        this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n        selectedFillColor=this.pureColor\r\n          this.shapes[v].fill=this.squares[index].fill;\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          this.modifysh=this.shapes[v];\r\n          this.ord=v;\r\n           this.modify()\r\n        \r\n                 }\r\n        if(this.coledge)\r\n        {\r\n          this.un++;\r\n                  let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n          this.coledge = false;\r\n            this.shapes[v].stroke=this.squares[index].stroke;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n            this.modifysh=this.shapes[v];\r\n            this.ord=v;\r\n           this.modify()\r\n                \r\n        }         \r\n       \r\n       \r\n     }\r\n\r\n    },\r\n \r\n\r\n    del()\r\n    {\r\n      this.rectangle=false;\r\n      this.circ=false;\r\n      this.ellips=false;\r\n      this.str=false;\r\n      this.lin=false;\r\n      this.sqrt=false;\r\n      this.tria=false;\r\n      this.cofill=false;\r\n      this.delete=true;\r\n      this.coledge=false;\r\n      this.bru=false;\r\n      this.cop=false;\r\n    },\r\n      draw() {\r\n        this.selectedid=-1;\r\n        this.updateTransformer();\r\n     if(this.rectangle)\r\n      {\r\n          this.shapeid++;\r\n          this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Rectangle',\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            width: 250,\r\n            height: 400,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                  scaleX : 1,\r\n                 scaleY : 1\r\n          };\r\n          console.log(this.currentShape.x);\r\n          console.log(this.currentShape.y);\r\n        }\r\n      }\r\n      }\r\n      else if(this.circ){\r\n          this.shapeid++;\r\n                this.isdraw = true;\r\n      const stage = this.$refs.stage.getStage();\r\n      if (stage) {\r\n        const position = stage.getPointerPosition();\r\n        if (position) {\r\n          this.currentShape = {\r\n            x: position.x,\r\n            y: position.y,\r\n            type:'Circle',\r\n            fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n            radius: 200,\r\n               id:String(this.shapeid),\r\n                 rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n          };\r\n        }\r\n      }\r\n      }\r\n      else if(this.ellips)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Ellipse',\r\n                 fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            strokeWidth:2,\r\n              radiusX: 200,\r\n              radiusY:130,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.str)\r\n      {\r\n          this.shapeid++;\r\n           this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Star',\r\n                 fill:this.pureColor,\r\n                 stroke:this.pureColor2,\r\n               strokeWidth:2,\r\n              innerRadius:130,\r\n              outerRadius:200,\r\n              numPoints:6,\r\n                id:String(this.shapeid),\r\n                  rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.lin)\r\n      {\r\n          this.shapeid++;\r\n              this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                x: position.x,\r\n                y: position.y,\r\n                type:'Line',\r\n            stroke:this.pureColor2,\r\n            strokeWidth:4,\r\n             points: [0, 0,200,150],\r\n                 id:String(this.shapeid),\r\n                   rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.sqrt)\r\n      {\r\n          this.shapeid++;\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n              x: position.x,\r\n            y: position.y,\r\n               type:'Square',\r\n            strokeWidth:2,\r\n             fill:this.pureColor,\r\n            stroke:this.pureColor2,\r\n            width: 200,\r\n            height: 200,\r\n              id:String(this.shapeid),\r\n                rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.tria)\r\n      {\r\n         this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Triangle',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                    rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n              };\r\n            }\r\n          }\r\n      }\r\n      else if(this.poly)\r\n      {\r\n             this.shapeid++;\r\n          this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n               x: position.x,\r\n                y: position.y,\r\n                type:'Polygon',\r\n                strokeWidth:2,\r\n                fill:this.pureColor,\r\n                stroke:this.pureColor2,\r\n                radius:150,\r\n                  id:String(this.shapeid),\r\n                     rotation : 0,\r\n                     scaleX : 1,\r\n                     scaleY : 1\r\n\r\n              };\r\n              \r\n            }\r\n          }\r\n      }\r\n      \r\n   \r\n        else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             this.currentShape = {\r\n            points: [position.x, position.y],\r\n            stroke: this.pureColor2,\r\n            strokeWidth: 4,\r\n          };\r\n            }\r\n          }\r\n        \r\n      }\r\n       this.selectedid=-1;\r\n        this.updateTransformer();\r\n      \r\n        this.stopDrawing();\r\n    },\r\n    stopDrawing() {\r\n      console.log(this.currentShape);\r\n      this.un++;\r\n          if (this.isdraw) {\r\n        this.isdraw = false;\r\n        console.log(\"xxxxx\");\r\n        if(this.circ)\r\n        {\r\n          this.shapeType = 'Circle';\r\n                     this.circles.push({ ...this.currentShape });\r\n                     this.shapes.push({...this.currentShape});\r\n                 \r\n        }\r\n      \r\n      else if(this.rectangle){\r\n        this.shapeType = 'Rectangle';\r\n\r\n          this.rectangles.push({...this.currentShape});\r\n            this.shapes.push({...this.currentShape});\r\n        \r\n      }\r\n      \r\n      else if(this.ellips)\r\n      {\r\n        this.shapeType = 'Ellipse';\r\n\r\n           this.ellipses.push({...this.currentShape});\r\n             this.shapes.push({...this.currentShape});\r\n      }\r\n      else if(this.str)\r\n      {\r\n        console.log(\"brt\");\r\n        this.shapeType = 'Star';\r\n\r\n           this.stars.push({...this.currentShape});\r\n           this.shapes.push({...this.currentShape});\r\n      }\r\n           \r\n      else if(this.lin)\r\n      {\r\n        this.shapeType = 'Line';\r\n\r\n             this.lines.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.sqrt)\r\n      {\r\n        this.shapeType = 'Square';\r\n\r\n                this.squares.push({...this.currentShape});\r\n                  this.shapes.push({...this.currentShape});\r\n      }\r\n          \r\n      else if(this.tria)\r\n      {\r\n        this.shapeType = 'Triangle';\r\n\r\n             this.triangles.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n        else if(this.bru)\r\n      {\r\n          this.brus.push({...this.currentShape});\r\n      }\r\n      else if(this.poly)\r\n      {\r\n          this.shapeType = 'Polygon';\r\n           this.polygons.push({...this.currentShape}); \r\n                this.shapes.push({...this.currentShape});\r\n      }\r\n      this.createShape();\r\n        this.currentShape = null;\r\n      }\r\n    },\r\n    async createShape(){\r\n      await fetch('http://localhost:8080/create', {\r\n        method: 'POST',\r\n        body: (this.shapeType + JSON.stringify(this.currentShape)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n\r\n    async modify()\r\n    {\r\n        await fetch('http://localhost:8080/modify', {\r\n        method: 'POST',\r\n        body: (this.ord + \"{\" + this.shapeType + JSON.stringify(this.modifysh)),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n    async prototype()\r\n    {\r\n      await fetch('http://localhost:8080/copy', {\r\n        method: 'POST',\r\n        body: (this.ord),\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.co = data)\r\n      console.log(this.co)\r\n    },\r\n    async modify2()\r\n    {\r\n        await fetch('http://localhost:8080/delete', {\r\n        method: 'POST',\r\n        body: (this.ord + \",\" + this.shapeType),\r\n      }).catch(error => {\r\n        console.error('Fetch error:', error);\r\n      });\r\n    },\r\n   async saving()\r\n      {\r\n        console.log(this.savejason)\r\n        if(this.savjason){\r\n        await fetch('http://localhost:8080/saveJson', {\r\n          method: 'POST',\r\n          body: this.path+\".json\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n      if(this.savxml){\r\n        await fetch('http://localhost:8080/saveXml', {\r\n          method: 'POST',\r\n          body: this.path + \".xml\",\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n        console.log(this.savexml)\r\n      }\r\n      },\r\n\r\n     async loading(){\r\n      this.un = 0\r\n      this.re = 0 \r\n        if(this.lodjason){\r\n        await fetch('http://localhost:8080/loadJson', {\r\n          method: 'POST',\r\n          body: (this.path + \".json\"),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n        \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n   \r\n         for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n        \r\n         \r\n      }\r\n          if(this.shapes.length!==0)\r\n          {\r\n              this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n          }\r\n          else\r\n          { \r\n              this.shapeid=-1;  \r\n          }\r\n         \r\n      }\r\n      if(this.lodxml){\r\n        this.un = 0\r\n        this.re = 0\r\n        await fetch('http://localhost:8080/loadXml', {\r\n          method: 'POST',\r\n          body: this.path+\".xml\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.shapes = data)\r\n        console.log(this.shapes)\r\n           \r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n      \r\n        for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n        if(this.shapes.length!==0)\r\n          {\r\n              this.shapeid=Number(this.shapes[this.shapes.length-1].id);\r\n          }\r\n          else\r\n          { \r\n              this.shapeid=-1;  \r\n          }\r\n    }\r\n\r\n     },\r\n        savejason(){\r\n      this.savjason=true;\r\n      this.savxml=false;\r\n    },\r\n    savexml(){\r\n      this.savxml=true;\r\n      this.savjason=false;\r\n    }, \r\n      submity(){\r\n        this.savdialog=false;\r\n        this.pathdialog=true;\r\n      } , \r\n      ok(){\r\n        this.loaddialog=false;\r\n        this.pathloaddialog=true;\r\n\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n          this.savdialog=true;\r\n      },  \r\n      send(){\r\n        var str=document.getElementById('path').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.savjason)\r\n        console.log(this.savxml)\r\n        console.log(this.path)\r\n        this.pathdialog=false;\r\n        this.saving();\r\n        this.savjaso=false;\r\n        this.savxml=false;\r\n        this.path = \"\"\r\n      },\r\n      laod(){\r\n        this.loaddialog=true;\r\n      },\r\n      loadjason(){\r\n        this.lodjason=true;\r\n        this.lodxml=false;\r\n\r\n      },\r\n      loadxml(){\r\n        this.lodxml=true;\r\n        this.lodjason=false;\r\n      },\r\n      open()\r\n      {\r\n        var str=document.getElementById('pathload').value;\r\n        for(let i=0 ;i<str.length;i++)\r\n        {\r\n          if(str[i]=='\\\\')\r\n          {\r\n\r\n            this.path+='\\\\'\r\n\r\n          }\r\n          this.path+=str[i];\r\n        }\r\n        console.log(this.lodjason)\r\n        console.log(this.lodxml)\r\n        console.log(this.path)\r\n        this.pathloaddialog=false;\r\n        this.loading();\r\n        this.lodjason=false;\r\n        this.lodxml=false;\r\n        this.path = \"\"\r\n\r\n      },\r\n\r\n     \r\n\r\nasync undo() {\r\n  if (this.un !== 0) {\r\n    await fetch('http://localhost:8080/undo', {\r\n      method: 'GET',\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => this.shapes = data);\r\n\r\n    console.log(this.shapes);\r\n\r\n    this.circles = [];\r\n    this.lines = [];\r\n    this.squares = [];\r\n    this.rectangles = [];\r\n    this.triangles = [];\r\n    this.ellipses = [];\r\n    this.stars = [];\r\n    this.polygons = [];\r\n\r\n    // Create an array of promises to wait for each push operation to complete\r\n    const pushPromises = this.shapes.map(shape => {\r\n  if (shape !== null) {\r\n    if (shape.type === 'Rectangle') {\r\n      this.rectangles.push({ ...shape });\r\n    } else if (shape.type === 'Circle') {\r\n      this.circles.push({ ...shape });\r\n    } else if (shape.type === 'Ellipse') {\r\n      this.ellipses.push({ ...shape });\r\n    } else if (shape.type === 'Star') {\r\n      this.stars.push({ ...shape });\r\n    } else if (shape.type === 'Square') {\r\n      this.squares.push({ ...shape });\r\n    } else if (shape.type === 'Triangle') {\r\n      this.triangles.push({ ...shape });\r\n    } else if (shape.type === 'Line') {\r\n      this.lines.push({ ...shape });\r\n    } else if (shape.type === 'Polygon') {\r\n      this.polygons.push({ ...shape });\r\n    }\r\n  }\r\n});\r\n\r\n\r\n    // Wait for all promises to resolve before proceeding\r\n    await Promise.all(pushPromises);\r\n\r\n    this.un--;\r\n    this.re++;\r\n  }\r\n},\r\n     async Redo()\r\n    {\r\n     this.updateTransformer()\r\n      if(this.re!==0)\r\n      {\r\n        \r\n\r\n               await fetch('http://localhost:8080/redo', {\r\n        method: 'GET',\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => this.shapes = data)\r\n      \r\n     console.log(this.shapes);\r\n      this.circles=[];\r\n      this.lines=[];\r\n      this.squares=[];\r\n      this.rectangles=[];\r\n      this.triangles=[];\r\n      this.ellipses=[];\r\n      this.stars=[];\r\n      this.polygons = [];\r\n      \r\n    for(let i=0;i<this.shapes.length;i++)\r\n      {\r\n        if(this.shapes[i]!==null)\r\n        {\r\n               if(this.shapes[i].type==='Rectangle')\r\n          {\r\n             this.rectangles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Circle')\r\n          {\r\n              this.circles.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Ellipse')\r\n          {\r\n            this.ellipses.push({...this.shapes[i]})\r\n          }\r\n          else if(this.shapes[i].type==='Star')\r\n          {\r\n            this.stars.push({...this.shapes[i]})\r\n          }\r\n         else  if(this.shapes[i].type==='Square')\r\n          {\r\n             this.squares.push({...this.shapes[i]});\r\n          }\r\n          else if(this.shapes[i].type==='Triangle')\r\n          {\r\n            this.triangles.push({...this.shapes[i]});\r\n          }\r\n         else if(this.shapes[i].type==='Line')\r\n         {\r\n             this.lines.push({...this.shapes[i]});\r\n         }\r\n         else if(this.shapes[i].type==='Polygon')\r\n         {\r\n              this.polygons.push({...this.shapes[i]});\r\n         }\r\n        }\r\n         \r\n      }\r\n      this.re--;\r\n      this.un++;\r\n\r\n\r\n        \r\n      }\r\n      \r\n    },\r\n     handleTransformEnd(e) {\r\n      let shape;\r\n      for(let i = 0; i < this.shapes.length; i++){\r\n        if(this.shapes[i] !== null && this.shapes[i].id === this.selectedid)\r\n          shape = this.shapes[i];\r\n      }\r\n\r\n\r\n      shape.x = e.target.x();\r\n      shape.y = e.target.y();\r\n      shape.rotation = e.target.rotation();\r\n      shape.scaleX = e.target.scaleX();\r\n      shape.scaleY = e.target.scaleY();\r\n\r\n      this.ord=shape.id;\r\n      this.shapeType=shape.type;\r\n      this.modifysh=shape;\r\n\r\n       this.un++;\r\n        if(shape.type === \"Square\"){\r\n            shape = this.squares.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Rectangle\"){\r\n            shape = this.rectangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Circle\"){\r\n            shape = this.circles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Triangle\"){\r\n            shape = this.triangles.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Polygon\"){\r\n            shape = this.polygons.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Line\"){\r\n            shape = this.lines.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        else if(shape.type === \"Ellipse\"){\r\n            shape = this.ellipses.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n          else if(shape.type === \"Star\"){\r\n            shape = this.stars.find((r) => r.id === this.selectedid)\r\n            shape.x = e.target.x();\r\n            shape.y = e.target.y();\r\n            shape.rotation = e.target.rotation();\r\n            shape.scaleX = e.target.scaleX();\r\n            shape.scaleY = e.target.scaleY();\r\n        }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      console.log(shape);\r\n      this.modify();\r\n      \r\n\r\n\r\n    },\r\n    handleStageMouseDown(e) {\r\n      if (e.target === e.target.getStage()) {\r\n        this.selectedid = '';\r\n        this.updateTransformer();\r\n        return;\r\n        \r\n      }\r\n\r\n      const clickedOnTransformer =\r\n        e.target.getParent().className === 'Transformer';\r\n      if (clickedOnTransformer) {\r\n        return;\r\n      }\r\n\r\n     \r\n    \r\n      const x= e.target.id();\r\n\r\n      // console.log(x)\r\n      let shape;\r\n      for(let i = 0; i < this.shapes.length; i++){\r\n        if(this.shapes[i] !== null && this.shapes[i].id === x)\r\n          shape = this.shapes[i];\r\n      }\r\n\r\n      // const shape = this.shapes.find((r) => r.id === x);\r\n\r\n      if (shape) {\r\n        this.selectedid = x;\r\n      } else {\r\n        this.selectedid = '';\r\n      }\r\n      this.updateTransformer();\r\n    },\r\n    updateTransformer() {\r\n      const transformerNode = this.$refs.transformer.getNode();\r\n      const stage = transformerNode.getStage();\r\n      const { selectedid } = this;\r\n      console.log(selectedid);\r\n      const selectedNode = stage.findOne('#' + String(this.selectedid));\r\n      console.log(selectedNode);\r\n      if (selectedNode === transformerNode.node()) {\r\n        return;\r\n      }\r\n\r\n      if (selectedNode) {\r\n        transformerNode.nodes([selectedNode]);\r\n      } else {\r\n        transformerNode.nodes([]);\r\n      }\r\n    },\r\n\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n.custom-btn{\r\n  /* border-radius: 50%;  */\r\n  background-color: transparent;\r\n  box-shadow: none;\r\n  border: none;\r\n  color: white;\r\n}\r\n\r\n.palette{\r\n\r\n}\r\n\r\n.bord{\r\n  position: relative;\r\n  height: 100vh;\r\n}\r\n  \r\n.left-bar{\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1f2e2e;\r\n  margin-left: 20px;\r\n}\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}