{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  class: \"appaint\",\n  style: {\n    \"border\": \"solid black 2px\",\n    \"width\": \"1130px\",\n    \"background-color\": \"#404340\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"operations\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  style: {\n    \"background-color\": \"rgb(111, 125, 131)\"\n  }\n}, [/*#__PURE__*/_createTextVNode(\"open \"), /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-folder-open\"\n})], -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-floppy-disk\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", {\n  style: {\n    \"background-color\": \"rgb(111, 125, 131)\"\n  }\n}, [/*#__PURE__*/_createTextVNode(\"Undo \"), /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-arrow-rotate-left\"\n})], -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"button\", {\n  style: {\n    \"background-color\": \"rgb(111, 125, 131)\"\n  }\n}, [/*#__PURE__*/_createTextVNode(\"Redo \"), /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-rotate-right\"\n})], -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-eraser\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-trash\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"button\", {\n  style: {\n    \"background-color\": \"rgb(111, 125, 131)\"\n  }\n}, [/*#__PURE__*/_createTextVNode(\"copy \"), /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-copy\"\n})], -1 /* HOISTED */);\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"userInput\",\n  style: {\n    \"border\": \"solid black\"\n  }\n}, null, -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"clorfil\"\n};\nconst _hoisted_13 = {\n  class: \"block\"\n};\nconst _hoisted_14 = {\n  class: \"fillcolor\"\n};\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-fill-drip\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-paintbrush\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_17 = {\n  class: \"paint\"\n};\nconst _hoisted_18 = {\n  class: \"bordshaps\"\n};\nconst _hoisted_19 = {\n  class: \"shaps\"\n};\nconst _hoisted_20 = {\n  class: \"block\"\n};\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"square\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_22 = [_hoisted_21];\nconst _hoisted_23 = /*#__PURE__*/_createElementVNode(\"label\", null, \"square\", -1 /* HOISTED */);\nconst _hoisted_24 = {\n  class: \"block\"\n};\nconst _hoisted_25 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"rectengle\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_26 = [_hoisted_25];\nconst _hoisted_27 = /*#__PURE__*/_createElementVNode(\"label\", null, \"rectengle\", -1 /* HOISTED */);\nconst _hoisted_28 = {\n  class: \"block\"\n};\nconst _hoisted_29 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"circle\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_30 = [_hoisted_29];\nconst _hoisted_31 = /*#__PURE__*/_createElementVNode(\"label\", null, \"circle\", -1 /* HOISTED */);\nconst _hoisted_32 = {\n  class: \"block\"\n};\nconst _hoisted_33 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"triangle-up\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_34 = [_hoisted_33];\nconst _hoisted_35 = /*#__PURE__*/_createElementVNode(\"label\", null, \"triangle\", -1 /* HOISTED */);\nconst _hoisted_36 = {\n  class: \"block\"\n};\nconst _hoisted_37 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"oval\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_38 = [_hoisted_37];\nconst _hoisted_39 = /*#__PURE__*/_createElementVNode(\"label\", null, \"ellips\", -1 /* HOISTED */);\nconst _hoisted_40 = {\n  class: \"block\"\n};\nconst _hoisted_41 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-lines-leaning\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_42 = [_hoisted_41];\nconst _hoisted_43 = /*#__PURE__*/_createElementVNode(\"label\", null, \"line\", -1 /* HOISTED */);\nconst _hoisted_44 = {\n  class: \"bord\",\n  style: {\n    \"border\": \"solid black 2px\",\n    \"border-radius\": \"10px\",\n    \"background-color\": \"#ffffff\",\n    \"margin-left\": \"2px\"\n  }\n};\nexport function render(_ctx, _cache) {\n  const _component_color_picker = _resolveComponent(\"color-picker\");\n  const _component_v_rect = _resolveComponent(\"v-rect\");\n  const _component_v_circle = _resolveComponent(\"v-circle\");\n  const _component_v_ellipse = _resolveComponent(\"v-ellipse\");\n  const _component_v_line = _resolveComponent(\"v-line\");\n  const _component_v_regular_polygon = _resolveComponent(\"v-regular-polygon\");\n  const _component_v_layer = _resolveComponent(\"v-layer\");\n  const _component_v_stage = _resolveComponent(\"v-stage\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"button\", {\n    style: {\n      \"background-color\": \"rgb(111, 125, 131)\"\n    },\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.save())\n  }, [_createTextVNode(\"Save \"), _hoisted_5]), _hoisted_6, _hoisted_7, _createElementVNode(\"button\", {\n    style: {\n      \"background-color\": \"rgb(111, 125, 131)\"\n    },\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.del())\n  }, [_createTextVNode(\"Delete \"), _hoisted_8]), _createElementVNode(\"button\", {\n    style: {\n      \"background-color\": \"rgb(111, 125, 131)\"\n    },\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.clr())\n  }, [_createTextVNode(\"clear \"), _hoisted_9]), _hoisted_10, _createElementVNode(\"button\", {\n    for: \"userInput\",\n    style: {\n      \"background-color\": \"rgb(111, 125, 131)\"\n    },\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.resize())\n  }, \"resize\"), _hoisted_11]), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createVNode(_component_color_picker, {\n    pureColor: _ctx.pureColor,\n    \"onUpdate:pureColor\": _cache[4] || (_cache[4] = $event => _ctx.pureColor = $event),\n    gradientColor: _ctx.gradientColor,\n    \"onUpdate:gradientColor\": _cache[5] || (_cache[5] = $event => _ctx.gradientColor = $event)\n  }, null, 8 /* PROPS */, [\"pureColor\", \"gradientColor\"])]), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.fill()),\n    style: {\n      \"background-color\": \"rgb(111, 125, 131)\"\n    }\n  }, [_createTextVNode(\"fill\"), _hoisted_15]), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => _ctx.edge()),\n    style: {\n      \"background-color\": \"rgb(111, 125, 131)\"\n    }\n  }, [_createTextVNode(\"border\"), _hoisted_16])])])]), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => _ctx.square())\n  }, [..._hoisted_22]), _hoisted_23]), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => _ctx.rect())\n  }, [..._hoisted_26]), _hoisted_27]), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => _ctx.circle())\n  }, [..._hoisted_30]), _hoisted_31]), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = $event => _ctx.triangle())\n  }, [..._hoisted_34]), _hoisted_35]), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = $event => _ctx.ellipse())\n  }, [..._hoisted_38]), _hoisted_39]), _createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = $event => _ctx.line()),\n    style: {\n      \"width\": \"30px\"\n    }\n  }, [..._hoisted_42]), _hoisted_43])])]), _createElementVNode(\"div\", _hoisted_44, [_createVNode(_component_v_stage, {\n    config: _ctx.configKonva,\n    ref: \"stage\",\n    onMousedown: _ctx.startDrawing,\n    onMouseup: _ctx.stopDrawing,\n    onMousemove: _ctx.draw\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_layer, null, {\n      default: _withCtx(() => [_createCommentVNode(\" drawing rectangles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.rectangles, (rect, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'rectangle',\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill,\n            // Use the selected fill color\n            stroke: rect.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onClick: $event => _ctx.shapeClicked('rect', index),\n          onDragend: $event => _ctx.newpo('rect', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing circles \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.circles, (circle, index) => {\n        return _openBlock(), _createBlock(_component_v_circle, {\n          key: index,\n          config: {\n            type: 'circle',\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            stroke: circle.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onClick: $event => _ctx.shapeClicked('circle', index),\n          onDragend: $event => _ctx.newpo('circle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing ellipses \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.ellipses, (ellipse, index) => {\n        return _openBlock(), _createBlock(_component_v_ellipse, {\n          key: index,\n          config: {\n            type: 'ellipse',\n            x: ellipse.x,\n            y: ellipse.y,\n            radiusX: ellipse.radiusX,\n            radiusY: ellipse.radiusY,\n            fill: ellipse.fill,\n            // Use the selected fill color\n            stroke: ellipse.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onClick: $event => _ctx.shapeClicked('ellipse', index),\n          onDragend: $event => _ctx.newpo('ellipse', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" drawing line segment \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.lines, (line, index) => {\n        return _openBlock(), _createBlock(_component_v_line, {\n          key: index,\n          config: {\n            type: 'line',\n            points: line.points,\n            stroke: line.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onClick: $event => _ctx.shapeClicked('line', index),\n          onDragend: $event => _ctx.newpo('line', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" square \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.squares, (square, index) => {\n        return _openBlock(), _createBlock(_component_v_rect, {\n          key: index,\n          config: {\n            type: 'square',\n            x: square.x,\n            y: square.y,\n            width: square.width,\n            height: square.height,\n            fill: square.fill,\n            // Use the selected fill color\n            stroke: square.stroke,\n            // Use the selected edge color\n            strokeWidth: 2,\n            draggable: true\n          },\n          onClick: $event => _ctx.shapeClicked('square', index),\n          onDragend: $event => _ctx.newpo('square', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.triangles, (triangle, index) => {\n        return _openBlock(), _createBlock(_component_v_regular_polygon, {\n          key: index,\n          config: {\n            type: 'triangle',\n            x: triangle.x,\n            y: triangle.y,\n            sides: 3,\n            radius: triangle.radius,\n            fill: triangle.fill,\n            stroke: triangle.stroke,\n            strokeWidth: 2,\n            draggable: true\n          },\n          onClick: $event => _ctx.shapeClicked('triangle', index),\n          onDragend: $event => _ctx.newpo('triangle', index, $event)\n        }, null, 8 /* PROPS */, [\"config\", \"onClick\", \"onDragend\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"config\", \"onMousedown\", \"onMouseup\", \"onMousemove\"])])])]);\n}","map":{"version":3,"names":["class","style","_createElementVNode","type","id","_hoisted_21","_hoisted_25","_hoisted_29","_hoisted_33","_hoisted_37","_hoisted_41","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","$event","_ctx","save","_hoisted_5","_hoisted_6","_hoisted_7","del","_hoisted_8","clr","_hoisted_9","_hoisted_10","for","resize","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_createVNode","_component_color_picker","pureColor","gradientColor","fill","_hoisted_15","edge","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","square","_hoisted_23","_hoisted_24","rect","_hoisted_27","_hoisted_28","circle","_hoisted_31","_hoisted_32","triangle","_hoisted_35","_hoisted_36","ellipse","_hoisted_39","_hoisted_40","line","_hoisted_43","_hoisted_44","_component_v_stage","config","configKonva","ref","onMousedown","startDrawing","onMouseup","stopDrawing","onMousemove","draw","_component_v_layer","_createCommentVNode","_Fragment","_renderList","rectangles","index","_createBlock","_component_v_rect","key","x","y","width","height","stroke","shapeClicked","onDragend","newpo","circles","_component_v_circle","radius","ellipses","_component_v_ellipse","radiusX","radiusY","lines","_component_v_line","points","squares","triangles","_component_v_regular_polygon"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n    <div class=\"appaint\" style=\"border:solid black 2px; width:1130px; background-color:#404340 ;\">\r\n      <div class=\"header\">\r\n    <div class=\"operations\" >\r\n      <button style=\"background-color:rgb(111, 125, 131)\">open <i class=\"fa-solid fa-folder-open\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\">Redo <i class=\"fa-solid fa-rotate-right\"></i></button>\r\n      <button  style=\"background-color:rgb(111, 125, 131)\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\" >copy <i class=\"fa-solid fa-copy\"></i></button>\r\n      <button for=\"userInput\"  style=\"background-color:rgb(111, 125, 131)\" @click=\"resize() \">resize</button>\r\n      <input type=\"text\" id=\"userInput\" style=\"border:solid black ;\">\r\n      \r\n  \r\n    </div>\r\n    <div class=\"clorfil\" >\r\n      <div class=\"block\">\r\n        <div class=\"fillcolor\">\r\n          <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n      </div>\r\n        <button @click=\"fill()\" style=\"background-color:rgb(111, 125, 131)\">fill<i class=\"fa-solid fa-fill-drip\"></i></button>\r\n        <button @click=\"edge()\" style=\"background-color:rgb(111, 125, 131)\">border<i class=\"fa-solid fa-paintbrush\"></i></button>\r\n      \r\n    </div>\r\n    </div>\r\n  </div>\r\n   \r\n    <div class=\"paint\">\r\n     \r\n      <div class=\"bordshaps\" >\r\n       \r\n      <div class=\"shaps\">\r\n        <div class=\"block\">\r\n       <button @click=\"square()\" ><div class=\"square\"></div></button>\r\n       <label >square</label>\r\n      </div>\r\n        <div class=\"block\">\r\n       <button @click=\"rect()\" ><div class=\"rectengle\"></div></button>\r\n       <label >rectengle</label>\r\n      </div>\r\n        <div class=\"block\">\r\n          <button @click=\"circle()\" ><div class=\"circle\"></div></button>\r\n       <label >circle</label>\r\n      </div>\r\n        <div class=\"block\">\r\n       <button @click=\"triangle()\" ><div class=\"triangle-up\"></div></button>\r\n       <label >triangle</label>\r\n      </div>\r\n      <div class=\"block\">\r\n        <button @click=\"ellipse()\"><div class=\"oval\"></div></button>\r\n        <label >ellips</label>\r\n       </div>\r\n      <div class=\"block\">\r\n        <button @click=\"line()\" style=\"width:30px;\"><i class=\"fa-solid fa-lines-leaning\"></i></button>\r\n        <label >line</label>\r\n       </div>\r\n      </div>\r\n    </div>\r\n      <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n    <v-stage :config=\"configKonva\" ref=\"stage\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" \r\n       >\r\n      <v-layer>\r\n        <!-- drawing rectangles -->\r\n        <v-rect\r\n         v-for=\"(rect, index) in rectangles\"\r\n          :key=\"index\"\r\n          :config=\"{ \r\n            type:'rectangle',\r\n            x:  rect.x,\r\n            y: rect.y,\r\n            width: rect.width,\r\n            height: rect.height,\r\n            fill: rect.fill, // Use the selected fill color\r\n            stroke: rect.stroke, // Use the selected edge color\r\n            strokeWidth: 2 ,\r\n            draggable:true,\r\n             \r\n         }\"\r\n           \r\n          @click=\"shapeClicked('rect', index) \"\r\n         @dragend=\"newpo('rect', index, $event)\"   \r\n        \r\n          \r\n        ></v-rect>\r\n       <!-- drawing circles -->\r\n       <v-circle\r\n        v-for=\"(circle, index) in circles\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'circle',\r\n            x: circle.x,\r\n            y: circle.y,\r\n            radius:circle.radius,\r\n            fill:circle.fill,\r\n            stroke:circle.stroke,\r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n           @click=\"shapeClicked('circle', index)\"\r\n           @dragend=\"newpo('circle', index, $event)\"     >\r\n  \r\n       </v-circle>\r\n       <!-- drawing ellipses -->\r\n       <v-ellipse\r\n          v-for=\"(ellipse, index) in ellipses\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'ellipse',\r\n            x: ellipse.x,\r\n            y: ellipse.y,\r\n            radiusX:ellipse.radiusX,\r\n            radiusY:ellipse.radiusY,\r\n            fill: ellipse.fill, // Use the selected fill color\r\n            stroke: ellipse.stroke, // Use the selected edge color\r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n         @click=\"shapeClicked('ellipse', index)\"\r\n         @dragend=\"newpo('ellipse', index, $event)\"   \r\n       >\r\n  \r\n       </v-ellipse>\r\n       <!-- drawing line segment -->\r\n       <v-line\r\n         v-for=\"(line, index) in lines\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'line',\r\n            points:line.points,\r\n            stroke: line.stroke,\r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n           @click=\"shapeClicked('line', index)\"\r\n           @dragend=\"newpo('line', index, $event)\"   \r\n       >\r\n  \r\n       </v-line>\r\n    <!-- square -->\r\n    <v-rect\r\n     v-for=\"(square, index) in squares\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'square',\r\n             x: square.x,\r\n            y: square.y,\r\n            width: square.width,\r\n            height: square.height,\r\n            fill: square.fill, // Use the selected fill color\r\n            stroke: square.stroke, // Use the selected edge color\r\n            strokeWidth: 2 ,\r\n            draggable:true,\r\n          }\"\r\n        @click=\"shapeClicked('square', index)\"\r\n        @dragend=\"newpo('square', index, $event)\"   \r\n    >\r\n  \r\n    </v-rect>\r\n    <v-regular-polygon\r\n     v-for=\"(triangle, index) in triangles\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'triangle',\r\n            x: triangle.x,\r\n            y: triangle.y,\r\n            sides:3,\r\n            radius:triangle.radius,\r\n            fill: triangle.fill, \r\n            stroke: triangle.stroke, \r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n        @click=\"shapeClicked('triangle', index)\"\r\n        @dragend=\"newpo('triangle', index, $event)\"   \r\n    >\r\n  \r\n    </v-regular-polygon>\r\n      \r\n  \r\n      </v-layer>\r\n    </v-stage>\r\n  </div>\r\n    \r\n  </div>\r\n  </div>\r\n  </template>\r\n  \r\n  <script>\r\n  //import Konva from 'konva';\r\n  \r\n  import { ref } from \"vue\";\r\n  import { ColorInputWithoutInstance } from \"tinycolor2\";\r\n  \r\n  export default  {\r\n    name: 'HelloWorld',\r\n    data() {\r\n      return {\r\n        value: null,\r\n        selectedColor: '',\r\n        selectedColor2: '',\r\n        selectedColor3: '',\r\n        selectedColor4: '',\r\n        selectedColor5: '',\r\n        configKonva: {\r\n          width: 1000,\r\n          height: 800,\r\n        },\r\n        pureColor: '#ffffff', // Selected fill color\r\n        pureColor2: '#000000', // Selected edge color\r\n        isdraw: false,\r\n        rectangles:[],\r\n        squares:[],\r\n        lines:[],\r\n        circles:[],\r\n        ellipses:[],\r\n        triangles:[],\r\n        rectangle:false,\r\n        circ:false,\r\n        ellips:false,\r\n        lin:false,\r\n        sqrt:false,\r\n        tria:false,\r\n        bru:false,\r\n        delete:false,\r\n        mov:false,\r\n        cofill:false,\r\n        coledge:false,\r\n        currentShape:null,\r\n        shapes:[],\r\n        selectedShapeName: '',\r\n        resiz:false,\r\n        userInput:0,\r\n        sav:false,\r\n        path:\"D:\\\\test.json\" \r\n      };\r\n    },\r\n    methods: {\r\n      setup() {\r\n        const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n        return{pureColor}\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n      },\r\n      \r\n  newpo(type, index,e) {\r\n     var v=0;\r\n    if (type === 'circle') {\r\n     \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.circles[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.circles[index].x=e.target.x();\r\n      this.circles[index].y=e.target.y();\r\n      this.shapes[v]=this.circles[index];\r\n      console.log(this.shapes[v]);\r\n      console.log(this.circles[index].x);\r\n      console.log(this.circles[index].y);\r\n      }\r\n      if (type === 'rect') {\r\n        \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.rectangles[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.rectangles[index].x=e.target.x();\r\n      this.rectangles[index].y=e.target.y();\r\n      this.shapes[v]=this.rectangles[index];\r\n      console.log(this.rectangles[index].x);\r\n      console.log(this.rectangles[index].y);\r\n      }\r\n      if (type === 'ellipse') {\r\n      \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.ellipses[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.ellipses[index].x=e.target.x();\r\n      this.ellipses[index].y=e.target.y();\r\n      this.shapes[v]=this.ellipses[index];\r\n      console.log(this.ellipses[index].x);\r\n      console.log(this.ellipses[index].y);\r\n      }\r\n      if (type === 'line') {\r\n    \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.lines[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.lines[index].x=e.target.x();\r\n      this.lines[index].y=e.target.y();\r\n      this.shapes[v]=this.lines[index];\r\n      console.log(this.lines[index].x);\r\n      console.log(this.lines[index].y);\r\n      }\r\n      if (type === 'square') {\r\n      \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.squares[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.squares[index].x=e.target.x();\r\n      this.squares[index].y=e.target.y();\r\n      this.shapes[v]=this.squares[index];\r\n      console.log(this.squares[index].x);\r\n      console.log(this.squares[index].y);\r\n      }\r\n      if (type === 'triangle') {\r\n      \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.triangles[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.triangles[index].x=e.target.x();\r\n      this.triangles[index].y=e.target.y();\r\n      this.shapes[v]=this.triangles[index];\r\n      console.log(this.triangles[index].x);\r\n      console.log(this.triangles[index].y);\r\n      }\r\n      \r\n    },\r\n      rect(){\r\n           this.rectangle=true;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      brush(){\r\n             this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=true;\r\n      },\r\n      ellipse()\r\n      {\r\n         this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=true;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      }, \r\n      circle()\r\n      {\r\n           this.rectangle=false;\r\n         this.circ=true;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      line()\r\n      {\r\n             this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=true;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      square()\r\n      {\r\n  \r\n            this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=true;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      triangle()\r\n      {\r\n            this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=true;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      fill(){\r\n  \r\n            this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=true;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n  \r\n      },\r\n      edge(){\r\n          this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=true;\r\n        this.bru=false;\r\n  \r\n      },\r\n      clr()\r\n      {\r\n        this.circles=[];\r\n        this.lines=[];\r\n        this.squares=[];\r\n        this.rectangles=[];\r\n        this.triangles=[];\r\n        this.ellipses=[];\r\n        this.shapes=[];\r\n      \r\n      },\r\n      resize(){\r\n        this.resiz=true;\r\n        this.userInput = document.getElementById('userInput').value;\r\n  \r\n      },\r\n       shapeClicked(type, index) {\r\n        if(type==='triangle')\r\n       {\r\n  \r\n  \r\n  \r\n        this.triangles[index].draggable=true;\r\n          let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.triangles[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n         \r\n          this.triangles[index].draggable=false;\r\n          this.triangles[index].radius *=  this.userInput;\r\n          this.triangles[index].draggable=true;\r\n          this.shapes[v]=this.triangles[index];\r\n          this.resiz=false;\r\n  \r\n        }\r\n          if(this.delete)\r\n          {\r\n            \r\n                this.triangles.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n               // console.log(this.shapes);\r\n                this.delete=false;\r\n          }\r\n  \r\n         if (this.cofill) {\r\n          let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.selectedColor2= selectedFillColor\r\n          this.triangles[index].fill = selectedFillColor;\r\n          this.shapes[v]=this.triangles[index];       // Assign the selected fill color to the fill property of the shape object\r\n          selectedFillColor=this.pureColor\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          \r\n                   }\r\n               if(this.coledge){\r\n                let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.triangles[index].stroke = selectedEdgeColor; \r\n            this.shapes[v]=this.triangles[index]; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n         \r\n            }\r\n         \r\n         /*********************************************************************** */\r\n          \r\n       }\r\n       else if(type==='circle')\r\n       {\r\n        this.circles[index].draggable=true;\r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.circles[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n          this.circles[index].draggable=false;\r\n          this.circles[index].radius *= this.userInput;\r\n          this.circles[index].draggable=true;\r\n          this.shapes[v]=this.circles[index];\r\n          this.resiz=false;\r\n        }\r\n            if(this.delete)\r\n          {\r\n           \r\n                this.circles.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n  \r\n                  this.delete=false;\r\n          }\r\n          if (this.cofill) {\r\n  \r\n          let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.circles[index].fill = selectedFillColor; \r\n             this.shapes[v]=this.circles[index];   // Assign the selected fill color to the fill property of the shape object\r\n          selectedFillColor=this.pureColor\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             \r\n                \r\n                   }\r\n                  if(this.coledge){\r\n               let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.circles[index].stroke = selectedEdgeColor; \r\n            this.shapes[v]=this.circles[index]; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          \r\n         \r\n       }  \r\n         \r\n       }\r\n       else if(type==='line')\r\n       {\r\n  \r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.lines[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n               if(this.delete)\r\n          {\r\n           \r\n                this.lines.splice(index,1);\r\n                this.shapes.slice(v,1);\r\n                  this.delete=false;\r\n          }\r\n          if(this.coledge){\r\n               let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n            this.shapes[v]=this.lines[index];\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          }\r\n       }\r\n       /************************************************************ */\r\n       else if(type==='rect')\r\n       {\r\n        this.rectangles[index].draggable=true;\r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.rectangles[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n  \r\n        this.rectangles[index].draggable=true;\r\n        if(this.resiz)\r\n        {\r\n          this.rectangles[index].draggable=false;\r\n          this.rectangles[index].width *= this.userInput;\r\n          this.rectangles[index].height *= this.userInput;\r\n          this.rectangles[index].draggable=true;\r\n          this.shapes[v]=this.rectangles[index];\r\n          this.resiz=false;\r\n        }\r\n               if(this.delete)\r\n          {\r\n           \r\n                this.rectangles.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n                  this.delete=false;\r\n          }\r\n          if (this.cofill) {\r\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n          //selectedFillColor=this.pureColor\r\n          this.shapes[v]=this.rectangles[index];\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          \r\n                   }\r\n          if(this.coledge){\r\n               let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v]=this.rectangles[index];\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          \r\n         \r\n       }\r\n       }\r\n       /*************************************************************** */\r\n        else if(type==='ellipse') {\r\n          this.ellipses[index].draggable=true;\r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.ellipses[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n          this.ellipses[index].draggable=false;\r\n          this.ellipses[index].radiusX *=  this.userInput;\r\n          this.ellipses[index].radiusY *=  this.userInput;\r\n          this.ellipses[index].draggable=true;\r\n          this.shapes[v]=this.ellipses[index];\r\n          this.resiz=false;\r\n        }\r\n                  if(this.delete)\r\n          {\r\n           \r\n                this.ellipses.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n                  this.delete=false;\r\n          }\r\n            if (this.cofill) {\r\n        let selectedFillColor = this.pureColor;\r\n        this.ellipses[index].fill = selectedFillColor;\r\n        this.shapes[v]=this.ellipses[index];\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff';\r\n      }\r\n  \r\n          if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n              this.shapes[v]=this.ellipses[index];\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n         \r\n       }\r\n          }\r\n          /**************************************************** */\r\n       else if(type==='square')\r\n       {\r\n        this.squares[index].draggable=true;\r\n          let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.squares[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n          this.squares[index].draggable=false;\r\n          this.squares[index].width *=  this.userInput;\r\n          this.squares[index].height *=  this.userInput;\r\n         \r\n          this.squares[index].draggable=true;\r\n           this.shapes[v]=this.squares[index];\r\n        }\r\n       // this.squares[index].fill = this.selectedColor;\r\n                 if(this.delete)\r\n          {\r\n           \r\n                this.squares.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n                  this.delete=false;\r\n          }\r\n        if (this.cofill) {\r\n          let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.selectedColor2= selectedFillColor\r\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n          selectedFillColor=this.pureColor\r\n            this.shapes[v]=this.squares[index];\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          \r\n                   }\r\n          if(this.coledge)\r\n          {\r\n                    let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n              this.shapes[v]=this.squares[index];\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          }         \r\n         \r\n         \r\n       }\r\n  \r\n      },\r\n   \r\n  \r\n      del()\r\n      {\r\n                this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=true;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      move()\r\n      {\r\n        this.mov=true;\r\n      },\r\n      \r\n      \r\n        startDrawing() {\r\n       if(this.rectangle===true)\r\n        {\r\n            this.isdraw = true;\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape = {\r\n              x: position.x,\r\n              y: position.y,\r\n               fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n              width: 0,\r\n              height: 0,\r\n            };\r\n            console.log(this.currentShape.x);\r\n            console.log(this.currentShape.y);\r\n          }\r\n        }\r\n        }\r\n        else if(this.circ===true){\r\n                  this.isdraw = true;\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape = {\r\n              x: position.x,\r\n              y: position.y,\r\n              fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n              radius: 0,\r\n            };\r\n          }\r\n        }\r\n        }\r\n        else if(this.ellips===true)\r\n        {\r\n             this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                  x: position.x,\r\n                  y: position.y,\r\n                   fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n                radiusX: 0,\r\n                radiusY:0\r\n                };\r\n              }\r\n            }\r\n        }\r\n        else if(this.lin===true)\r\n        {\r\n                this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                  \r\n              stroke:this.pureColor2,\r\n               points: [position.x, position.y]\r\n                };\r\n              }\r\n            }\r\n        }\r\n        else if(this.sqrt===true)\r\n        {\r\n              this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                x: position.x,\r\n              y: position.y,\r\n               fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n              width: 0,\r\n              height: 0,\r\n                };\r\n              }\r\n            }\r\n        }\r\n        else if(this.tria)\r\n        {\r\n            this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                 x: position.x,\r\n                  y: position.y,\r\n                  fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n                  radius:0\r\n                };\r\n              }\r\n            }\r\n        }\r\n        /*\r\n        else if(this.bru)\r\n        {\r\n              this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                  \r\n              stroke:this.pureColor2,\r\n               points: [position.x, position.y]\r\n                };\r\n              }\r\n            }\r\n        }\r\n        */\r\n    \r\n       \r\n        \r\n      \r\n      },\r\n      stopDrawing() {\r\n       \r\n            if (this.isdraw) {\r\n          this.isdraw = false;\r\n          console.log(\"xxxxx\");\r\n          if(this.circ)\r\n          {\r\n                       this.circles.push({ ...this.currentShape });\r\n                       this.shapes.push({...this.currentShape});\r\n                     // while(true){\r\n                     // console.log(this.shapes[0]);\r\n                     // }\r\n          }\r\n        \r\n        else if(this.rectangle){\r\n            this.rectangles.push({...this.currentShape});\r\n              this.shapes.push({...this.currentShape});\r\n        }\r\n        \r\n        else if(this.ellips)\r\n        {\r\n             this.ellipses.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n        }\r\n             \r\n        else if(this.lin||this.bru)\r\n        {\r\n               this.lines.push({...this.currentShape});\r\n                 this.shapes.push({...this.currentShape});\r\n        }\r\n            \r\n        else if(this.sqrt)\r\n        {\r\n                  this.squares.push({...this.currentShape});\r\n                    this.shapes.push({...this.currentShape});\r\n        }\r\n            \r\n        else if(this.tria)\r\n        {\r\n               this.triangles.push({...this.currentShape}); \r\n                  this.shapes.push({...this.currentShape});\r\n        }\r\n        this.createShape();\r\n  \r\n  \r\n  \r\n          this.currentShape = null;\r\n          this.circ=false;\r\n          this.ellips=false;\r\n          this.rectangle=false;\r\n          this.lin=false;\r\n          this.sqrt=false;\r\n          this.tria=false;\r\n          this.mov = false;\r\n          this.bru=false;\r\n        }\r\n       \r\n        \r\n        \r\n      \r\n      },\r\n      async createShape(){\r\n        // console.log(this.currentShape)\r\n        // await fetch('http://localhost:8080/type', {\r\n        //   method: 'POST',\r\n        //   body: \"Square\",\r\n        // }).catch(error => {\r\n        //   console.error('Fetch error:', error);\r\n        // });\r\n        JSON.\r\n        await fetch('http://localhost:8080/create', {\r\n          method: 'POST',\r\n          body: ,\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      },\r\n      draw() {\r\n        if(this.rectangle)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.width = position.x - this.currentShape.x;\r\n              this.currentShape.height = position.y - this.currentShape.y;\r\n            }\r\n          }\r\n        }\r\n        }\r\n      //--------------------------------------------------------------------------------\r\n        else if(this.circ)\r\n        {\r\n            if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.radius = Math.sqrt(\r\n                  Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n            }\r\n          }\r\n        }\r\n        }\r\n        //************************************************************************************************** */\r\n        else if(this.ellips)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\r\n              this.currentShape.radiusY=Math.abs(position.y - this.currentShape.y);\r\n            }\r\n          }\r\n        }\r\n        }\r\n        //******************************************** */\r\n        else if(this.lin)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n               this.currentShape.points[2] = position.x;\r\n            this.currentShape.points[3] = position.y;\r\n             \r\n            }\r\n          }\r\n        }\r\n        }\r\n        //******************************************** */\r\n        else if(this.sqrt)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.width = position.x - this.currentShape.x;\r\n              this.currentShape.height = position.x - this.currentShape.x;\r\n            }\r\n          }\r\n        }\r\n        }\r\n        //************************************ **/\r\n        else if(this.tria)\r\n        {\r\n               if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             \r\n              this.currentShape.radius=Math.sqrt(\r\n                  Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n            }\r\n          }\r\n        }\r\n        }\r\n        \r\n      },\r\n  \r\n      async saving()\r\n      {\r\n        await fetch('http://localhost:8080/save', {\r\n          method: 'POST',\r\n          body: this.path,\r\n        }).catch(error => {\r\n          console.error('Fetch error:', error);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  </script>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  <style>\r\n  .paint{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    \r\n  }\r\n  .header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap:0px;\r\n  \r\n  }\r\n  .operations{\r\n    width:600px;\r\n    border: #555 solid  ;\r\n    border-color: #555;\r\n    background-color: rgb(111, 125, 131);\r\n    border-radius:20px;\r\n    display: flex;\r\n    gap: 20px;\r\n    align-content: center;\r\n    margin:10px;\r\n    margin:  2px auto;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  \r\n  }\r\n  .clorfil{\r\n    margin-right: 30px;\r\n    width:180px;\r\n    border: rgb(7, 5, 5) solid  ;\r\n    border-color: #555;\r\n    background-color: rgb(111, 125, 131);\r\n    border-radius:20px;\r\n    \r\n  }\r\n  .bordshaps{\r\n    height: 180px;\r\n    margin: 3px;\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: #555 solid  ;\r\n    border-color: #555;\r\n    background-color: rgb(111, 125, 131);\r\n    border-radius:20px;\r\n    margin:   auto 2px;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    \r\n  }\r\n  \r\n  .shaps{\r\n    margin-right: 3px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    \r\n  } \r\n  label{\r\n    opacity: 0.2;\r\n    color: aliceblue;\r\n    \r\n  }\r\n  .block{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 5px;\r\n  }\r\n  button:hover {\r\n    cursor: pointer;\r\n  }\r\n  label:hover{\r\n    opacity: 100;\r\n    color: aliceblue;\r\n  \r\n  }\r\n  .square {\r\n    height: 10px;\r\n    width: 10px;\r\n    border: black solid;\r\n  }\r\n  .rectengle {\r\n    height: 5px;\r\n    width: 10px;\r\n    border: black solid;\r\n  }\r\n  .circle {\r\n    height: 10px;\r\n    width: 10px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .circle1{\r\n    height: 50px;\r\n    width: 50px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .oval {\r\n    height: 5px;\r\n    width: 10px;\r\n    border: black solid;\r\n    \r\n    border-radius: 50%;\r\n  }\r\n  .triangle-up {\r\n      width: 0;\r\n      height: 0;\r\n      border-left: 8px solid transparent;\r\n      border-right: 8px solid transparent;\r\n      border-bottom: 14px solid #555;\r\n  }\r\n  .line{\r\n      border-left: 1px solid transparent;\r\n      border-bottom:18px solid #555;\r\n  }\r\n  .color{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-bottom: 10px;\r\n  \r\n  }\r\n  .fillcolor{\r\n    height: 24px;\r\n    width: 23px;\r\n    border: black solid;\r\n    border-radius: 49%;\r\n    overflow: hidden;\r\n  \r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}