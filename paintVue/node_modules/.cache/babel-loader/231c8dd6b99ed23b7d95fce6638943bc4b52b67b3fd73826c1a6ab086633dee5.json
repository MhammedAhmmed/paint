{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//import Konva from 'konva';\n\nimport { ref } from \"vue\";\nimport { ColorInputWithoutInstance } from \"tinycolor2\";\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      value: null,\n      selectedColor: '',\n      selectedColor2: '',\n      selectedColor3: '',\n      selectedColor4: '',\n      selectedColor5: '',\n      configKonva: {\n        width: 1000,\n        height: 800\n      },\n      pureColor: '#ffffff',\n      // Selected fill color\n      pureColor2: '#000000',\n      // Selected edge color\n      isdraw: false,\n      rectangles: [],\n      squares: [],\n      lines: [],\n      circles: [],\n      ellipses: [],\n      triangles: [],\n      rectangle: false,\n      circ: false,\n      ellips: false,\n      lin: false,\n      sqrt: false,\n      tria: false,\n      bru: false,\n      delete: false,\n      mov: false,\n      cofill: false,\n      coledge: false,\n      currentShape: null,\n      shapes: [],\n      selectedShapeName: '',\n      resiz: false,\n      userInput: 0,\n      sav: false,\n      path: \"C:\\\\Users\\\\omark\\\\shapes.json\"\n    };\n  },\n  methods: {\n    setup() {\n      const pureColor = ref < ColorInputWithoutInstance > \"red\";\n      return {\n        pureColor\n      };\n    },\n    save() {\n      this.saving();\n    },\n    newpo(type, index, e) {\n      var v = 0;\n      if (type === 'circle') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.circles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.circles[index].x = e.target.x();\n        this.circles[index].y = e.target.y();\n        this.shapes[v] = this.circles[index];\n        console.log(this.shapes[v]);\n        console.log(this.circles[index].x);\n        console.log(this.circles[index].y);\n      }\n      if (type === 'rect') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.rectangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.rectangles[index].x = e.target.x();\n        this.rectangles[index].y = e.target.y();\n        this.shapes[v] = this.rectangles[index];\n        console.log(this.rectangles[index].x);\n        console.log(this.rectangles[index].y);\n      }\n      if (type === 'ellipse') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.ellipses[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.ellipses[index].x = e.target.x();\n        this.ellipses[index].y = e.target.y();\n        this.shapes[v] = this.ellipses[index];\n        console.log(this.ellipses[index].x);\n        console.log(this.ellipses[index].y);\n      }\n      if (type === 'line') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.lines[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.lines[index].x = e.target.x();\n        this.lines[index].y = e.target.y();\n        this.shapes[v] = this.lines[index];\n        console.log(this.lines[index].x);\n        console.log(this.lines[index].y);\n      }\n      if (type === 'square') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.squares[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.squares[index].x = e.target.x();\n        this.squares[index].y = e.target.y();\n        this.shapes[v] = this.squares[index];\n        console.log(this.squares[index].x);\n        console.log(this.squares[index].y);\n      }\n      if (type === 'triangle') {\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.triangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.triangles[index].x = e.target.x();\n        this.triangles[index].y = e.target.y();\n        this.shapes[v] = this.triangles[index];\n        console.log(this.triangles[index].x);\n        console.log(this.triangles[index].y);\n      }\n    },\n    rect() {\n      this.rectangle = true;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    brush() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = true;\n    },\n    ellipse() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = true;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    circle() {\n      this.rectangle = false;\n      this.circ = true;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    line() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = true;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    square() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = true;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    triangle() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = true;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    fill() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = true;\n      this.delete = false;\n      this.coledge = false;\n      this.bru = false;\n    },\n    edge() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = false;\n      this.coledge = true;\n      this.bru = false;\n    },\n    clr() {\n      this.circles = [];\n      this.lines = [];\n      this.squares = [];\n      this.rectangles = [];\n      this.triangles = [];\n      this.ellipses = [];\n      this.shapes = [];\n    },\n    resize() {\n      this.resiz = true;\n      this.userInput = document.getElementById('userInput').value;\n    },\n    shapeClicked(type, index) {\n      if (type === 'triangle') {\n        this.triangles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.triangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.resiz) {\n          this.triangles[index].draggable = false;\n          this.triangles[index].radius *= this.userInput;\n          this.triangles[index].draggable = true;\n          this.shapes[v] = this.triangles[index];\n          this.resiz = false;\n        }\n        if (this.delete) {\n          this.triangles.splice(index, 1);\n          this.shapes.splice(v, 1);\n          // console.log(this.shapes);\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.triangles[index].fill = selectedFillColor;\n          this.shapes[v] = this.triangles[index]; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n        }\n\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.triangles[index].stroke = selectedEdgeColor;\n          this.shapes[v] = this.triangles[index]; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n        }\n\n        /*********************************************************************** */\n      } else if (type === 'circle') {\n        this.circles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.circles[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.resiz) {\n          this.circles[index].draggable = false;\n          this.circles[index].radius *= this.userInput;\n          this.circles[index].draggable = true;\n          this.shapes[v] = this.circles[index];\n          this.resiz = false;\n        }\n        if (this.delete) {\n          this.circles.splice(index, 1);\n          this.shapes.splice(v, 1);\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.circles[index].fill = selectedFillColor;\n          this.shapes[v] = this.circles[index]; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n        }\n\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.circles[index].stroke = selectedEdgeColor;\n          this.shapes[v] = this.circles[index]; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n        }\n      } else if (type === 'line') {\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.lines[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.delete) {\n          this.lines.splice(index, 1);\n          this.shapes.slice(v, 1);\n          this.delete = false;\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v] = this.lines[index];\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n        }\n      }\n      /************************************************************ */else if (type === 'rect') {\n        this.rectangles[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.rectangles[index]) {\n            v = i;\n            break;\n          }\n        }\n        this.rectangles[index].draggable = true;\n        if (this.resiz) {\n          this.rectangles[index].draggable = false;\n          this.rectangles[index].width *= this.userInput;\n          this.rectangles[index].height *= this.userInput;\n          this.rectangles[index].draggable = true;\n          this.shapes[v] = this.rectangles[index];\n          this.resiz = false;\n        }\n        if (this.delete) {\n          this.rectangles.splice(index, 1);\n          this.shapes.splice(v, 1);\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          //selectedFillColor=this.pureColor\n          this.shapes[v] = this.rectangles[index];\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n        }\n\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v] = this.rectangles[index];\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n        }\n      }\n      /*************************************************************** */else if (type === 'ellipse') {\n        this.ellipses[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.ellipses[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.resiz) {\n          this.ellipses[index].draggable = false;\n          this.ellipses[index].radiusX *= this.userInput;\n          this.ellipses[index].radiusY *= this.userInput;\n          this.ellipses[index].draggable = true;\n          this.shapes[v] = this.ellipses[index];\n          this.resiz = false;\n        }\n        if (this.delete) {\n          this.ellipses.splice(index, 1);\n          this.shapes.splice(v, 1);\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor;\n          this.ellipses[index].fill = selectedFillColor;\n          this.shapes[v] = this.ellipses[index];\n          this.cofill = false;\n          this.pureColor = '#ffffff';\n        }\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.shapes[v] = this.ellipses[index];\n          this.coledge = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n        }\n      }\n      /**************************************************** */else if (type === 'square') {\n        this.squares[index].draggable = true;\n        let v = 0;\n        for (let i = 0; i < this.shapes.length; i++) {\n          if (this.shapes[i] === this.squares[index]) {\n            v = i;\n            break;\n          }\n        }\n        if (this.resiz) {\n          this.squares[index].draggable = false;\n          this.squares[index].width *= this.userInput;\n          this.squares[index].height *= this.userInput;\n          this.squares[index].draggable = true;\n          this.shapes[v] = this.squares[index];\n        }\n        // this.squares[index].fill = this.selectedColor;\n        if (this.delete) {\n          this.squares.splice(index, 1);\n          this.shapes.splice(v, 1);\n          this.delete = false;\n        }\n        if (this.cofill) {\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\n          this.selectedColor2 = selectedFillColor;\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\n          selectedFillColor = this.pureColor;\n          this.shapes[v] = this.squares[index];\n          this.cofill = false;\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\n        }\n\n        if (this.coledge) {\n          let selectedEdgeColor = this.pureColor; // Use the selected edge color\n          this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\n          this.coledge = false;\n          this.shapes[v] = this.squares[index];\n          this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\n        }\n      }\n    },\n\n    del() {\n      this.rectangle = false;\n      this.circ = false;\n      this.ellips = false;\n      this.lin = false;\n      this.sqrt = false;\n      this.tria = false;\n      this.cofill = false;\n      this.delete = true;\n      this.coledge = false;\n      this.bru = false;\n    },\n    move() {\n      this.mov = true;\n    },\n    startDrawing() {\n      if (this.rectangle === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              width: 0,\n              height: 0\n            };\n            console.log(this.currentShape.x);\n            console.log(this.currentShape.y);\n          }\n        }\n      } else if (this.circ === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 0\n            };\n          }\n        }\n      } else if (this.ellips === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radiusX: 0,\n              radiusY: 0\n            };\n          }\n        }\n      } else if (this.lin === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              stroke: this.pureColor2,\n              points: [position.x, position.y]\n            };\n          }\n        }\n      } else if (this.sqrt === true) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              width: 0,\n              height: 0\n            };\n          }\n        }\n      } else if (this.tria) {\n        this.isdraw = true;\n        const stage = this.$refs.stage.getStage();\n        if (stage) {\n          const position = stage.getPointerPosition();\n          if (position) {\n            this.currentShape = {\n              x: position.x,\n              y: position.y,\n              fill: this.pureColor,\n              stroke: this.pureColor2,\n              radius: 0\n            };\n          }\n        }\n      }\n      /*\r\n      else if(this.bru)\r\n      {\r\n            this.isdraw = true;\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape = {\r\n                \r\n            stroke:this.pureColor2,\r\n             points: [position.x, position.y]\r\n              };\r\n            }\r\n          }\r\n      }\r\n      */\n    },\n\n    stopDrawing() {\n      if (this.isdraw) {\n        this.isdraw = false;\n        console.log(\"xxxxx\");\n        if (this.circ) {\n          this.circles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n          // while(true){\n          // console.log(this.shapes[0]);\n          // }\n        } else if (this.rectangle) {\n          this.rectangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.ellips) {\n          this.ellipses.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.lin || this.bru) {\n          this.lines.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.sqrt) {\n          this.squares.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        } else if (this.tria) {\n          this.triangles.push({\n            ...this.currentShape\n          });\n          this.shapes.push({\n            ...this.currentShape\n          });\n        }\n        this.currentShape = null;\n        this.circ = false;\n        this.ellips = false;\n        this.rectangle = false;\n        this.lin = false;\n        this.sqrt = false;\n        this.tria = false;\n        this.mov = false;\n        this.bru = false;\n      }\n    },\n    draw() {\n      if (this.rectangle) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.y - this.currentShape.y;\n            }\n          }\n        }\n      }\n      //--------------------------------------------------------------------------------\n      else if (this.circ) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n      //************************************************************************************************** */\n      else if (this.ellips) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\n              this.currentShape.radiusY = Math.abs(position.y - this.currentShape.y);\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.lin) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.points[2] = position.x;\n              this.currentShape.points[3] = position.y;\n            }\n          }\n        }\n      }\n      //******************************************** */\n      else if (this.sqrt) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.width = position.x - this.currentShape.x;\n              this.currentShape.height = position.x - this.currentShape.x;\n            }\n          }\n        }\n      }\n      //************************************ **/\n      else if (this.tria) {\n        if (this.isdraw) {\n          const stage = this.$refs.stage.getStage();\n          if (stage) {\n            const position = stage.getPointerPosition();\n            if (position) {\n              this.currentShape.radius = Math.sqrt(Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\n            }\n          }\n        }\n      }\n    },\n    async saving() {\n      await fetch('http://localhost:8080/api/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filePath: this.filePath\n        })\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","ColorInputWithoutInstance","name","data","value","selectedColor","selectedColor2","selectedColor3","selectedColor4","selectedColor5","configKonva","width","height","pureColor","pureColor2","isdraw","rectangles","squares","lines","circles","ellipses","triangles","rectangle","circ","ellips","lin","sqrt","tria","bru","delete","mov","cofill","coledge","currentShape","shapes","selectedShapeName","resiz","userInput","sav","path","methods","setup","save","saving","newpo","type","index","e","v","i","length","x","target","y","console","log","rect","brush","ellipse","circle","line","square","triangle","fill","edge","clr","resize","document","getElementById","shapeClicked","draggable","radius","splice","selectedFillColor","selectedEdgeColor","stroke","slice","radiusX","radiusY","del","move","startDrawing","stage","$refs","getStage","position","getPointerPosition","points","stopDrawing","push","draw","Math","pow","abs","fetch","method","headers","body","JSON","stringify","filePath"],"sources":["C:\\save load\\paint\\paintVue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n    <div class=\"appaint\" style=\"border:solid black 2px; width:1130px; background-color:#404340 ;\">\r\n      <div class=\"header\">\r\n    <div class=\"operations\" >\r\n      <button style=\"background-color:rgb(111, 125, 131)\">open <i class=\"fa-solid fa-folder-open\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\" @click=\"save()\">Save <i class=\"fa-solid fa-floppy-disk\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\">Undo <i class=\"fa-solid fa-arrow-rotate-left\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\">Redo <i class=\"fa-solid fa-rotate-right\"></i></button>\r\n      <button  style=\"background-color:rgb(111, 125, 131)\" @click=\"del()\">Delete <i class=\"fa-solid fa-eraser\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\"  @click=\"clr()\">clear <i class=\"fa-solid fa-trash\"></i></button>\r\n      <button style=\"background-color:rgb(111, 125, 131)\" >copy <i class=\"fa-solid fa-copy\"></i></button>\r\n      <button for=\"userInput\"  style=\"background-color:rgb(111, 125, 131)\" @click=\"resize() \">resize</button>\r\n      <input type=\"text\" id=\"userInput\" style=\"border:solid black ;\">\r\n      \r\n  \r\n    </div>\r\n    <div class=\"clorfil\" >\r\n      <div class=\"block\">\r\n        <div class=\"fillcolor\">\r\n          <color-picker v-model:pureColor=\"pureColor\" v-model:gradientColor=\"gradientColor\"/>\r\n      </div>\r\n        <button @click=\"fill()\" style=\"background-color:rgb(111, 125, 131)\">fill<i class=\"fa-solid fa-fill-drip\"></i></button>\r\n        <button @click=\"edge()\" style=\"background-color:rgb(111, 125, 131)\">border<i class=\"fa-solid fa-paintbrush\"></i></button>\r\n      \r\n    </div>\r\n    </div>\r\n  </div>\r\n   \r\n    <div class=\"paint\">\r\n     \r\n      <div class=\"bordshaps\" >\r\n       \r\n      <div class=\"shaps\">\r\n        <div class=\"block\">\r\n       <button @click=\"square()\" ><div class=\"square\"></div></button>\r\n       <label >square</label>\r\n      </div>\r\n        <div class=\"block\">\r\n       <button @click=\"rect()\" ><div class=\"rectengle\"></div></button>\r\n       <label >rectengle</label>\r\n      </div>\r\n        <div class=\"block\">\r\n          <button @click=\"circle()\" ><div class=\"circle\"></div></button>\r\n       <label >circle</label>\r\n      </div>\r\n        <div class=\"block\">\r\n       <button @click=\"triangle()\" ><div class=\"triangle-up\"></div></button>\r\n       <label >triangle</label>\r\n      </div>\r\n      <div class=\"block\">\r\n        <button @click=\"ellipse()\"><div class=\"oval\"></div></button>\r\n        <label >ellips</label>\r\n       </div>\r\n      <div class=\"block\">\r\n        <button @click=\"line()\" style=\"width:30px;\"><i class=\"fa-solid fa-lines-leaning\"></i></button>\r\n        <label >line</label>\r\n       </div>\r\n      </div>\r\n    </div>\r\n      <div class=\"bord\" style=\"border: solid black 2px; border-radius: 10px; background-color:#ffffff;margin-left:2px \">\r\n    <v-stage :config=\"configKonva\" ref=\"stage\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" \r\n       >\r\n      <v-layer>\r\n        <!-- drawing rectangles -->\r\n        <v-rect\r\n         v-for=\"(rect, index) in rectangles\"\r\n          :key=\"index\"\r\n          :config=\"{ \r\n            type:'rectangle',\r\n            x:  rect.x,\r\n            y: rect.y,\r\n            width: rect.width,\r\n            height: rect.height,\r\n            fill: rect.fill, // Use the selected fill color\r\n            stroke: rect.stroke, // Use the selected edge color\r\n            strokeWidth: 2 ,\r\n            draggable:true,\r\n             \r\n         }\"\r\n           \r\n          @click=\"shapeClicked('rect', index) \"\r\n         @dragend=\"newpo('rect', index, $event)\"   \r\n        \r\n          \r\n        ></v-rect>\r\n       <!-- drawing circles -->\r\n       <v-circle\r\n        v-for=\"(circle, index) in circles\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'circle',\r\n            x: circle.x,\r\n            y: circle.y,\r\n            radius:circle.radius,\r\n            fill:circle.fill,\r\n            stroke:circle.stroke,\r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n           @click=\"shapeClicked('circle', index)\"\r\n           @dragend=\"newpo('circle', index, $event)\"     >\r\n  \r\n       </v-circle>\r\n       <!-- drawing ellipses -->\r\n       <v-ellipse\r\n          v-for=\"(ellipse, index) in ellipses\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'ellipse',\r\n            x: ellipse.x,\r\n            y: ellipse.y,\r\n            radiusX:ellipse.radiusX,\r\n            radiusY:ellipse.radiusY,\r\n            fill: ellipse.fill, // Use the selected fill color\r\n            stroke: ellipse.stroke, // Use the selected edge color\r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n         @click=\"shapeClicked('ellipse', index)\"\r\n         @dragend=\"newpo('ellipse', index, $event)\"   \r\n       >\r\n  \r\n       </v-ellipse>\r\n       <!-- drawing line segment -->\r\n       <v-line\r\n         v-for=\"(line, index) in lines\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'line',\r\n            points:line.points,\r\n            stroke: line.stroke,\r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n           @click=\"shapeClicked('line', index)\"\r\n           @dragend=\"newpo('line', index, $event)\"   \r\n       >\r\n  \r\n       </v-line>\r\n    <!-- square -->\r\n    <v-rect\r\n     v-for=\"(square, index) in squares\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'square',\r\n             x: square.x,\r\n            y: square.y,\r\n            width: square.width,\r\n            height: square.height,\r\n            fill: square.fill, // Use the selected fill color\r\n            stroke: square.stroke, // Use the selected edge color\r\n            strokeWidth: 2 ,\r\n            draggable:true,\r\n          }\"\r\n        @click=\"shapeClicked('square', index)\"\r\n        @dragend=\"newpo('square', index, $event)\"   \r\n    >\r\n  \r\n    </v-rect>\r\n    <v-regular-polygon\r\n     v-for=\"(triangle, index) in triangles\"\r\n          :key=\"index\"\r\n          :config=\"{\r\n            type:'triangle',\r\n            x: triangle.x,\r\n            y: triangle.y,\r\n            sides:3,\r\n            radius:triangle.radius,\r\n            fill: triangle.fill, \r\n            stroke: triangle.stroke, \r\n            strokeWidth: 2,\r\n            draggable:true,\r\n          }\"\r\n        @click=\"shapeClicked('triangle', index)\"\r\n        @dragend=\"newpo('triangle', index, $event)\"   \r\n    >\r\n  \r\n    </v-regular-polygon>\r\n      \r\n  \r\n      </v-layer>\r\n    </v-stage>\r\n  </div>\r\n    \r\n  </div>\r\n  </div>\r\n  </template>\r\n  \r\n  <script>\r\n  //import Konva from 'konva';\r\n  \r\n  import { ref } from \"vue\";\r\n  import { ColorInputWithoutInstance } from \"tinycolor2\";\r\n  \r\n  export default  {\r\n    name: 'HelloWorld',\r\n    data() {\r\n      return {\r\n        value: null,\r\n        selectedColor: '',\r\n        selectedColor2: '',\r\n        selectedColor3: '',\r\n        selectedColor4: '',\r\n        selectedColor5: '',\r\n        configKonva: {\r\n          width: 1000,\r\n          height: 800,\r\n        },\r\n        pureColor: '#ffffff', // Selected fill color\r\n        pureColor2: '#000000', // Selected edge color\r\n        isdraw: false,\r\n        rectangles:[],\r\n        squares:[],\r\n        lines:[],\r\n        circles:[],\r\n        ellipses:[],\r\n        triangles:[],\r\n        rectangle:false,\r\n        circ:false,\r\n        ellips:false,\r\n        lin:false,\r\n        sqrt:false,\r\n        tria:false,\r\n        bru:false,\r\n        delete:false,\r\n        mov:false,\r\n        cofill:false,\r\n        coledge:false,\r\n        currentShape:null,\r\n        shapes:[],\r\n        selectedShapeName: '',\r\n        resiz:false,\r\n        userInput:0,\r\n        sav:false,\r\n        path:\"C:\\\\Users\\\\omark\\\\shapes.json\" \r\n      };\r\n    },\r\n    methods: {\r\n      setup() {\r\n        const pureColor = ref<ColorInputWithoutInstance>(\"red\");\r\n        return{pureColor}\r\n      },\r\n      save()\r\n      {\r\n          this.saving();\r\n      },\r\n      \r\n  newpo(type, index,e) {\r\n     var v=0;\r\n    if (type === 'circle') {\r\n     \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.circles[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.circles[index].x=e.target.x();\r\n      this.circles[index].y=e.target.y();\r\n      this.shapes[v]=this.circles[index];\r\n      console.log(this.shapes[v]);\r\n      console.log(this.circles[index].x);\r\n      console.log(this.circles[index].y);\r\n      }\r\n      if (type === 'rect') {\r\n        \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.rectangles[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.rectangles[index].x=e.target.x();\r\n      this.rectangles[index].y=e.target.y();\r\n      this.shapes[v]=this.rectangles[index];\r\n      console.log(this.rectangles[index].x);\r\n      console.log(this.rectangles[index].y);\r\n      }\r\n      if (type === 'ellipse') {\r\n      \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.ellipses[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.ellipses[index].x=e.target.x();\r\n      this.ellipses[index].y=e.target.y();\r\n      this.shapes[v]=this.ellipses[index];\r\n      console.log(this.ellipses[index].x);\r\n      console.log(this.ellipses[index].y);\r\n      }\r\n      if (type === 'line') {\r\n    \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.lines[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.lines[index].x=e.target.x();\r\n      this.lines[index].y=e.target.y();\r\n      this.shapes[v]=this.lines[index];\r\n      console.log(this.lines[index].x);\r\n      console.log(this.lines[index].y);\r\n      }\r\n      if (type === 'square') {\r\n      \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.squares[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.squares[index].x=e.target.x();\r\n      this.squares[index].y=e.target.y();\r\n      this.shapes[v]=this.squares[index];\r\n      console.log(this.squares[index].x);\r\n      console.log(this.squares[index].y);\r\n      }\r\n      if (type === 'triangle') {\r\n      \r\n      for(let i=0;i<this.shapes.length;i++){\r\n        if(this.shapes[i]===this.triangles[index])\r\n        {\r\n             v=i;\r\n             break;\r\n        }\r\n      }\r\n      this.triangles[index].x=e.target.x();\r\n      this.triangles[index].y=e.target.y();\r\n      this.shapes[v]=this.triangles[index];\r\n      console.log(this.triangles[index].x);\r\n      console.log(this.triangles[index].y);\r\n      }\r\n      \r\n    },\r\n      rect(){\r\n           this.rectangle=true;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      brush(){\r\n             this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=true;\r\n      },\r\n      ellipse()\r\n      {\r\n         this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=true;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      }, \r\n      circle()\r\n      {\r\n           this.rectangle=false;\r\n         this.circ=true;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      line()\r\n      {\r\n             this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=true;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      square()\r\n      {\r\n  \r\n            this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=true;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      triangle()\r\n      {\r\n            this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=true;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      fill(){\r\n  \r\n            this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=true;\r\n        this.delete=false;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n  \r\n      },\r\n      edge(){\r\n          this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=false;\r\n        this.coledge=true;\r\n        this.bru=false;\r\n  \r\n      },\r\n      clr()\r\n      {\r\n        this.circles=[];\r\n        this.lines=[];\r\n        this.squares=[];\r\n        this.rectangles=[];\r\n        this.triangles=[];\r\n        this.ellipses=[];\r\n        this.shapes=[];\r\n      \r\n      },\r\n      resize(){\r\n        this.resiz=true;\r\n        this.userInput = document.getElementById('userInput').value;\r\n  \r\n      },\r\n       shapeClicked(type, index) {\r\n        if(type==='triangle')\r\n       {\r\n  \r\n  \r\n  \r\n        this.triangles[index].draggable=true;\r\n          let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.triangles[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n         \r\n          this.triangles[index].draggable=false;\r\n          this.triangles[index].radius *=  this.userInput;\r\n          this.triangles[index].draggable=true;\r\n          this.shapes[v]=this.triangles[index];\r\n          this.resiz=false;\r\n  \r\n        }\r\n          if(this.delete)\r\n          {\r\n            \r\n                this.triangles.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n               // console.log(this.shapes);\r\n                this.delete=false;\r\n          }\r\n  \r\n         if (this.cofill) {\r\n          let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.selectedColor2= selectedFillColor\r\n          this.triangles[index].fill = selectedFillColor;\r\n          this.shapes[v]=this.triangles[index];       // Assign the selected fill color to the fill property of the shape object\r\n          selectedFillColor=this.pureColor\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          \r\n                   }\r\n               if(this.coledge){\r\n                let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.triangles[index].stroke = selectedEdgeColor; \r\n            this.shapes[v]=this.triangles[index]; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n         \r\n            }\r\n         \r\n         /*********************************************************************** */\r\n          \r\n       }\r\n       else if(type==='circle')\r\n       {\r\n        this.circles[index].draggable=true;\r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.circles[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n          this.circles[index].draggable=false;\r\n          this.circles[index].radius *= this.userInput;\r\n          this.circles[index].draggable=true;\r\n          this.shapes[v]=this.circles[index];\r\n          this.resiz=false;\r\n        }\r\n            if(this.delete)\r\n          {\r\n           \r\n                this.circles.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n  \r\n                  this.delete=false;\r\n          }\r\n          if (this.cofill) {\r\n  \r\n          let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.circles[index].fill = selectedFillColor; \r\n             this.shapes[v]=this.circles[index];   // Assign the selected fill color to the fill property of the shape object\r\n          selectedFillColor=this.pureColor\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n             \r\n                \r\n                   }\r\n                  if(this.coledge){\r\n               let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.circles[index].stroke = selectedEdgeColor; \r\n            this.shapes[v]=this.circles[index]; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          \r\n         \r\n       }  \r\n         \r\n       }\r\n       else if(type==='line')\r\n       {\r\n  \r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.lines[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n               if(this.delete)\r\n          {\r\n           \r\n                this.lines.splice(index,1);\r\n                this.shapes.slice(v,1);\r\n                  this.delete=false;\r\n          }\r\n          if(this.coledge){\r\n               let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.lines[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n            this.shapes[v]=this.lines[index];\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          }\r\n       }\r\n       /************************************************************ */\r\n       else if(type==='rect')\r\n       {\r\n        this.rectangles[index].draggable=true;\r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.rectangles[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n  \r\n        this.rectangles[index].draggable=true;\r\n        if(this.resiz)\r\n        {\r\n          this.rectangles[index].draggable=false;\r\n          this.rectangles[index].width *= this.userInput;\r\n          this.rectangles[index].height *= this.userInput;\r\n          this.rectangles[index].draggable=true;\r\n          this.shapes[v]=this.rectangles[index];\r\n          this.resiz=false;\r\n        }\r\n               if(this.delete)\r\n          {\r\n           \r\n                this.rectangles.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n                  this.delete=false;\r\n          }\r\n          if (this.cofill) {\r\n          let selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.rectangles[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n          //selectedFillColor=this.pureColor\r\n          this.shapes[v]=this.rectangles[index];\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          \r\n                   }\r\n          if(this.coledge){\r\n               let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.rectangles[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.shapes[v]=this.rectangles[index];\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          \r\n         \r\n       }\r\n       }\r\n       /*************************************************************** */\r\n        else if(type==='ellipse') {\r\n          this.ellipses[index].draggable=true;\r\n         let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.ellipses[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n          this.ellipses[index].draggable=false;\r\n          this.ellipses[index].radiusX *=  this.userInput;\r\n          this.ellipses[index].radiusY *=  this.userInput;\r\n          this.ellipses[index].draggable=true;\r\n          this.shapes[v]=this.ellipses[index];\r\n          this.resiz=false;\r\n        }\r\n                  if(this.delete)\r\n          {\r\n           \r\n                this.ellipses.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n                  this.delete=false;\r\n          }\r\n            if (this.cofill) {\r\n        let selectedFillColor = this.pureColor;\r\n        this.ellipses[index].fill = selectedFillColor;\r\n        this.shapes[v]=this.ellipses[index];\r\n        this.cofill = false;\r\n        this.pureColor = '#ffffff';\r\n      }\r\n  \r\n          if(this.coledge){\r\n             let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.ellipses[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n              this.shapes[v]=this.ellipses[index];\r\n            this.coledge = false;\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n         \r\n       }\r\n          }\r\n          /**************************************************** */\r\n       else if(type==='square')\r\n       {\r\n        this.squares[index].draggable=true;\r\n          let v=0;\r\n          for(let i=0;i<this.shapes.length;i++)\r\n          {\r\n            if(this.shapes[i]===this.squares[index])\r\n            {\r\n              v=i;\r\n              break;\r\n            }\r\n          }\r\n        if(this.resiz)\r\n        {\r\n          this.squares[index].draggable=false;\r\n          this.squares[index].width *=  this.userInput;\r\n          this.squares[index].height *=  this.userInput;\r\n         \r\n          this.squares[index].draggable=true;\r\n           this.shapes[v]=this.squares[index];\r\n        }\r\n       // this.squares[index].fill = this.selectedColor;\r\n                 if(this.delete)\r\n          {\r\n           \r\n                this.squares.splice(index,1);\r\n                this.shapes.splice(v,1);\r\n                  this.delete=false;\r\n          }\r\n        if (this.cofill) {\r\n          let   selectedFillColor = this.pureColor; // Store the selected fill color in a variable\r\n          this.selectedColor2= selectedFillColor\r\n          this.squares[index].fill = selectedFillColor; // Assign the selected fill color to the fill property of the shape object\r\n          selectedFillColor=this.pureColor\r\n            this.shapes[v]=this.squares[index];\r\n          this.cofill = false;\r\n          this.pureColor = '#ffffff'; // Reset the pureColor to a default value or another selected fill color\r\n          \r\n                   }\r\n          if(this.coledge)\r\n          {\r\n                    let selectedEdgeColor = this.pureColor; // Use the selected edge color\r\n            this.squares[index].stroke = selectedEdgeColor; // Assign the selected edge color to the stroke property of the shape object\r\n            this.coledge = false;\r\n              this.shapes[v]=this.squares[index];\r\n            this.pureColor = '#ffffff'; // Reset the pureColor2 to a default value or another selected edge color\r\n                  \r\n          }         \r\n         \r\n         \r\n       }\r\n  \r\n      },\r\n   \r\n  \r\n      del()\r\n      {\r\n                this.rectangle=false;\r\n         this.circ=false;\r\n        this.ellips=false;\r\n        this.lin=false;\r\n        this.sqrt=false;\r\n        this.tria=false;\r\n        this.cofill=false;\r\n        this.delete=true;\r\n        this.coledge=false;\r\n        this.bru=false;\r\n      },\r\n      move()\r\n      {\r\n        this.mov=true;\r\n      },\r\n      \r\n      \r\n        startDrawing() {\r\n       if(this.rectangle===true)\r\n        {\r\n            this.isdraw = true;\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape = {\r\n              x: position.x,\r\n              y: position.y,\r\n               fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n              width: 0,\r\n              height: 0,\r\n            };\r\n            console.log(this.currentShape.x);\r\n            console.log(this.currentShape.y);\r\n          }\r\n        }\r\n        }\r\n        else if(this.circ===true){\r\n                  this.isdraw = true;\r\n        const stage = this.$refs.stage.getStage();\r\n        if (stage) {\r\n          const position = stage.getPointerPosition();\r\n          if (position) {\r\n            this.currentShape = {\r\n              x: position.x,\r\n              y: position.y,\r\n              fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n              radius: 0,\r\n            };\r\n          }\r\n        }\r\n        }\r\n        else if(this.ellips===true)\r\n        {\r\n             this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                  x: position.x,\r\n                  y: position.y,\r\n                   fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n                radiusX: 0,\r\n                radiusY:0\r\n                };\r\n              }\r\n            }\r\n        }\r\n        else if(this.lin===true)\r\n        {\r\n                this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                  \r\n              stroke:this.pureColor2,\r\n               points: [position.x, position.y]\r\n                };\r\n              }\r\n            }\r\n        }\r\n        else if(this.sqrt===true)\r\n        {\r\n              this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                x: position.x,\r\n              y: position.y,\r\n               fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n              width: 0,\r\n              height: 0,\r\n                };\r\n              }\r\n            }\r\n        }\r\n        else if(this.tria)\r\n        {\r\n            this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                 x: position.x,\r\n                  y: position.y,\r\n                  fill:this.pureColor,\r\n              stroke:this.pureColor2,\r\n                  radius:0\r\n                };\r\n              }\r\n            }\r\n        }\r\n        /*\r\n        else if(this.bru)\r\n        {\r\n              this.isdraw = true;\r\n            const stage = this.$refs.stage.getStage();\r\n            if (stage) {\r\n              const position = stage.getPointerPosition();\r\n              if (position) {\r\n                this.currentShape = {\r\n                  \r\n              stroke:this.pureColor2,\r\n               points: [position.x, position.y]\r\n                };\r\n              }\r\n            }\r\n        }\r\n        */\r\n    \r\n       \r\n        \r\n      \r\n      },\r\n      stopDrawing() {\r\n       \r\n            if (this.isdraw) {\r\n          this.isdraw = false;\r\n          console.log(\"xxxxx\");\r\n          if(this.circ)\r\n          {\r\n                       this.circles.push({ ...this.currentShape });\r\n                       this.shapes.push({...this.currentShape});\r\n                     // while(true){\r\n                     // console.log(this.shapes[0]);\r\n                     // }\r\n          }\r\n        \r\n        else if(this.rectangle){\r\n            this.rectangles.push({...this.currentShape});\r\n              this.shapes.push({...this.currentShape});\r\n        }\r\n        \r\n        else if(this.ellips)\r\n        {\r\n             this.ellipses.push({...this.currentShape});\r\n               this.shapes.push({...this.currentShape});\r\n        }\r\n             \r\n        else if(this.lin||this.bru)\r\n        {\r\n               this.lines.push({...this.currentShape});\r\n                 this.shapes.push({...this.currentShape});\r\n        }\r\n            \r\n        else if(this.sqrt)\r\n        {\r\n                  this.squares.push({...this.currentShape});\r\n                    this.shapes.push({...this.currentShape});\r\n        }\r\n            \r\n        else if(this.tria)\r\n        {\r\n               this.triangles.push({...this.currentShape}); \r\n                  this.shapes.push({...this.currentShape});\r\n        }\r\n                \r\n  \r\n  \r\n  \r\n          this.currentShape = null;\r\n          this.circ=false;\r\n          this.ellips=false;\r\n          this.rectangle=false;\r\n          this.lin=false;\r\n          this.sqrt=false;\r\n          this.tria=false;\r\n          this.mov = false;\r\n          this.bru=false;\r\n        }\r\n       \r\n        \r\n        \r\n      \r\n      },\r\n      draw() {\r\n        if(this.rectangle)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.width = position.x - this.currentShape.x;\r\n              this.currentShape.height = position.y - this.currentShape.y;\r\n            }\r\n          }\r\n        }\r\n        }\r\n      //--------------------------------------------------------------------------------\r\n        else if(this.circ)\r\n        {\r\n            if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.radius = Math.sqrt(\r\n                  Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n            }\r\n          }\r\n        }\r\n        }\r\n        //************************************************************************************************** */\r\n        else if(this.ellips)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.radiusX = Math.abs(position.x - this.currentShape.x);\r\n              this.currentShape.radiusY=Math.abs(position.y - this.currentShape.y);\r\n            }\r\n          }\r\n        }\r\n        }\r\n        //******************************************** */\r\n        else if(this.lin)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n               this.currentShape.points[2] = position.x;\r\n            this.currentShape.points[3] = position.y;\r\n             \r\n            }\r\n          }\r\n        }\r\n        }\r\n        //******************************************** */\r\n        else if(this.sqrt)\r\n        {\r\n              if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n              this.currentShape.width = position.x - this.currentShape.x;\r\n              this.currentShape.height = position.x - this.currentShape.x;\r\n            }\r\n          }\r\n        }\r\n        }\r\n        //************************************ **/\r\n        else if(this.tria)\r\n        {\r\n               if (this.isdraw) {\r\n          const stage = this.$refs.stage.getStage();\r\n          if (stage) {\r\n            const position = stage.getPointerPosition();\r\n            if (position) {\r\n             \r\n              this.currentShape.radius=Math.sqrt(\r\n                  Math.pow(position.x - this.currentShape.x, 2) + Math.pow(position.y - this.currentShape.y, 2));\r\n            }\r\n          }\r\n        }\r\n        }\r\n        \r\n      },\r\n  \r\n      async saving()\r\n      {\r\n        await fetch('http://localhost:8080/api/', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ filePath: this.filePath }),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  </script>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  <style>\r\n  .paint{\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    \r\n  }\r\n  .header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap:0px;\r\n  \r\n  }\r\n  .operations{\r\n    width:600px;\r\n    border: #555 solid  ;\r\n    border-color: #555;\r\n    background-color: rgb(111, 125, 131);\r\n    border-radius:20px;\r\n    display: flex;\r\n    gap: 20px;\r\n    align-content: center;\r\n    margin:10px;\r\n    margin:  2px auto;\r\n    justify-content: center;\r\n    justify-items: center;\r\n  \r\n  }\r\n  .clorfil{\r\n    margin-right: 30px;\r\n    width:180px;\r\n    border: rgb(7, 5, 5) solid  ;\r\n    border-color: #555;\r\n    background-color: rgb(111, 125, 131);\r\n    border-radius:20px;\r\n    \r\n  }\r\n  .bordshaps{\r\n    height: 180px;\r\n    margin: 3px;\r\n    padding-left: 1px;\r\n    padding-right: 1px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: #555 solid  ;\r\n    border-color: #555;\r\n    background-color: rgb(111, 125, 131);\r\n    border-radius:20px;\r\n    margin:   auto 2px;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    \r\n  }\r\n  \r\n  .shaps{\r\n    margin-right: 3px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    \r\n  } \r\n  label{\r\n    opacity: 0.2;\r\n    color: aliceblue;\r\n    \r\n  }\r\n  .block{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 5px;\r\n  }\r\n  button:hover {\r\n    cursor: pointer;\r\n  }\r\n  label:hover{\r\n    opacity: 100;\r\n    color: aliceblue;\r\n  \r\n  }\r\n  .square {\r\n    height: 10px;\r\n    width: 10px;\r\n    border: black solid;\r\n  }\r\n  .rectengle {\r\n    height: 5px;\r\n    width: 10px;\r\n    border: black solid;\r\n  }\r\n  .circle {\r\n    height: 10px;\r\n    width: 10px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .circle1{\r\n    height: 50px;\r\n    width: 50px;\r\n    border: black solid;\r\n    border-radius: 50%;\r\n  }\r\n  .oval {\r\n    height: 5px;\r\n    width: 10px;\r\n    border: black solid;\r\n    \r\n    border-radius: 50%;\r\n  }\r\n  .triangle-up {\r\n      width: 0;\r\n      height: 0;\r\n      border-left: 8px solid transparent;\r\n      border-right: 8px solid transparent;\r\n      border-bottom: 14px solid #555;\r\n  }\r\n  .line{\r\n      border-left: 1px solid transparent;\r\n      border-bottom:18px solid #555;\r\n  }\r\n  .color{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-bottom: 10px;\r\n  \r\n  }\r\n  .fillcolor{\r\n    height: 24px;\r\n    width: 23px;\r\n    border: black solid;\r\n    border-radius: 49%;\r\n    overflow: hidden;\r\n  \r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}